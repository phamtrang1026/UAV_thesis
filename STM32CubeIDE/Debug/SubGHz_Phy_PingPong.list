
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb50  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800ec90  0800ec90  0000fc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f538  0800f538  00011070  2**0
                  CONTENTS
  4 .ARM          00000008  0800f538  0800f538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f540  0800f540  00011070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800f540  0800f540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800f550  0800f550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800f560  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000070  0800f5d0  00011070  2**2
                  ALLOC
 10 RAM1_region   00000000  20000af8  20000af8  00011070  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00011070  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000af8  20000af8  00011af8  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY
 14 .debug_info   000430e9  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000095a1  00000000  00000000  00054183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000c523  00000000  00000000  0005d724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002058  00000000  00000000  00069c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000018b9  00000000  00000000  0006bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bf54  00000000  00000000  0006d559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003697a  00000000  00000000  000994ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e0596  00000000  00000000  000cfe27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b03bd  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00006b5c  00000000  00000000  001b0400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000071  00000000  00000000  001b6f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ec78 	.word	0x0800ec78

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800ec78 	.word	0x0800ec78

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	@ 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_fmul>:
 800044c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000454:	bf1e      	ittt	ne
 8000456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045a:	ea92 0f0c 	teqne	r2, ip
 800045e:	ea93 0f0c 	teqne	r3, ip
 8000462:	d06f      	beq.n	8000544 <__aeabi_fmul+0xf8>
 8000464:	441a      	add	r2, r3
 8000466:	ea80 0c01 	eor.w	ip, r0, r1
 800046a:	0240      	lsls	r0, r0, #9
 800046c:	bf18      	it	ne
 800046e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000472:	d01e      	beq.n	80004b2 <__aeabi_fmul+0x66>
 8000474:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800047c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000480:	fba0 3101 	umull	r3, r1, r0, r1
 8000484:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000488:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800048c:	bf3e      	ittt	cc
 800048e:	0049      	lslcc	r1, r1, #1
 8000490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000494:	005b      	lslcc	r3, r3, #1
 8000496:	ea40 0001 	orr.w	r0, r0, r1
 800049a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800049e:	2afd      	cmp	r2, #253	@ 0xfd
 80004a0:	d81d      	bhi.n	80004de <__aeabi_fmul+0x92>
 80004a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80004a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004aa:	bf08      	it	eq
 80004ac:	f020 0001 	biceq.w	r0, r0, #1
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80004ba:	bf08      	it	eq
 80004bc:	0249      	lsleq	r1, r1, #9
 80004be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004c6:	3a7f      	subs	r2, #127	@ 0x7f
 80004c8:	bfc2      	ittt	gt
 80004ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d2:	4770      	bxgt	lr
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	3a01      	subs	r2, #1
 80004de:	dc5d      	bgt.n	800059c <__aeabi_fmul+0x150>
 80004e0:	f112 0f19 	cmn.w	r2, #25
 80004e4:	bfdc      	itt	le
 80004e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004ea:	4770      	bxle	lr
 80004ec:	f1c2 0200 	rsb	r2, r2, #0
 80004f0:	0041      	lsls	r1, r0, #1
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	f1c2 0220 	rsb	r2, r2, #32
 80004fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000502:	f140 0000 	adc.w	r0, r0, #0
 8000506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050a:	bf08      	it	eq
 800050c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000510:	4770      	bx	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800051a:	bf02      	ittt	eq
 800051c:	0040      	lsleq	r0, r0, #1
 800051e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000522:	3a01      	subeq	r2, #1
 8000524:	d0f9      	beq.n	800051a <__aeabi_fmul+0xce>
 8000526:	ea40 000c 	orr.w	r0, r0, ip
 800052a:	f093 0f00 	teq	r3, #0
 800052e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000532:	bf02      	ittt	eq
 8000534:	0049      	lsleq	r1, r1, #1
 8000536:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800053a:	3b01      	subeq	r3, #1
 800053c:	d0f9      	beq.n	8000532 <__aeabi_fmul+0xe6>
 800053e:	ea41 010c 	orr.w	r1, r1, ip
 8000542:	e78f      	b.n	8000464 <__aeabi_fmul+0x18>
 8000544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000548:	ea92 0f0c 	teq	r2, ip
 800054c:	bf18      	it	ne
 800054e:	ea93 0f0c 	teqne	r3, ip
 8000552:	d00a      	beq.n	800056a <__aeabi_fmul+0x11e>
 8000554:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000558:	bf18      	it	ne
 800055a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800055e:	d1d8      	bne.n	8000512 <__aeabi_fmul+0xc6>
 8000560:	ea80 0001 	eor.w	r0, r0, r1
 8000564:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000568:	4770      	bx	lr
 800056a:	f090 0f00 	teq	r0, #0
 800056e:	bf17      	itett	ne
 8000570:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000574:	4608      	moveq	r0, r1
 8000576:	f091 0f00 	teqne	r1, #0
 800057a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800057e:	d014      	beq.n	80005aa <__aeabi_fmul+0x15e>
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d101      	bne.n	800058a <__aeabi_fmul+0x13e>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	d10f      	bne.n	80005aa <__aeabi_fmul+0x15e>
 800058a:	ea93 0f0c 	teq	r3, ip
 800058e:	d103      	bne.n	8000598 <__aeabi_fmul+0x14c>
 8000590:	024b      	lsls	r3, r1, #9
 8000592:	bf18      	it	ne
 8000594:	4608      	movne	r0, r1
 8000596:	d108      	bne.n	80005aa <__aeabi_fmul+0x15e>
 8000598:	ea80 0001 	eor.w	r0, r0, r1
 800059c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80005a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a8:	4770      	bx	lr
 80005aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_fdiv>:
 80005b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005bc:	bf1e      	ittt	ne
 80005be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c2:	ea92 0f0c 	teqne	r2, ip
 80005c6:	ea93 0f0c 	teqne	r3, ip
 80005ca:	d069      	beq.n	80006a0 <__aeabi_fdiv+0xec>
 80005cc:	eba2 0203 	sub.w	r2, r2, r3
 80005d0:	ea80 0c01 	eor.w	ip, r0, r1
 80005d4:	0249      	lsls	r1, r1, #9
 80005d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005da:	d037      	beq.n	800064c <__aeabi_fdiv+0x98>
 80005dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005e8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005ec:	428b      	cmp	r3, r1
 80005ee:	bf38      	it	cc
 80005f0:	005b      	lslcc	r3, r3, #1
 80005f2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005f6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005fa:	428b      	cmp	r3, r1
 80005fc:	bf24      	itt	cs
 80005fe:	1a5b      	subcs	r3, r3, r1
 8000600:	ea40 000c 	orrcs.w	r0, r0, ip
 8000604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000608:	bf24      	itt	cs
 800060a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800060e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000616:	bf24      	itt	cs
 8000618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800061c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000624:	bf24      	itt	cs
 8000626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	bf18      	it	ne
 8000632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000636:	d1e0      	bne.n	80005fa <__aeabi_fdiv+0x46>
 8000638:	2afd      	cmp	r2, #253	@ 0xfd
 800063a:	f63f af50 	bhi.w	80004de <__aeabi_fmul+0x92>
 800063e:	428b      	cmp	r3, r1
 8000640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000644:	bf08      	it	eq
 8000646:	f020 0001 	biceq.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000654:	327f      	adds	r2, #127	@ 0x7f
 8000656:	bfc2      	ittt	gt
 8000658:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800065c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000660:	4770      	bxgt	lr
 8000662:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	3a01      	subs	r2, #1
 800066c:	e737      	b.n	80004de <__aeabi_fmul+0x92>
 800066e:	f092 0f00 	teq	r2, #0
 8000672:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0040      	lsleq	r0, r0, #1
 800067a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800067e:	3a01      	subeq	r2, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fdiv+0xc2>
 8000682:	ea40 000c 	orr.w	r0, r0, ip
 8000686:	f093 0f00 	teq	r3, #0
 800068a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800068e:	bf02      	ittt	eq
 8000690:	0049      	lsleq	r1, r1, #1
 8000692:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000696:	3b01      	subeq	r3, #1
 8000698:	d0f9      	beq.n	800068e <__aeabi_fdiv+0xda>
 800069a:	ea41 010c 	orr.w	r1, r1, ip
 800069e:	e795      	b.n	80005cc <__aeabi_fdiv+0x18>
 80006a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a4:	ea92 0f0c 	teq	r2, ip
 80006a8:	d108      	bne.n	80006bc <__aeabi_fdiv+0x108>
 80006aa:	0242      	lsls	r2, r0, #9
 80006ac:	f47f af7d 	bne.w	80005aa <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	f47f af70 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e776      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006bc:	ea93 0f0c 	teq	r3, ip
 80006c0:	d104      	bne.n	80006cc <__aeabi_fdiv+0x118>
 80006c2:	024b      	lsls	r3, r1, #9
 80006c4:	f43f af4c 	beq.w	8000560 <__aeabi_fmul+0x114>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e76e      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006cc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006d0:	bf18      	it	ne
 80006d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006d6:	d1ca      	bne.n	800066e <__aeabi_fdiv+0xba>
 80006d8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006dc:	f47f af5c 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006e0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006e4:	f47f af3c 	bne.w	8000560 <__aeabi_fmul+0x114>
 80006e8:	e75f      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006ea:	bf00      	nop

080006ec <__gesf2>:
 80006ec:	f04f 3cff 	mov.w	ip, #4294967295
 80006f0:	e006      	b.n	8000700 <__cmpsf2+0x4>
 80006f2:	bf00      	nop

080006f4 <__lesf2>:
 80006f4:	f04f 0c01 	mov.w	ip, #1
 80006f8:	e002      	b.n	8000700 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__cmpsf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d011      	beq.n	800073c <__cmpsf2+0x40>
 8000718:	b001      	add	sp, #4
 800071a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800071e:	bf18      	it	ne
 8000720:	ea90 0f01 	teqne	r0, r1
 8000724:	bf58      	it	pl
 8000726:	ebb2 0003 	subspl.w	r0, r2, r3
 800072a:	bf88      	it	hi
 800072c:	17c8      	asrhi	r0, r1, #31
 800072e:	bf38      	it	cc
 8000730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000734:	bf18      	it	ne
 8000736:	f040 0001 	orrne.w	r0, r0, #1
 800073a:	4770      	bx	lr
 800073c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000740:	d102      	bne.n	8000748 <__cmpsf2+0x4c>
 8000742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000746:	d105      	bne.n	8000754 <__cmpsf2+0x58>
 8000748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800074c:	d1e4      	bne.n	8000718 <__cmpsf2+0x1c>
 800074e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000752:	d0e1      	beq.n	8000718 <__cmpsf2+0x1c>
 8000754:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <__aeabi_cfrcmple>:
 800075c:	4684      	mov	ip, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4661      	mov	r1, ip
 8000762:	e7ff      	b.n	8000764 <__aeabi_cfcmpeq>

08000764 <__aeabi_cfcmpeq>:
 8000764:	b50f      	push	{r0, r1, r2, r3, lr}
 8000766:	f7ff ffc9 	bl	80006fc <__cmpsf2>
 800076a:	2800      	cmp	r0, #0
 800076c:	bf48      	it	mi
 800076e:	f110 0f00 	cmnmi.w	r0, #0
 8000772:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000774 <__aeabi_fcmpeq>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff fff4 	bl	8000764 <__aeabi_cfcmpeq>
 800077c:	bf0c      	ite	eq
 800077e:	2001      	moveq	r0, #1
 8000780:	2000      	movne	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_fcmplt>:
 8000788:	f84d ed08 	str.w	lr, [sp, #-8]!
 800078c:	f7ff ffea 	bl	8000764 <__aeabi_cfcmpeq>
 8000790:	bf34      	ite	cc
 8000792:	2001      	movcc	r0, #1
 8000794:	2000      	movcs	r0, #0
 8000796:	f85d fb08 	ldr.w	pc, [sp], #8
 800079a:	bf00      	nop

0800079c <__aeabi_fcmple>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff ffe0 	bl	8000764 <__aeabi_cfcmpeq>
 80007a4:	bf94      	ite	ls
 80007a6:	2001      	movls	r0, #1
 80007a8:	2000      	movhi	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmpge>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffd2 	bl	800075c <__aeabi_cfrcmple>
 80007b8:	bf94      	ite	ls
 80007ba:	2001      	movls	r0, #1
 80007bc:	2000      	movhi	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmpgt>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffc8 	bl	800075c <__aeabi_cfrcmple>
 80007cc:	bf34      	ite	cc
 80007ce:	2001      	movcc	r0, #1
 80007d0:	2000      	movcs	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <__aeabi_fcmpun>:
 80007d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007e4:	d102      	bne.n	80007ec <__aeabi_fcmpun+0x14>
 80007e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80007ea:	d108      	bne.n	80007fe <__aeabi_fcmpun+0x26>
 80007ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80007f0:	d102      	bne.n	80007f8 <__aeabi_fcmpun+0x20>
 80007f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80007f6:	d102      	bne.n	80007fe <__aeabi_fcmpun+0x26>
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	f04f 0001 	mov.w	r0, #1
 8000802:	4770      	bx	lr

08000804 <__aeabi_f2iz>:
 8000804:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000808:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800080c:	d30f      	bcc.n	800082e <__aeabi_f2iz+0x2a>
 800080e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000812:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000816:	d90d      	bls.n	8000834 <__aeabi_f2iz+0x30>
 8000818:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800081c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000820:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000824:	fa23 f002 	lsr.w	r0, r3, r2
 8000828:	bf18      	it	ne
 800082a:	4240      	negne	r0, r0
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr
 8000834:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000838:	d101      	bne.n	800083e <__aeabi_f2iz+0x3a>
 800083a:	0242      	lsls	r2, r0, #9
 800083c:	d105      	bne.n	800084a <__aeabi_f2iz+0x46>
 800083e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000842:	bf08      	it	eq
 8000844:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000848:	4770      	bx	lr
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	4770      	bx	lr

08000850 <__aeabi_uldivmod>:
 8000850:	b953      	cbnz	r3, 8000868 <__aeabi_uldivmod+0x18>
 8000852:	b94a      	cbnz	r2, 8000868 <__aeabi_uldivmod+0x18>
 8000854:	2900      	cmp	r1, #0
 8000856:	bf08      	it	eq
 8000858:	2800      	cmpeq	r0, #0
 800085a:	bf1c      	itt	ne
 800085c:	f04f 31ff 	movne.w	r1, #4294967295
 8000860:	f04f 30ff 	movne.w	r0, #4294967295
 8000864:	f000 b96a 	b.w	8000b3c <__aeabi_idiv0>
 8000868:	f1ad 0c08 	sub.w	ip, sp, #8
 800086c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000870:	f000 f806 	bl	8000880 <__udivmoddi4>
 8000874:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800087c:	b004      	add	sp, #16
 800087e:	4770      	bx	lr

08000880 <__udivmoddi4>:
 8000880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000884:	9d08      	ldr	r5, [sp, #32]
 8000886:	460c      	mov	r4, r1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d14e      	bne.n	800092a <__udivmoddi4+0xaa>
 800088c:	4694      	mov	ip, r2
 800088e:	458c      	cmp	ip, r1
 8000890:	4686      	mov	lr, r0
 8000892:	fab2 f282 	clz	r2, r2
 8000896:	d962      	bls.n	800095e <__udivmoddi4+0xde>
 8000898:	b14a      	cbz	r2, 80008ae <__udivmoddi4+0x2e>
 800089a:	f1c2 0320 	rsb	r3, r2, #32
 800089e:	4091      	lsls	r1, r2
 80008a0:	fa20 f303 	lsr.w	r3, r0, r3
 80008a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a8:	4319      	orrs	r1, r3
 80008aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b2:	fa1f f68c 	uxth.w	r6, ip
 80008b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008be:	fb07 1114 	mls	r1, r7, r4, r1
 80008c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c6:	fb04 f106 	mul.w	r1, r4, r6
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d90a      	bls.n	80008e4 <__udivmoddi4+0x64>
 80008ce:	eb1c 0303 	adds.w	r3, ip, r3
 80008d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80008d6:	f080 8112 	bcs.w	8000afe <__udivmoddi4+0x27e>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 810f 	bls.w	8000afe <__udivmoddi4+0x27e>
 80008e0:	3c02      	subs	r4, #2
 80008e2:	4463      	add	r3, ip
 80008e4:	1a59      	subs	r1, r3, r1
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ee:	fb07 1110 	mls	r1, r7, r0, r1
 80008f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f6:	fb00 f606 	mul.w	r6, r0, r6
 80008fa:	429e      	cmp	r6, r3
 80008fc:	d90a      	bls.n	8000914 <__udivmoddi4+0x94>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 31ff 	add.w	r1, r0, #4294967295
 8000906:	f080 80fc 	bcs.w	8000b02 <__udivmoddi4+0x282>
 800090a:	429e      	cmp	r6, r3
 800090c:	f240 80f9 	bls.w	8000b02 <__udivmoddi4+0x282>
 8000910:	4463      	add	r3, ip
 8000912:	3802      	subs	r0, #2
 8000914:	1b9b      	subs	r3, r3, r6
 8000916:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800091a:	2100      	movs	r1, #0
 800091c:	b11d      	cbz	r5, 8000926 <__udivmoddi4+0xa6>
 800091e:	40d3      	lsrs	r3, r2
 8000920:	2200      	movs	r2, #0
 8000922:	e9c5 3200 	strd	r3, r2, [r5]
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	428b      	cmp	r3, r1
 800092c:	d905      	bls.n	800093a <__udivmoddi4+0xba>
 800092e:	b10d      	cbz	r5, 8000934 <__udivmoddi4+0xb4>
 8000930:	e9c5 0100 	strd	r0, r1, [r5]
 8000934:	2100      	movs	r1, #0
 8000936:	4608      	mov	r0, r1
 8000938:	e7f5      	b.n	8000926 <__udivmoddi4+0xa6>
 800093a:	fab3 f183 	clz	r1, r3
 800093e:	2900      	cmp	r1, #0
 8000940:	d146      	bne.n	80009d0 <__udivmoddi4+0x150>
 8000942:	42a3      	cmp	r3, r4
 8000944:	d302      	bcc.n	800094c <__udivmoddi4+0xcc>
 8000946:	4290      	cmp	r0, r2
 8000948:	f0c0 80f0 	bcc.w	8000b2c <__udivmoddi4+0x2ac>
 800094c:	1a86      	subs	r6, r0, r2
 800094e:	eb64 0303 	sbc.w	r3, r4, r3
 8000952:	2001      	movs	r0, #1
 8000954:	2d00      	cmp	r5, #0
 8000956:	d0e6      	beq.n	8000926 <__udivmoddi4+0xa6>
 8000958:	e9c5 6300 	strd	r6, r3, [r5]
 800095c:	e7e3      	b.n	8000926 <__udivmoddi4+0xa6>
 800095e:	2a00      	cmp	r2, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x204>
 8000964:	eba1 040c 	sub.w	r4, r1, ip
 8000968:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800096c:	fa1f f78c 	uxth.w	r7, ip
 8000970:	2101      	movs	r1, #1
 8000972:	fbb4 f6f8 	udiv	r6, r4, r8
 8000976:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800097a:	fb08 4416 	mls	r4, r8, r6, r4
 800097e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000982:	fb07 f006 	mul.w	r0, r7, r6
 8000986:	4298      	cmp	r0, r3
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x11c>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000992:	d202      	bcs.n	800099a <__udivmoddi4+0x11a>
 8000994:	4298      	cmp	r0, r3
 8000996:	f200 80cd 	bhi.w	8000b34 <__udivmoddi4+0x2b4>
 800099a:	4626      	mov	r6, r4
 800099c:	1a1c      	subs	r4, r3, r0
 800099e:	fa1f f38e 	uxth.w	r3, lr
 80009a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80009a6:	fb08 4410 	mls	r4, r8, r0, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb00 f707 	mul.w	r7, r0, r7
 80009b2:	429f      	cmp	r7, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x148>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x146>
 80009c0:	429f      	cmp	r7, r3
 80009c2:	f200 80b0 	bhi.w	8000b26 <__udivmoddi4+0x2a6>
 80009c6:	4620      	mov	r0, r4
 80009c8:	1bdb      	subs	r3, r3, r7
 80009ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ce:	e7a5      	b.n	800091c <__udivmoddi4+0x9c>
 80009d0:	f1c1 0620 	rsb	r6, r1, #32
 80009d4:	408b      	lsls	r3, r1
 80009d6:	fa22 f706 	lsr.w	r7, r2, r6
 80009da:	431f      	orrs	r7, r3
 80009dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80009e0:	fa04 f301 	lsl.w	r3, r4, r1
 80009e4:	ea43 030c 	orr.w	r3, r3, ip
 80009e8:	40f4      	lsrs	r4, r6
 80009ea:	fa00 f801 	lsl.w	r8, r0, r1
 80009ee:	0c38      	lsrs	r0, r7, #16
 80009f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009f4:	fbb4 fef0 	udiv	lr, r4, r0
 80009f8:	fa1f fc87 	uxth.w	ip, r7
 80009fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000a00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a04:	fb0e f90c 	mul.w	r9, lr, ip
 8000a08:	45a1      	cmp	r9, r4
 8000a0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a0e:	d90a      	bls.n	8000a26 <__udivmoddi4+0x1a6>
 8000a10:	193c      	adds	r4, r7, r4
 8000a12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a16:	f080 8084 	bcs.w	8000b22 <__udivmoddi4+0x2a2>
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	f240 8081 	bls.w	8000b22 <__udivmoddi4+0x2a2>
 8000a20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a24:	443c      	add	r4, r7
 8000a26:	eba4 0409 	sub.w	r4, r4, r9
 8000a2a:	fa1f f983 	uxth.w	r9, r3
 8000a2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a32:	fb00 4413 	mls	r4, r0, r3, r4
 8000a36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a3e:	45a4      	cmp	ip, r4
 8000a40:	d907      	bls.n	8000a52 <__udivmoddi4+0x1d2>
 8000a42:	193c      	adds	r4, r7, r4
 8000a44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a48:	d267      	bcs.n	8000b1a <__udivmoddi4+0x29a>
 8000a4a:	45a4      	cmp	ip, r4
 8000a4c:	d965      	bls.n	8000b1a <__udivmoddi4+0x29a>
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a56:	fba0 9302 	umull	r9, r3, r0, r2
 8000a5a:	eba4 040c 	sub.w	r4, r4, ip
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	46ce      	mov	lr, r9
 8000a62:	469c      	mov	ip, r3
 8000a64:	d351      	bcc.n	8000b0a <__udivmoddi4+0x28a>
 8000a66:	d04e      	beq.n	8000b06 <__udivmoddi4+0x286>
 8000a68:	b155      	cbz	r5, 8000a80 <__udivmoddi4+0x200>
 8000a6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a72:	fa04 f606 	lsl.w	r6, r4, r6
 8000a76:	40cb      	lsrs	r3, r1
 8000a78:	431e      	orrs	r6, r3
 8000a7a:	40cc      	lsrs	r4, r1
 8000a7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a80:	2100      	movs	r1, #0
 8000a82:	e750      	b.n	8000926 <__udivmoddi4+0xa6>
 8000a84:	f1c2 0320 	rsb	r3, r2, #32
 8000a88:	fa20 f103 	lsr.w	r1, r0, r3
 8000a8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a90:	fa24 f303 	lsr.w	r3, r4, r3
 8000a94:	4094      	lsls	r4, r2
 8000a96:	430c      	orrs	r4, r1
 8000a98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa0:	fa1f f78c 	uxth.w	r7, ip
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3110 	mls	r1, r8, r0, r3
 8000aac:	0c23      	lsrs	r3, r4, #16
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f107 	mul.w	r1, r0, r7
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x24c>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ac2:	d22c      	bcs.n	8000b1e <__udivmoddi4+0x29e>
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d92a      	bls.n	8000b1e <__udivmoddi4+0x29e>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ad4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000adc:	fb01 f307 	mul.w	r3, r1, r7
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x276>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aec:	d213      	bcs.n	8000b16 <__udivmoddi4+0x296>
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	d911      	bls.n	8000b16 <__udivmoddi4+0x296>
 8000af2:	3902      	subs	r1, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	1ae4      	subs	r4, r4, r3
 8000af8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000afc:	e739      	b.n	8000972 <__udivmoddi4+0xf2>
 8000afe:	4604      	mov	r4, r0
 8000b00:	e6f0      	b.n	80008e4 <__udivmoddi4+0x64>
 8000b02:	4608      	mov	r0, r1
 8000b04:	e706      	b.n	8000914 <__udivmoddi4+0x94>
 8000b06:	45c8      	cmp	r8, r9
 8000b08:	d2ae      	bcs.n	8000a68 <__udivmoddi4+0x1e8>
 8000b0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b12:	3801      	subs	r0, #1
 8000b14:	e7a8      	b.n	8000a68 <__udivmoddi4+0x1e8>
 8000b16:	4631      	mov	r1, r6
 8000b18:	e7ed      	b.n	8000af6 <__udivmoddi4+0x276>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e799      	b.n	8000a52 <__udivmoddi4+0x1d2>
 8000b1e:	4630      	mov	r0, r6
 8000b20:	e7d4      	b.n	8000acc <__udivmoddi4+0x24c>
 8000b22:	46d6      	mov	lr, sl
 8000b24:	e77f      	b.n	8000a26 <__udivmoddi4+0x1a6>
 8000b26:	4463      	add	r3, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e74d      	b.n	80009c8 <__udivmoddi4+0x148>
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	4623      	mov	r3, r4
 8000b30:	4608      	mov	r0, r1
 8000b32:	e70f      	b.n	8000954 <__udivmoddi4+0xd4>
 8000b34:	3e02      	subs	r6, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	e730      	b.n	800099c <__udivmoddi4+0x11c>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b40:	b500      	push	{lr}
 8000b42:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000b4a:	f042 0204 	orr.w	r2, r2, #4
 8000b4e:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000b52:	f002 0204 	and.w	r2, r2, #4
 8000b56:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000b58:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000b6a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	200f      	movs	r0, #15
 8000b72:	f006 fa3d 	bl	8006ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f006 fa4a 	bl	8007010 <HAL_NVIC_EnableIRQ>

}
 8000b7c:	b003      	add	sp, #12
 8000b7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b88:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	9403      	str	r4, [sp, #12]
 8000b8e:	9404      	str	r4, [sp, #16]
 8000b90:	9405      	str	r4, [sp, #20]
 8000b92:	9406      	str	r4, [sp, #24]
 8000b94:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b9c:	f042 0202 	orr.w	r2, r2, #2
 8000ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ba4:	f002 0202 	and.w	r2, r2, #2
 8000ba8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000baa:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bae:	f042 0204 	orr.w	r2, r2, #4
 8000bb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bb6:	f002 0204 	and.w	r2, r2, #4
 8000bba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000bbc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc0:	f042 0201 	orr.w	r2, r2, #1
 8000bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000bce:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8000bd0:	4e1a      	ldr	r6, [pc, #104]	@ (8000c3c <MX_GPIO_Init+0xb8>)
 8000bd2:	4622      	mov	r2, r4
 8000bd4:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f006 fdf7 	bl	80077cc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000bde:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000be2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2501      	movs	r5, #1
 8000be6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	2302      	movs	r3, #2
 8000bec:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	a903      	add	r1, sp, #12
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f006 fc9b 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000bf6:	f04f 0803 	mov.w	r8, #3
 8000bfa:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfe:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 8000c02:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c04:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	a903      	add	r1, sp, #12
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f006 fc8e 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8000c10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	a903      	add	r1, sp, #12
 8000c20:	4630      	mov	r0, r6
 8000c22:	f006 fc83 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8000c26:	2340      	movs	r3, #64	@ 0x40
 8000c28:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	a903      	add	r1, sp, #12
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MX_GPIO_Init+0xbc>)
 8000c32:	f006 fc7b 	bl	800752c <HAL_GPIO_Init>

}
 8000c36:	b008      	add	sp, #32
 8000c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800

08000c44 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c54:	f023 0218 	bic.w	r2, r3, #24
 8000c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f006 f91b 	bl	8006eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f807 	bl	8000c88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f7ff ff83 	bl	8000b84 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000c7e:	f005 ff82 	bl	8006b86 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000c82:	f005 ff86 	bl	8006b92 <MX_SubGHz_Phy_Process>
 8000c86:	e7fc      	b.n	8000c82 <main+0x14>

08000c88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09a      	sub	sp, #104	@ 0x68
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2248      	movs	r2, #72	@ 0x48
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00d f853 	bl	800dd42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cae:	f006 fd93 	bl	80077d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ffc6 	bl	8000c44 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <_Z18SystemClock_Configv+0xc0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <_Z18SystemClock_Configv+0xc0>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <_Z18SystemClock_Configv+0xc0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cd4:	2324      	movs	r3, #36	@ 0x24
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd8:	2381      	movs	r3, #129	@ 0x81
 8000cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ce4:	23b0      	movs	r3, #176	@ 0xb0
 8000ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 ff0b 	bl	8007b0c <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf14      	ite	ne
 8000cfc:	2301      	movne	r3, #1
 8000cfe:	2300      	moveq	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8000d06:	f000 f821 	bl	8000d4c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000d0a:	234f      	movs	r3, #79	@ 0x4f
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fa22 	bl	8008170 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf14      	ite	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	2300      	moveq	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000d3c:	f000 f806 	bl	8000d4c <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3768      	adds	r7, #104	@ 0x68
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58000400 	.word	0x58000400

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d58:	b500      	push	{lr}
 8000d5a:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000d5c:	222c      	movs	r2, #44	@ 0x2c
 8000d5e:	2100      	movs	r1, #0
 8000d60:	a801      	add	r0, sp, #4
 8000d62:	f00c ffee 	bl	800dd42 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d66:	4819      	ldr	r0, [pc, #100]	@ (8000dcc <MX_RTC_Init+0x74>)
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_RTC_Init+0x78>)
 8000d6a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000d6c:	231f      	movs	r3, #31
 8000d6e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d74:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d76:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d7e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d84:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d86:	f007 fd3f 	bl	8008808 <HAL_RTC_Init>
 8000d8a:	b9a8      	cbnz	r0, 8000db8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000d8c:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <MX_RTC_Init+0x74>)
 8000d8e:	f007 fe7f 	bl	8008a90 <HAL_RTCEx_SetSSRU_IT>
 8000d92:	b9a0      	cbnz	r0, 8000dbe <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000d94:	2200      	movs	r2, #0
 8000d96:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d98:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d9a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000d9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000da0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000da2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000da8:	a901      	add	r1, sp, #4
 8000daa:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <MX_RTC_Init+0x74>)
 8000dac:	f007 fd94 	bl	80088d8 <HAL_RTC_SetAlarm_IT>
 8000db0:	b940      	cbnz	r0, 8000dc4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000db2:	b00d      	add	sp, #52	@ 0x34
 8000db4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db8:	f7ff ffc8 	bl	8000d4c <Error_Handler>
 8000dbc:	e7e6      	b.n	8000d8c <MX_RTC_Init+0x34>
    Error_Handler();
 8000dbe:	f7ff ffc5 	bl	8000d4c <Error_Handler>
 8000dc2:	e7e7      	b.n	8000d94 <MX_RTC_Init+0x3c>
    Error_Handler();
 8000dc4:	f7ff ffc2 	bl	8000d4c <Error_Handler>
}
 8000dc8:	e7f3      	b.n	8000db2 <MX_RTC_Init+0x5a>
 8000dca:	bf00      	nop
 8000dcc:	2000008c 	.word	0x2000008c
 8000dd0:	40002800 	.word	0x40002800

08000dd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	b090      	sub	sp, #64	@ 0x40
 8000dd8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dda:	2238      	movs	r2, #56	@ 0x38
 8000ddc:	2100      	movs	r1, #0
 8000dde:	a802      	add	r0, sp, #8
 8000de0:	f00c ffaf 	bl	800dd42 <memset>
  if(rtcHandle->Instance==RTC)
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <HAL_RTC_MspInit+0x7c>)
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d001      	beq.n	8000df0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000dec:	b010      	add	sp, #64	@ 0x40
 8000dee:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfa:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	a802      	add	r0, sp, #8
 8000dfe:	f007 fb1b 	bl	8008438 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	bb08      	cbnz	r0, 8000e48 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e08:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000e0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	4611      	mov	r1, r2
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f006 f8e0 	bl	8006ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f006 f8ed 	bl	8007010 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	4611      	mov	r1, r2
 8000e3a:	202a      	movs	r0, #42	@ 0x2a
 8000e3c:	f006 f8d8 	bl	8006ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e40:	202a      	movs	r0, #42	@ 0x2a
 8000e42:	f006 f8e5 	bl	8007010 <HAL_NVIC_EnableIRQ>
}
 8000e46:	e7d1      	b.n	8000dec <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000e48:	f7ff ff80 	bl	8000d4c <Error_Handler>
 8000e4c:	e7da      	b.n	8000e04 <HAL_RTC_MspInit+0x30>
 8000e4e:	bf00      	nop
 8000e50:	40002800 	.word	0x40002800

08000e54 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000e54:	4770      	bx	lr

08000e56 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000e56:	4770      	bx	lr

08000e58 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000e5a:	f006 f83d 	bl	8006ed8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4b02      	ldr	r3, [pc, #8]	@ (8000e6c <PWR_EnterStopMode+0x14>)
 8000e62:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000e66:	f006 fd1b 	bl	80078a0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000e6a:	bd08      	pop	{r3, pc}
 8000e6c:	58000400 	.word	0x58000400

08000e70 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8000e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000e72:	f006 f838 	bl	8006ee6 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000e76:	bd08      	pop	{r3, pc}

08000e78 <PWR_ExitStopMode>:
{
 8000e78:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000e7a:	f006 f834 	bl	8006ee6 <HAL_ResumeTick>
  vcom_Resume();
 8000e7e:	f000 fbd3 	bl	8001628 <vcom_Resume>
}
 8000e82:	bd08      	pop	{r3, pc}

08000e84 <PWR_EnterSleepMode>:
{
 8000e84:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000e86:	f006 f827 	bl	8006ed8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f006 fcab 	bl	80077e8 <HAL_PWR_EnterSLEEPMode>
}
 8000e92:	bd08      	pop	{r3, pc}

08000e94 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	4770      	bx	lr

08000e96 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <NMI_Handler>

08000e98 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <HardFault_Handler>

08000e9a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <MemManage_Handler>

08000e9c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <BusFault_Handler>

08000e9e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <UsageFault_Handler>

08000ea0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	4770      	bx	lr

08000ea2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	4770      	bx	lr

08000ea6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	4770      	bx	lr

08000ea8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000eaa:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8000eac:	f007 fe1c 	bl	8008ae8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000eb0:	bd08      	pop	{r3, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000eba:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <DMA1_Channel5_IRQHandler+0xc>)
 8000ebc:	f006 faae 	bl	800741c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ec0:	bd08      	pop	{r3, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000e0 	.word	0x200000e0

08000ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eca:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <USART2_IRQHandler+0xc>)
 8000ecc:	f008 fbf2 	bl	80096b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed0:	bd08      	pop	{r3, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000140 	.word	0x20000140

08000ed8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000eda:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <RTC_Alarm_IRQHandler+0xc>)
 8000edc:	f007 fc0e 	bl	80086fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ee0:	bd08      	pop	{r3, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c

08000ee8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000eea:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <SUBGHZ_Radio_IRQHandler+0xc>)
 8000eec:	f008 f8b4 	bl	8009058 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000c4 	.word	0x200000c4

08000ef8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000ef8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_SUBGHZ_Init+0x18>)
 8000efc:	2308      	movs	r3, #8
 8000efe:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f00:	f007 fe28 	bl	8008b54 <HAL_SUBGHZ_Init>
 8000f04:	b900      	cbnz	r0, 8000f08 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000f06:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f08:	f7ff ff20 	bl	8000d4c <Error_Handler>
}
 8000f0c:	e7fb      	b.n	8000f06 <MX_SUBGHZ_Init+0xe>
 8000f0e:	bf00      	nop
 8000f10:	200000c4 	.word	0x200000c4

08000f14 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000f14:	b500      	push	{lr}
 8000f16:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4611      	mov	r1, r2
 8000f32:	2032      	movs	r0, #50	@ 0x32
 8000f34:	f006 f85c 	bl	8006ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000f38:	2032      	movs	r0, #50	@ 0x32
 8000f3a:	f006 f869 	bl	8007010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	f85d fb04 	ldr.w	pc, [sp], #4

08000f44 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000f44:	b40c      	push	{r2, r3}
 8000f46:	b500      	push	{lr}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	ab04      	add	r3, sp, #16
 8000f4c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000f50:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000f52:	f00c fb2b 	bl	800d5ac <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000f56:	b003      	add	sp, #12
 8000f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f5c:	b002      	add	sp, #8
 8000f5e:	4770      	bx	lr

08000f60 <TimestampNow>:
{
 8000f60:	b530      	push	{r4, r5, lr}
 8000f62:	b085      	sub	sp, #20
 8000f64:	4604      	mov	r4, r0
 8000f66:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000f68:	a802      	add	r0, sp, #8
 8000f6a:	f00c f8f5 	bl	800d158 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000f6e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	9b02      	ldr	r3, [sp, #8]
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <TimestampNow+0x2c>)
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff ffe2 	bl	8000f44 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff f8fd 	bl	8000180 <strlen>
 8000f86:	8028      	strh	r0, [r5, #0]
}
 8000f88:	b005      	add	sp, #20
 8000f8a:	bd30      	pop	{r4, r5, pc}
 8000f8c:	0800ef70 	.word	0x0800ef70

08000f90 <SystemApp_Init>:
{
 8000f90:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f96:	6893      	ldr	r3, [r2, #8]
 8000f98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f9c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8000f9e:	f00c f8fd 	bl	800d19c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000fa2:	2401      	movs	r4, #1
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <SystemApp_Init+0x3c>)
 8000fa6:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8000fa8:	f000 f83c 	bl	8001024 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8000fac:	f00b fe50 	bl	800cc50 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000fb0:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <SystemApp_Init+0x40>)
 8000fb2:	f00b fe67 	bl	800cc84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f00b fe6a 	bl	800cc90 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8000fbc:	f00b ff78 	bl	800ceb0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f00b ff94 	bl	800cef0 <UTIL_LPM_SetOffMode>
}
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000d0 	.word	0x200000d0
 8000fd0:	08000f61 	.word	0x08000f61

08000fd4 <UTIL_SEQ_Idle>:
{
 8000fd4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8000fd6:	f00b ffa1 	bl	800cf1c <UTIL_LPM_EnterLowPower>
}
 8000fda:	bd08      	pop	{r3, pc}

08000fdc <UTIL_ADV_TRACE_PreSendHook>:
{
 8000fdc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f00b ff6f 	bl	800cec4 <UTIL_LPM_SetStopMode>
}
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000fe8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000fea:	2100      	movs	r1, #0
 8000fec:	2002      	movs	r0, #2
 8000fee:	f00b ff69 	bl	800cec4 <UTIL_LPM_SetStopMode>
}
 8000ff2:	bd08      	pop	{r3, pc}

08000ff4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ff8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <HAL_GetTick+0x14>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b90b      	cbnz	r3, 8001004 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001000:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001002:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001004:	f000 f8da 	bl	80011bc <TIMER_IF_GetTimerValue>
 8001008:	e7fb      	b.n	8001002 <HAL_GetTick+0xa>
 800100a:	bf00      	nop
 800100c:	200000d0 	.word	0x200000d0

08001010 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001010:	b500      	push	{lr}
 8001012:	b083      	sub	sp, #12
 8001014:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001016:	9801      	ldr	r0, [sp, #4]
 8001018:	f000 f9b6 	bl	8001388 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800101c:	b003      	add	sp, #12
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001024 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001028:	f005 ff64 	bl	8006ef4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800102c:	f005 ff6a 	bl	8006f04 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001030:	f005 ff70 	bl	8006f14 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001034:	2400      	movs	r4, #0
 8001036:	9403      	str	r4, [sp, #12]
 8001038:	9404      	str	r4, [sp, #16]
 800103a:	9405      	str	r4, [sp, #20]
 800103c:	9406      	str	r4, [sp, #24]
 800103e:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800104e:	f042 0202 	orr.w	r2, r2, #2
 8001052:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001054:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001056:	f002 0202 	and.w	r2, r2, #2
 800105a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800105c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800105e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001060:	f042 0202 	orr.w	r2, r2, #2
 8001064:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800106e:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001070:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8001074:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001076:	4d0c      	ldr	r5, [pc, #48]	@ (80010a8 <DBG_Init+0x84>)
 8001078:	a903      	add	r1, sp, #12
 800107a:	4628      	mov	r0, r5
 800107c:	f006 fa56 	bl	800752c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001080:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8001084:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001086:	a903      	add	r1, sp, #12
 8001088:	4628      	mov	r0, r5
 800108a:	f006 fa4f 	bl	800752c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800108e:	4622      	mov	r2, r4
 8001090:	4639      	mov	r1, r7
 8001092:	4628      	mov	r0, r5
 8001094:	f006 fb9a 	bl	80077cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001098:	4622      	mov	r2, r4
 800109a:	4631      	mov	r1, r6
 800109c:	4628      	mov	r0, r5
 800109e:	f006 fb95 	bl	80077cc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80010a2:	b009      	add	sp, #36	@ 0x24
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010ac:	2001      	movs	r0, #1
 80010ae:	4770      	bx	lr

080010b0 <_kill>:

int _kill(int pid, int sig)
{
 80010b0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010b2:	f00c fef5 	bl	800dea0 <__errno>
 80010b6:	2316      	movs	r3, #22
 80010b8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	bd08      	pop	{r3, pc}

080010c0 <_exit>:

void _exit (int status)
{
 80010c0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80010c2:	f04f 31ff 	mov.w	r1, #4294967295
 80010c6:	f7ff fff3 	bl	80010b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ca:	e7fe      	b.n	80010ca <_exit+0xa>

080010cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	460c      	mov	r4, r1
 80010d0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2500      	movs	r5, #0
 80010d4:	e006      	b.n	80010e4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4621      	mov	r1, r4
 80010dc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80010e2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	42b5      	cmp	r5, r6
 80010e6:	dbf6      	blt.n	80010d6 <_read+0xa>
  }

  return len;
}
 80010e8:	4630      	mov	r0, r6
 80010ea:	bd70      	pop	{r4, r5, r6, pc}

080010ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	460c      	mov	r4, r1
 80010f0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2500      	movs	r5, #0
 80010f4:	e004      	b.n	8001100 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80010f6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80010fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	3501      	adds	r5, #1
 8001100:	42b5      	cmp	r5, r6
 8001102:	dbf8      	blt.n	80010f6 <_write+0xa>
  }
  return len;
}
 8001104:	4630      	mov	r0, r6
 8001106:	bd70      	pop	{r4, r5, r6, pc}

08001108 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800110e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001112:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001114:	2000      	movs	r0, #0
 8001116:	4770      	bx	lr

08001118 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001118:	2001      	movs	r0, #1
 800111a:	4770      	bx	lr

0800111c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800111c:	2000      	movs	r0, #0
 800111e:	4770      	bx	lr

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b510      	push	{r4, lr}
 8001122:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a0c      	ldr	r2, [pc, #48]	@ (8001158 <_sbrk+0x38>)
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <_sbrk+0x40>)
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	b140      	cbz	r0, 8001140 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	480c      	ldr	r0, [pc, #48]	@ (8001160 <_sbrk+0x40>)
 8001130:	6800      	ldr	r0, [r0, #0]
 8001132:	4403      	add	r3, r0
 8001134:	1a52      	subs	r2, r2, r1
 8001136:	4293      	cmp	r3, r2
 8001138:	d806      	bhi.n	8001148 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <_sbrk+0x40>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800113e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <_sbrk+0x40>)
 8001142:	4c08      	ldr	r4, [pc, #32]	@ (8001164 <_sbrk+0x44>)
 8001144:	6004      	str	r4, [r0, #0]
 8001146:	e7f2      	b.n	800112e <_sbrk+0xe>
    errno = ENOMEM;
 8001148:	f00c feaa 	bl	800dea0 <__errno>
 800114c:	230c      	movs	r3, #12
 800114e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	e7f3      	b.n	800113e <_sbrk+0x1e>
 8001156:	bf00      	nop
 8001158:	20008000 	.word	0x20008000
 800115c:	00000800 	.word	0x00000800
 8001160:	200000d4 	.word	0x200000d4
 8001164:	20000af8 	.word	0x20000af8

08001168 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <TIMER_IF_SetTimerContext+0x1c>)
 800116a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800116c:	e001      	b.n	8001172 <TIMER_IF_SetTimerContext+0xa>
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <TIMER_IF_SetTimerContext+0x1c>)
 8001170:	6898      	ldr	r0, [r3, #8]
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <TIMER_IF_SetTimerContext+0x1c>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4283      	cmp	r3, r0
 8001178:	d1f9      	bne.n	800116e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800117a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <TIMER_IF_SetTimerContext+0x20>)
 800117e:	6018      	str	r0, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40002800 	.word	0x40002800
 8001188:	200000d8 	.word	0x200000d8

0800118c <TIMER_IF_GetTimerContext>:
}
 800118c:	4b01      	ldr	r3, [pc, #4]	@ (8001194 <TIMER_IF_GetTimerContext+0x8>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200000d8 	.word	0x200000d8

08001198 <TIMER_IF_GetTimerElapsedTime>:
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800119a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800119c:	e001      	b.n	80011a2 <TIMER_IF_GetTimerElapsedTime+0xa>
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80011a0:	6898      	ldr	r0, [r3, #8]
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4283      	cmp	r3, r0
 80011a8:	d1f9      	bne.n	800119e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80011aa:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80011ac:	4b02      	ldr	r3, [pc, #8]	@ (80011b8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	1ac0      	subs	r0, r0, r3
 80011b2:	4770      	bx	lr
 80011b4:	40002800 	.word	0x40002800
 80011b8:	200000d8 	.word	0x200000d8

080011bc <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <TIMER_IF_GetTimerValue+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b153      	cbz	r3, 80011d8 <TIMER_IF_GetTimerValue+0x1c>
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <TIMER_IF_GetTimerValue+0x24>)
 80011c4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80011c6:	e001      	b.n	80011cc <TIMER_IF_GetTimerValue+0x10>
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <TIMER_IF_GetTimerValue+0x24>)
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <TIMER_IF_GetTimerValue+0x24>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4283      	cmp	r3, r0
 80011d2:	d1f9      	bne.n	80011c8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80011d4:	43c0      	mvns	r0, r0
 80011d6:	4770      	bx	lr
  uint32_t ret = 0;
 80011d8:	2000      	movs	r0, #0
}
 80011da:	4770      	bx	lr
 80011dc:	200000dc 	.word	0x200000dc
 80011e0:	40002800 	.word	0x40002800

080011e4 <TIMER_IF_GetMinimumTimeout>:
}
 80011e4:	2003      	movs	r0, #3
 80011e6:	4770      	bx	lr

080011e8 <TIMER_IF_Convert_ms2Tick>:
{
 80011e8:	b508      	push	{r3, lr}
 80011ea:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80011ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f0:	2300      	movs	r3, #0
 80011f2:	0280      	lsls	r0, r0, #10
 80011f4:	0d89      	lsrs	r1, r1, #22
 80011f6:	f7ff fb2b 	bl	8000850 <__aeabi_uldivmod>
}
 80011fa:	bd08      	pop	{r3, pc}

080011fc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80011fc:	0ec2      	lsrs	r2, r0, #27
 80011fe:	0143      	lsls	r3, r0, #5
 8001200:	1a1b      	subs	r3, r3, r0
 8001202:	f162 0200 	sbc.w	r2, r2, #0
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	181b      	adds	r3, r3, r0
 8001210:	f142 0000 	adc.w	r0, r2, #0
 8001214:	00c0      	lsls	r0, r0, #3
 8001216:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800121a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 800121e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001222:	4770      	bx	lr

08001224 <TIMER_IF_StopTimer>:
{
 8001224:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <TIMER_IF_StopTimer+0x20>)
 8001228:	2201      	movs	r2, #1
 800122a:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800122c:	4c06      	ldr	r4, [pc, #24]	@ (8001248 <TIMER_IF_StopTimer+0x24>)
 800122e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001232:	4620      	mov	r0, r4
 8001234:	f007 fa22 	bl	800867c <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800123e:	2000      	movs	r0, #0
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	40002800 	.word	0x40002800
 8001248:	2000008c 	.word	0x2000008c

0800124c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800124c:	b508      	push	{r3, lr}
 800124e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001250:	2102      	movs	r1, #2
 8001252:	4802      	ldr	r0, [pc, #8]	@ (800125c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001254:	f007 fc5d 	bl	8008b12 <HAL_RTCEx_BKUPWrite>
}
 8001258:	bd08      	pop	{r3, pc}
 800125a:	bf00      	nop
 800125c:	2000008c 	.word	0x2000008c

08001260 <TIMER_IF_Init>:
{
 8001260:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <TIMER_IF_Init+0x40>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b10b      	cbz	r3, 800126c <TIMER_IF_Init+0xc>
}
 8001268:	2000      	movs	r0, #0
 800126a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800126c:	4c0d      	ldr	r4, [pc, #52]	@ (80012a4 <TIMER_IF_Init+0x44>)
 800126e:	f04f 35ff 	mov.w	r5, #4294967295
 8001272:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001274:	f7ff fd70 	bl	8000d58 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001278:	f7ff ffd4 	bl	8001224 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800127c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001280:	4620      	mov	r0, r4
 8001282:	f007 f9fb 	bl	800867c <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001286:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001288:	4620      	mov	r0, r4
 800128a:	f007 fbe1 	bl	8008a50 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff ffdc 	bl	800124c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001294:	f7ff ff68 	bl	8001168 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001298:	4b01      	ldr	r3, [pc, #4]	@ (80012a0 <TIMER_IF_Init+0x40>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e7e3      	b.n	8001268 <TIMER_IF_Init+0x8>
 80012a0:	200000dc 	.word	0x200000dc
 80012a4:	2000008c 	.word	0x2000008c

080012a8 <TIMER_IF_BkUp_Write_Seconds>:
{
 80012a8:	b508      	push	{r3, lr}
 80012aa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80012b0:	f007 fc2f 	bl	8008b12 <HAL_RTCEx_BKUPWrite>
}
 80012b4:	bd08      	pop	{r3, pc}
 80012b6:	bf00      	nop
 80012b8:	2000008c 	.word	0x2000008c

080012bc <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80012bc:	b508      	push	{r3, lr}
 80012be:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80012c0:	2101      	movs	r1, #1
 80012c2:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80012c4:	f007 fc25 	bl	8008b12 <HAL_RTCEx_BKUPWrite>
}
 80012c8:	bd08      	pop	{r3, pc}
 80012ca:	bf00      	nop
 80012cc:	2000008c 	.word	0x2000008c

080012d0 <TIMER_IF_StartTimer>:
{
 80012d0:	b510      	push	{r4, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80012d6:	222c      	movs	r2, #44	@ 0x2c
 80012d8:	2100      	movs	r1, #0
 80012da:	a801      	add	r0, sp, #4
 80012dc:	f00c fd31 	bl	800dd42 <memset>
  TIMER_IF_StopTimer();
 80012e0:	f7ff ffa0 	bl	8001224 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <TIMER_IF_StartTimer+0x48>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80012ea:	2300      	movs	r3, #0
 80012ec:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80012ee:	43e4      	mvns	r4, r4
 80012f0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012f2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80012f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012f8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001300:	2201      	movs	r2, #1
 8001302:	a901      	add	r1, sp, #4
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <TIMER_IF_StartTimer+0x4c>)
 8001306:	f007 fae7 	bl	80088d8 <HAL_RTC_SetAlarm_IT>
 800130a:	b910      	cbnz	r0, 8001312 <TIMER_IF_StartTimer+0x42>
}
 800130c:	2000      	movs	r0, #0
 800130e:	b00c      	add	sp, #48	@ 0x30
 8001310:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001312:	f7ff fd1b 	bl	8000d4c <Error_Handler>
 8001316:	e7f9      	b.n	800130c <TIMER_IF_StartTimer+0x3c>
 8001318:	200000d8 	.word	0x200000d8
 800131c:	2000008c 	.word	0x2000008c

08001320 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001320:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001322:	2102      	movs	r1, #2
 8001324:	4801      	ldr	r0, [pc, #4]	@ (800132c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001326:	f007 fbfb 	bl	8008b20 <HAL_RTCEx_BKUPRead>
}
 800132a:	bd08      	pop	{r3, pc}
 800132c:	2000008c 	.word	0x2000008c

08001330 <TIMER_IF_GetTime>:
{
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4605      	mov	r5, r0
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <TIMER_IF_GetTime+0x34>)
 8001336:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001338:	e001      	b.n	800133e <TIMER_IF_GetTime+0xe>
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <TIMER_IF_GetTime+0x34>)
 800133c:	689c      	ldr	r4, [r3, #8]
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <TIMER_IF_GetTime+0x34>)
 8001340:	6892      	ldr	r2, [r2, #8]
 8001342:	42a2      	cmp	r2, r4
 8001344:	d1f9      	bne.n	800133a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001346:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001348:	f7ff ffea 	bl	8001320 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800134c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800134e:	0aa4      	lsrs	r4, r4, #10
 8001350:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001354:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001358:	f7ff ff50 	bl	80011fc <TIMER_IF_Convert_Tick2ms>
 800135c:	8028      	strh	r0, [r5, #0]
}
 800135e:	4620      	mov	r0, r4
 8001360:	bd38      	pop	{r3, r4, r5, pc}
 8001362:	bf00      	nop
 8001364:	40002800 	.word	0x40002800

08001368 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001368:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800136a:	2100      	movs	r1, #0
 800136c:	4801      	ldr	r0, [pc, #4]	@ (8001374 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800136e:	f007 fbd7 	bl	8008b20 <HAL_RTCEx_BKUPRead>
}
 8001372:	bd08      	pop	{r3, pc}
 8001374:	2000008c 	.word	0x2000008c

08001378 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001378:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800137a:	2101      	movs	r1, #1
 800137c:	4801      	ldr	r0, [pc, #4]	@ (8001384 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800137e:	f007 fbcf 	bl	8008b20 <HAL_RTCEx_BKUPRead>
}
 8001382:	bd08      	pop	{r3, pc}
 8001384:	2000008c 	.word	0x2000008c

08001388 <TIMER_IF_DelayMs>:
{
 8001388:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800138a:	f7ff ff2d 	bl	80011e8 <TIMER_IF_Convert_ms2Tick>
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 8001390:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001392:	e001      	b.n	8001398 <TIMER_IF_DelayMs+0x10>
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 8001396:	6899      	ldr	r1, [r3, #8]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 800139a:	6892      	ldr	r2, [r2, #8]
 800139c:	428a      	cmp	r2, r1
 800139e:	d1f9      	bne.n	8001394 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80013a0:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80013a2:	e00a      	b.n	80013ba <TIMER_IF_DelayMs+0x32>
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 80013aa:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1f9      	bne.n	80013a4 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80013b0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	4283      	cmp	r3, r0
 80013b6:	d203      	bcs.n	80013c0 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80013b8:	bf00      	nop
 80013ba:	4b02      	ldr	r3, [pc, #8]	@ (80013c4 <TIMER_IF_DelayMs+0x3c>)
 80013bc:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80013be:	e7f3      	b.n	80013a8 <TIMER_IF_DelayMs+0x20>
}
 80013c0:	bd08      	pop	{r3, pc}
 80013c2:	bf00      	nop
 80013c4:	40002800 	.word	0x40002800

080013c8 <HAL_RTC_AlarmAEventCallback>:
{
 80013c8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80013ca:	f00c f80b 	bl	800d3e4 <UTIL_TIMER_IRQ_Handler>
}
 80013ce:	bd08      	pop	{r3, pc}

080013d0 <HAL_RTCEx_SSRUEventCallback>:
{
 80013d0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80013d2:	f7ff ffa5 	bl	8001320 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80013d6:	3001      	adds	r0, #1
 80013d8:	f7ff ff38 	bl	800124c <TIMER_IF_BkUp_Write_MSBticks>
}
 80013dc:	bd08      	pop	{r3, pc}
	...

080013e0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e2:	4817      	ldr	r0, [pc, #92]	@ (8001440 <MX_USART2_UART_Init+0x60>)
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_USART2_UART_Init+0x64>)
 80013e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80013e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80013ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	2300      	movs	r3, #0
 80013f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f6:	220c      	movs	r2, #12
 80013f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001402:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001404:	f009 f80e 	bl	800a424 <HAL_UART_Init>
 8001408:	b970      	cbnz	r0, 8001428 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <MX_USART2_UART_Init+0x60>)
 800140e:	f009 f9be 	bl	800a78e <HAL_UARTEx_SetTxFifoThreshold>
 8001412:	b960      	cbnz	r0, 800142e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	480a      	ldr	r0, [pc, #40]	@ (8001440 <MX_USART2_UART_Init+0x60>)
 8001418:	f009 f9de 	bl	800a7d8 <HAL_UARTEx_SetRxFifoThreshold>
 800141c:	b950      	cbnz	r0, 8001434 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800141e:	4808      	ldr	r0, [pc, #32]	@ (8001440 <MX_USART2_UART_Init+0x60>)
 8001420:	f009 f991 	bl	800a746 <HAL_UARTEx_EnableFifoMode>
 8001424:	b948      	cbnz	r0, 800143a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001426:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001428:	f7ff fc90 	bl	8000d4c <Error_Handler>
 800142c:	e7ed      	b.n	800140a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800142e:	f7ff fc8d 	bl	8000d4c <Error_Handler>
 8001432:	e7ef      	b.n	8001414 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001434:	f7ff fc8a 	bl	8000d4c <Error_Handler>
 8001438:	e7f1      	b.n	800141e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800143a:	f7ff fc87 	bl	8000d4c <Error_Handler>
}
 800143e:	e7f2      	b.n	8001426 <MX_USART2_UART_Init+0x46>
 8001440:	20000140 	.word	0x20000140
 8001444:	40004400 	.word	0x40004400

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b530      	push	{r4, r5, lr}
 800144a:	b097      	sub	sp, #92	@ 0x5c
 800144c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	2100      	movs	r1, #0
 8001450:	9111      	str	r1, [sp, #68]	@ 0x44
 8001452:	9112      	str	r1, [sp, #72]	@ 0x48
 8001454:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001456:	9114      	str	r1, [sp, #80]	@ 0x50
 8001458:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145a:	2238      	movs	r2, #56	@ 0x38
 800145c:	a803      	add	r0, sp, #12
 800145e:	f00c fc70 	bl	800dd42 <memset>
  if(uartHandle->Instance==USART2)
 8001462:	6822      	ldr	r2, [r4, #0]
 8001464:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <HAL_UART_MspInit+0xd4>)
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800146a:	b017      	add	sp, #92	@ 0x5c
 800146c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800146e:	2302      	movs	r3, #2
 8001470:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_UART_MspInit+0xd8>)
 8001474:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	a803      	add	r0, sp, #12
 8001478:	f006 ffde 	bl	8008438 <HAL_RCCEx_PeriphCLKConfig>
 800147c:	2800      	cmp	r0, #0
 800147e:	d144      	bne.n	800150a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001484:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001486:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800148a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800148c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800148e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001492:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001494:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001498:	f042 0201 	orr.w	r2, r2, #1
 800149c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80014a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80014a8:	230c      	movs	r3, #12
 80014aa:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2500      	movs	r5, #0
 80014b2:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	a911      	add	r1, sp, #68	@ 0x44
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f006 f833 	bl	800752c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80014c6:	4817      	ldr	r0, [pc, #92]	@ (8001524 <HAL_UART_MspInit+0xdc>)
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_UART_MspInit+0xe0>)
 80014ca:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80014cc:	2314      	movs	r3, #20
 80014ce:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d0:	2310      	movs	r3, #16
 80014d2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014da:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014dc:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014de:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014e2:	f005 fe0d 	bl	8007100 <HAL_DMA_Init>
 80014e6:	b998      	cbnz	r0, 8001510 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014e8:	2110      	movs	r1, #16
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <HAL_UART_MspInit+0xdc>)
 80014ec:	f006 f80a 	bl	8007504 <HAL_DMA_ConfigChannelAttributes>
 80014f0:	b988      	cbnz	r0, 8001516 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_UART_MspInit+0xdc>)
 80014f4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80014f6:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2102      	movs	r1, #2
 80014fc:	2025      	movs	r0, #37	@ 0x25
 80014fe:	f005 fd77 	bl	8006ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001502:	2025      	movs	r0, #37	@ 0x25
 8001504:	f005 fd84 	bl	8007010 <HAL_NVIC_EnableIRQ>
}
 8001508:	e7af      	b.n	800146a <HAL_UART_MspInit+0x22>
      Error_Handler();
 800150a:	f7ff fc1f 	bl	8000d4c <Error_Handler>
 800150e:	e7b7      	b.n	8001480 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001510:	f7ff fc1c 	bl	8000d4c <Error_Handler>
 8001514:	e7e8      	b.n	80014e8 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001516:	f7ff fc19 	bl	8000d4c <Error_Handler>
 800151a:	e7ea      	b.n	80014f2 <HAL_UART_MspInit+0xaa>
 800151c:	40004400 	.word	0x40004400
 8001520:	000c0004 	.word	0x000c0004
 8001524:	200000e0 	.word	0x200000e0
 8001528:	40020058 	.word	0x40020058

0800152c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 800152c:	6802      	ldr	r2, [r0, #0]
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <HAL_UART_MspDeInit+0x34>)
 8001530:	429a      	cmp	r2, r3
 8001532:	d000      	beq.n	8001536 <HAL_UART_MspDeInit+0xa>
 8001534:	4770      	bx	lr
{
 8001536:	b510      	push	{r4, lr}
 8001538:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800153e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001540:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001546:	210c      	movs	r1, #12
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f006 f8c0 	bl	80076d0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001550:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8001552:	f005 fe47 	bl	80071e4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001556:	2025      	movs	r0, #37	@ 0x25
 8001558:	f005 fd5e 	bl	8007018 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop
 8001560:	40004400 	.word	0x40004400

08001564 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <vcom_Init+0x20>)
 8001568:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800156a:	f7ff fae9 	bl	8000b40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800156e:	f7ff ff37 	bl	80013e0 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <vcom_Init+0x24>)
 8001574:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800157c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001580:	2000      	movs	r0, #0
 8001582:	bd08      	pop	{r3, pc}
 8001584:	200001d8 	.word	0x200001d8
 8001588:	58000800 	.word	0x58000800

0800158c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800158c:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001594:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800159a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800159c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <vcom_DeInit+0x28>)
 80015a4:	f7ff ffc2 	bl	800152c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80015a8:	200f      	movs	r0, #15
 80015aa:	f005 fd35 	bl	8007018 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd08      	pop	{r3, pc}
 80015b2:	bf00      	nop
 80015b4:	20000140 	.word	0x20000140

080015b8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80015b8:	b508      	push	{r3, lr}
 80015ba:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80015bc:	4601      	mov	r1, r0
 80015be:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <vcom_Trace_DMA+0x10>)
 80015c0:	f007 ffb4 	bl	800952c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80015c4:	2000      	movs	r0, #0
 80015c6:	bd08      	pop	{r3, pc}
 80015c8:	20000140 	.word	0x20000140

080015cc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80015cc:	b510      	push	{r4, lr}
 80015ce:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <vcom_ReceiveInit+0x50>)
 80015d2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80015d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015d8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80015da:	ab02      	add	r3, sp, #8
 80015dc:	e913 0006 	ldmdb	r3, {r1, r2}
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <vcom_ReceiveInit+0x54>)
 80015e2:	f009 f858 	bl	800a696 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <vcom_ReceiveInit+0x54>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80015f0:	d1f9      	bne.n	80015e6 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80015f8:	d0fb      	beq.n	80015f2 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001600:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001602:	4c07      	ldr	r4, [pc, #28]	@ (8001620 <vcom_ReceiveInit+0x54>)
 8001604:	4620      	mov	r0, r4
 8001606:	f009 f887 	bl	800a718 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	4905      	ldr	r1, [pc, #20]	@ (8001624 <vcom_ReceiveInit+0x58>)
 800160e:	4620      	mov	r0, r4
 8001610:	f008 ffda 	bl	800a5c8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001614:	2000      	movs	r0, #0
 8001616:	b002      	add	sp, #8
 8001618:	bd10      	pop	{r4, pc}
 800161a:	bf00      	nop
 800161c:	200001d4 	.word	0x200001d4
 8001620:	20000140 	.word	0x20000140
 8001624:	200001dc 	.word	0x200001dc

08001628 <vcom_Resume>:

void vcom_Resume(void)
{
 8001628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <vcom_Resume+0x20>)
 800162c:	f008 fefa 	bl	800a424 <HAL_UART_Init>
 8001630:	b920      	cbnz	r0, 800163c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <vcom_Resume+0x24>)
 8001634:	f005 fd64 	bl	8007100 <HAL_DMA_Init>
 8001638:	b918      	cbnz	r0, 8001642 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800163a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800163c:	f7ff fb86 	bl	8000d4c <Error_Handler>
 8001640:	e7f7      	b.n	8001632 <vcom_Resume+0xa>
    Error_Handler();
 8001642:	f7ff fb83 	bl	8000d4c <Error_Handler>
}
 8001646:	e7f8      	b.n	800163a <vcom_Resume+0x12>
 8001648:	20000140 	.word	0x20000140
 800164c:	200000e0 	.word	0x200000e0

08001650 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001652:	6802      	ldr	r2, [r0, #0]
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <HAL_UART_TxCpltCallback+0x18>)
 8001656:	429a      	cmp	r2, r3
 8001658:	d000      	beq.n	800165c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800165a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_UART_TxCpltCallback+0x1c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2000      	movs	r0, #0
 8001662:	4798      	blx	r3
}
 8001664:	e7f9      	b.n	800165a <HAL_UART_TxCpltCallback+0xa>
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	200001d8 	.word	0x200001d8

08001670 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001670:	6802      	ldr	r2, [r0, #0]
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_UART_RxCpltCallback+0x2c>)
 8001674:	429a      	cmp	r2, r3
 8001676:	d000      	beq.n	800167a <HAL_UART_RxCpltCallback+0xa>
 8001678:	4770      	bx	lr
{
 800167a:	b510      	push	{r4, lr}
 800167c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_UART_RxCpltCallback+0x30>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b12b      	cbz	r3, 8001690 <HAL_UART_RxCpltCallback+0x20>
 8001684:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8001688:	b912      	cbnz	r2, 8001690 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800168a:	2101      	movs	r1, #1
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <HAL_UART_RxCpltCallback+0x34>)
 800168e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	4904      	ldr	r1, [pc, #16]	@ (80016a4 <HAL_UART_RxCpltCallback+0x34>)
 8001694:	4620      	mov	r0, r4
 8001696:	f008 ff97 	bl	800a5c8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800169a:	bd10      	pop	{r4, pc}
 800169c:	40004400 	.word	0x40004400
 80016a0:	200001d4 	.word	0x200001d4
 80016a4:	200001dc 	.word	0x200001dc

080016a8 <_ZN11TimerObjectC1EmPFvvE>:

TimerObject::TimerObject(unsigned long int ms){
	Create(ms, NULL, false);
}

TimerObject::TimerObject(unsigned long int ms, CallBackType callback){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	Create(ms, callback, false);
 80016b4:	2300      	movs	r3, #0
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f805 	bl	80016ca <_ZN11TimerObject6CreateEmPFvvEb>
}
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_ZN11TimerObject6CreateEmPFvvEb>:

TimerObject::TimerObject(unsigned long int ms, CallBackType callback, bool isSingle){
	Create(ms, callback, isSingle);
}

void TimerObject::Create(unsigned long int ms, CallBackType callback, bool isSingle){
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	70fb      	strb	r3, [r7, #3]
	setInterval(ms);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f814 	bl	8001708 <_ZN11TimerObject11setIntervalEm>
	setEnabled(false);
 80016e0:	2100      	movs	r1, #0
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f81d 	bl	8001722 <_ZN11TimerObject10setEnabledEb>


	setSingleShot(isSingle);
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	4619      	mov	r1, r3
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f826 	bl	800173e <_ZN11TimerObject13setSingleShotEb>

	setOnTimer(callback);
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f830 	bl	800175a <_ZN11TimerObject10setOnTimerEPFvvE>
	LastTime = 0;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN11TimerObject11setIntervalEm>:

void TimerObject::setInterval(unsigned long int ms){
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	msInterval = (ms > 0) ? ms : 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <_ZN11TimerObject10setEnabledEb>:

void TimerObject::setEnabled(bool Enabled){
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	70fb      	strb	r3, [r7, #3]
	blEnabled = Enabled;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	711a      	strb	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <_ZN11TimerObject13setSingleShotEb>:

void TimerObject::setSingleShot(bool isSingle){
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
	blSingleShot = isSingle;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	715a      	strb	r2, [r3, #5]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_ZN11TimerObject10setOnTimerEPFvvE>:

void TimerObject::setOnTimer(CallBackType callback){
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	onRun = callback;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	609a      	str	r2, [r3, #8]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <_ZN11TimerObject4StopEv>:
void TimerObject::Resume(){
	LastTime = HAL_GetTick() - DiffTime;
	setEnabled(true);
}

void TimerObject::Stop(){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	setEnabled(false);
 800177c:	2100      	movs	r1, #0
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffcf 	bl	8001722 <_ZN11TimerObject10setEnabledEb>

}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	2301      	movs	r3, #1
 8001796:	461c      	mov	r4, r3
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff f81c 	bl	80007d8 <__aeabi_fcmpun>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <_ZSt5isnanf+0x1e>
 80017a6:	2300      	movs	r3, #0
 80017a8:	461c      	mov	r4, r3
 80017aa:	b2e3      	uxtb	r3, r4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}

080017be <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f00b ffd6 	bl	800d778 <roundf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_ZN7MacAddrC1Ev>:
public:
	int manufacturer;
	int id;

	MacAddr(int manufacturer_addr, int id_addr): manufacturer(manufacturer_addr), id(id_addr) {};
	MacAddr() : manufacturer(0), id(0) {};									//broadcast address
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <_ZN7MacAddrC1ERKS_>:
	MacAddr(const MacAddr &ma) : manufacturer(ma.manufacturer), id(ma.id) {};
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <_ZN5FrameC1E7MacAddr>:

	void data_encrypt();
	int serialize(uint8_t*& buffer);
	void parseFrameData(char *ch_str);

	Frame(MacAddr addr) : src(addr) { }
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffe3 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3308      	adds	r3, #8
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ffce 	bl	80017d6 <_ZN7MacAddrC1Ev>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	751a      	strb	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
 800185e:	2010      	movs	r0, #16
 8001860:	f00b ff7d 	bl	800d75e <_Znaj>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4618      	mov	r0, r3
 8001872:	f00b ff74 	bl	800d75e <_Znaj>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4618      	mov	r0, r3
 8001884:	f00b ff6b 	bl	800d75e <_Znaj>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	639a      	str	r2, [r3, #56]	@ 0x38
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <_ZN4FappC1Ev>:
};

class Fapp
{
public:
	Fapp() { }
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <_ZN4FappC1Ev+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	0800eff8 	.word	0x0800eff8

080018d4 <_ZN4FappD1Ev>:
	virtual ~Fapp() { }
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <_ZN4FappD1Ev+0x1c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	0800eff8 	.word	0x0800eff8

080018f4 <_ZN4FappD0Ev>:
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffe9 	bl	80018d4 <_ZN4FappD1Ev>
 8001902:	2104      	movs	r1, #4
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f00b ff15 	bl	800d734 <_ZdlPvj>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN3App20broadcast_successfulEi>:

	void set(float lat, float lon, float alt, float speed, float climb, float heading, float turnrate = NAN, float qneOffset = NAN);

	/* device -> air */
	bool is_broadcast_ready(int num_neighbors);
	void broadcast_successful(int type) { last_tx = HAL_GetTick(); }
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	f7ff fb6b 	bl	8000ff8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN3App12handle_ackedEbR7MacAddr>:

	/* air -> device */
	void handle_acked(bool ack, MacAddr &addr) { if(mySerialInt == NULL) return; mySerialInt->handle_acked(ack, addr); }
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	460b      	mov	r3, r1
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	72fb      	strb	r3, [r7, #11]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <_ZN3App12handle_ackedEbR7MacAddr+0x26>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	7af9      	ldrb	r1, [r7, #11]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fffa 	bl	8006948 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr>
 8001954:	e000      	b.n	8001958 <_ZN3App12handle_ackedEbR7MacAddr+0x28>
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_ZN3App12handle_frameEP5Frame>:
	void handle_frame(Frame *frm) {	if(mySerialInt == NULL)	return; mySerialInt->handle_frame(frm);	}
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <_ZN3App12handle_frameEP5Frame+0x20>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f005 f816 	bl	80069a8 <_ZN16Serial_Interface12handle_frameEP5Frame>
 800197c:	e000      	b.n	8001980 <_ZN3App12handle_frameEP5Frame+0x22>
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <_ZN3App17serializeTrackingERPh>:
#include "constrain.h"

#include "app.h"

int App::serializeTracking(uint8_t*& buffer)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b090      	sub	sp, #64	@ 0x40
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	buffer = new uint8_t[APP_TYPE1_SIZE];
 8001992:	200d      	movs	r0, #13
 8001994:	f00b fee3 	bl	800d75e <_Znaj>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	601a      	str	r2, [r3, #0]

	/* position */
	Frame::coord2payload_absolut(latitude, longitude, buffer);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6899      	ldr	r1, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	f004 fbeb 	bl	8006188 <_ZN5Frame21coord2payload_absolutEffPh>

	/* altitude set the lower 12bit */
	int alt = constrain(altitude, 0, 8190);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	330c      	adds	r3, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	f107 0108 	add.w	r1, r7, #8
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9f9 	bl	8001dc0 <_Z9constrainIiERKT_S2_S2_S2_>
 80019ce:	4603      	mov	r3, r0
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if(alt > 2047)
 80019d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019da:	db0f      	blt.n	80019fc <_ZN3App17serializeTrackingERPh+0x74>
		((uint16_t*)buffer)[3] = ((alt+2)/4) | (1<<11);				//set scale factor
 80019dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019de:	3302      	adds	r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da00      	bge.n	80019e6 <_ZN3App17serializeTrackingERPh+0x5e>
 80019e4:	3303      	adds	r3, #3
 80019e6:	109b      	asrs	r3, r3, #2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3306      	adds	r3, #6
 80019f6:	b292      	uxth	r2, r2
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	e005      	b.n	8001a08 <_ZN3App17serializeTrackingERPh+0x80>
	else
		((uint16_t*)buffer)[3] = alt;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3306      	adds	r3, #6
 8001a02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a04:	b292      	uxth	r2, r2
 8001a06:	801a      	strh	r2, [r3, #0]
	/* online tracking */
	((uint16_t*)buffer)[3] |= !!doOnlineTracking<<15;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a18:	03db      	lsls	r3, r3, #15
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3306      	adds	r3, #6
 8001a26:	b292      	uxth	r2, r2
 8001a28:	801a      	strh	r2, [r3, #0]
	/* aircraft type */
	((uint16_t*)buffer)[3] |= (aircraft&0x7)<<12;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3306      	adds	r3, #6
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001a3a:	031b      	lsls	r3, r3, #12
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	801a      	strh	r2, [r3, #0]

	/* Speed */
	int speed2 = constrain((int)std::round(speed*2.0f), 0, 635);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fbef 	bl	800023c <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff feac 	bl	80017be <_ZSt5roundf>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fecb 	bl	8000804 <__aeabi_f2iz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	f240 237b 	movw	r3, #635	@ 0x27b
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	f107 0218 	add.w	r2, r7, #24
 8001a80:	f107 0114 	add.w	r1, r7, #20
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f999 	bl	8001dc0 <_Z9constrainIiERKT_S2_S2_S2_>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(speed2 > 127)
 8001a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a98:	dd11      	ble.n	8001abe <_ZN3App17serializeTrackingERPh+0x136>
		buffer[8] = ((speed2+2)/5) | (1<<7);					//set scale factor
 8001a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	4a47      	ldr	r2, [pc, #284]	@ (8001bbc <_ZN3App17serializeTrackingERPh+0x234>)
 8001aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa4:	1052      	asrs	r2, r2, #1
 8001aa6:	17db      	asrs	r3, r3, #31
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ab0:	b25a      	sxtb	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e005      	b.n	8001aca <_ZN3App17serializeTrackingERPh+0x142>
	else
		buffer[8] = speed2;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

	/* Climb */
	int climb10 = constrain((int)std::round(climb*10.0f), -315, 315);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	493c      	ldr	r1, [pc, #240]	@ (8001bc0 <_ZN3App17serializeTrackingERPh+0x238>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fcbb 	bl	800044c <__aeabi_fmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fe70 	bl	80017be <_ZSt5roundf>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fe8f 	bl	8000804 <__aeabi_f2iz>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	f46f 739d 	mvn.w	r3, #314	@ 0x13a
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	f240 133b 	movw	r3, #315	@ 0x13b
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001afa:	f107 0120 	add.w	r1, r7, #32
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f95c 	bl	8001dc0 <_Z9constrainIiERKT_S2_S2_S2_>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
	if(std::abs(climb10) > 63)
 8001b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bfb8      	it	lt
 8001b14:	425b      	neglt	r3, r3
 8001b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b18:	dd18      	ble.n	8001b4c <_ZN3App17serializeTrackingERPh+0x1c4>
		buffer[9] = ((climb10 + (climb10>=0?2:-2))/5) | (1<<7);			//set scale factor
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db01      	blt.n	8001b24 <_ZN3App17serializeTrackingERPh+0x19c>
 8001b20:	2202      	movs	r2, #2
 8001b22:	e001      	b.n	8001b28 <_ZN3App17serializeTrackingERPh+0x1a0>
 8001b24:	f06f 0201 	mvn.w	r2, #1
 8001b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a23      	ldr	r2, [pc, #140]	@ (8001bbc <_ZN3App17serializeTrackingERPh+0x234>)
 8001b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b32:	1052      	asrs	r2, r2, #1
 8001b34:	17db      	asrs	r3, r3, #31
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3309      	adds	r3, #9
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e008      	b.n	8001b5e <_ZN3App17serializeTrackingERPh+0x1d6>
	else
		buffer[9] = climb10 & 0x7F;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3309      	adds	r3, #9
 8001b56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

	/* Heading */
	buffer[10] = constrain((int)std::round(heading*256.0f/360.0f), 0, 255);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc70 	bl	800044c <__aeabi_fmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4915      	ldr	r1, [pc, #84]	@ (8001bc4 <_ZN3App17serializeTrackingERPh+0x23c>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd1f 	bl	80005b4 <__aeabi_fdiv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe20 	bl	80017be <_ZSt5roundf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fe3f 	bl	8000804 <__aeabi_f2iz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b8e:	23ff      	movs	r3, #255	@ 0xff
 8001b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b92:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001b96:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f90e 	bl	8001dc0 <_Z9constrainIiERKT_S2_S2_S2_>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	330a      	adds	r3, #10
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
//	}
//	else
//	{
//		return APP_TYPE1_SIZE - 1;
//	}
}
 8001bb2:	bf00      	nop
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3740      	adds	r7, #64	@ 0x40
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	66666667 	.word	0x66666667
 8001bc0:	41200000 	.word	0x41200000
 8001bc4:	43b40000 	.word	0x43b40000

08001bc8 <_ZN3App23serializeGroundTrackingERPh>:

int App::serializeGroundTracking(uint8_t*& buffer)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	buffer = new uint8_t[APP_TYPE7_SIZE];
 8001bd2:	2007      	movs	r0, #7
 8001bd4:	f00b fdc3 	bl	800d75e <_Znaj>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	601a      	str	r2, [r3, #0]

	/* position */
	Frame::coord2payload_absolut(latitude, longitude, buffer);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6858      	ldr	r0, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f004 facb 	bl	8006188 <_ZN5Frame21coord2payload_absolutEffPh>

	/* state */
	buffer[6] = (state&0x0F)<<4 | (!!doOnlineTracking);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	b25a      	sxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3306      	adds	r3, #6
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]

	return APP_TYPE7_SIZE;
 8001c10:	2307      	movs	r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <_ZN3App18is_broadcast_readyEi>:

	//interrupts();
}

bool App::is_broadcast_ready(int num_neighbors)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	/* is the state valid? */
	if(HAL_GetTick() > valid_until || isnan(latitude) || isnan(longitude))
 8001c26:	f7ff f9e7 	bl	8000ff8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d80f      	bhi.n	8001c54 <_ZN3App18is_broadcast_readyEi+0x38>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fda7 	bl	800178c <_ZSt5isnanf>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <_ZN3App18is_broadcast_readyEi+0x38>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fd9f 	bl	800178c <_ZSt5isnanf>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <_ZN3App18is_broadcast_readyEi+0x3c>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <_ZN3App18is_broadcast_readyEi+0x3e>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <_ZN3App18is_broadcast_readyEi+0x46>
		return false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e02b      	b.n	8001cba <_ZN3App18is_broadcast_readyEi+0x9e>

	/* in case of a busy channel, ensure that frames from the fifo get also a change */
	if(next_tx > HAL_GetTick())
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001c66:	f7ff f9c7 	bl	8000ff8 <HAL_GetTick>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	429c      	cmp	r4, r3
 8001c6e:	bf8c      	ite	hi
 8001c70:	2301      	movhi	r3, #1
 8001c72:	2300      	movls	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZN3App18is_broadcast_readyEi+0x62>
		return false;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e01d      	b.n	8001cba <_ZN3App18is_broadcast_readyEi+0x9e>

	/* determine if its time to send something (again) */
	const int tau_add = (num_neighbors/10 + 1) * APP_TYPE1OR7_TAU_MS;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <_ZN3App18is_broadcast_readyEi+0xa8>)
 8001c82:	fb82 1203 	smull	r1, r2, r2, r3
 8001c86:	1092      	asrs	r2, r2, #2
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
	if(last_tx + tau_add > HAL_GetTick())
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	18d4      	adds	r4, r2, r3
 8001ca0:	f7ff f9aa 	bl	8000ff8 <HAL_GetTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	429c      	cmp	r4, r3
 8001ca8:	bf8c      	ite	hi
 8001caa:	2301      	movhi	r3, #1
 8001cac:	2300      	movls	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <_ZN3App18is_broadcast_readyEi+0x9c>
		return false;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <_ZN3App18is_broadcast_readyEi+0x9e>

	return true;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	66666667 	.word	0x66666667

08001cc8 <_ZN3App9get_frameEv>:

Frame *App::get_frame()
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	/* prepare frame */
	Frame *frm = new Frame(fmac.myAddr);
 8001cd0:	2044      	movs	r0, #68	@ 0x44
 8001cd2:	f00b fd33 	bl	800d73c <_Znwj>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <_ZN3App9get_frameEv+0x88>)
 8001cdc:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd85 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff fd92 	bl	800181c <_ZN5FrameC1E7MacAddr>
 8001cf8:	617c      	str	r4, [r7, #20]
	}
	else
	{
#endif
		/* broadcast tracking information */
		if(onGround == false)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <_ZN3App9get_frameEv+0x56>
		{
			frm->type = FRM_TYPE_TRACKING;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2201      	movs	r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
			frm->payload_length = serializeTracking(frm->payload);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe39 	bl	8001988 <_ZN3App17serializeTrackingERPh>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	61da      	str	r2, [r3, #28]
 8001d1c:	e00b      	b.n	8001d36 <_ZN3App9get_frameEv+0x6e>
		}
		else
		{
			frm->type = FRM_TYPE_GROUNDTRACKING;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2207      	movs	r2, #7
 8001d22:	611a      	str	r2, [r3, #16]
			frm->payload_length = serializeGroundTracking(frm->payload);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3320      	adds	r3, #32
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff4c 	bl	8001bc8 <_ZN3App23serializeGroundTrackingERPh>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	61da      	str	r2, [r3, #28]
	}
	framecount++;
#endif

	/* in case of a busy channel, ensure that frames from the fifo gets also a change */
	next_tx = HAL_GetTick() + APP_TYPE1OR7_MINTAU_MS;
 8001d36:	f7ff f95f 	bl	8000ff8 <HAL_GetTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f103 02fa 	add.w	r2, r3, #250	@ 0xfa
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30

	return frm;
 8001d44:	697b      	ldr	r3, [r7, #20]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000021c 	.word	0x2000021c

08001d54 <_ZN3AppC1Ev>:
class App : public Fapp
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fda8 	bl	80018b4 <_ZN4FappC1Ev>
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_ZN3AppC1Ev+0x64>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <_ZN3AppC1Ev+0x68>)
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <_ZN3AppC1Ev+0x68>)
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	871a      	strh	r2, [r3, #56]	@ 0x38
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800efd4 	.word	0x0800efd4
 8001dbc:	7fc00000 	.word	0x7fc00000

08001dc0 <_Z9constrainIiERKT_S2_S2_S2_>:
#ifndef CONSTRAIN_H_
#define CONSTRAIN_H_


template<class T>
const T& constrain(const T& x, const T& lo, const T& hi)
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
{
	if(x < lo)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	da01      	bge.n	8001ddc <_Z9constrainIiERKT_S2_S2_S2_+0x1c>
		return lo;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	e008      	b.n	8001dee <_Z9constrainIiERKT_S2_S2_S2_+0x2e>
	else if(hi < x)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	da01      	bge.n	8001dec <_Z9constrainIiERKT_S2_S2_S2_+0x2c>
		return hi;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	e000      	b.n	8001dee <_Z9constrainIiERKT_S2_S2_S2_+0x2e>
	else
		return x;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <_ZN3AppD1Ev>:
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <_ZN3AppD1Ev+0x20>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fd63 	bl	80018d4 <_ZN4FappD1Ev>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	0800efd4 	.word	0x0800efd4

08001e1c <_ZN3AppD0Ev>:
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_ZN3AppD1Ev>
 8001e2a:	213c      	movs	r1, #60	@ 0x3c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f00b fc81 	bl	800d734 <_ZdlPvj>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_Z41__static_initialization_and_destruction_0ii>:


App app = App();
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10e      	bne.n	8001e6a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d109      	bne.n	8001e6a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001e56:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	233c      	movs	r3, #60	@ 0x3c
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f00b ff6f 	bl	800dd42 <memset>
 8001e64:	4808      	ldr	r0, [pc, #32]	@ (8001e88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001e66:	f7ff ff75 	bl	8001d54 <_ZN3AppC1Ev>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d102      	bne.n	8001e80 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001e7a:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001e7c:	f7ff ffbc 	bl	8001df8 <_ZN3AppD1Ev>
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200001e0 	.word	0x200001e0

08001e8c <_GLOBAL__sub_I__ZN3App17serializeTrackingERPh>:
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff ffd1 	bl	8001e3c <_Z41__static_initialization_and_destruction_0ii>
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_GLOBAL__sub_D__ZN3App17serializeTrackingERPh>:
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff ffc9 	bl	8001e3c <_Z41__static_initialization_and_destruction_0ii>
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZN11TimerObjectD1Ev>:

public:
	TimerObject(unsigned long int ms);
	TimerObject(unsigned long int ms, CallBackType callback);
	TimerObject(unsigned long int ms, CallBackType callback, bool isSingle);
	~TimerObject(){Stop();};
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fc5d 	bl	8001774 <_ZN11TimerObject4StopEv>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZNK7MacAddreqERKS_>:

	inline bool operator == (const MacAddr& rhs) const { return ((id == rhs.id) && (manufacturer == rhs.manufacturer));};
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d107      	bne.n	8001eea <_ZNK7MacAddreqERKS_+0x26>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d101      	bne.n	8001eea <_ZNK7MacAddreqERKS_+0x26>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <_ZNK7MacAddreqERKS_+0x28>
 8001eea:	2300      	movs	r3, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <_ZNK7MacAddrneERKS_>:
	inline bool operator != (const MacAddr& rhs) const { return ((id != rhs.id) || (manufacturer != rhs.manufacturer));};
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d105      	bne.n	8001f18 <_ZNK7MacAddrneERKS_+0x22>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <_ZNK7MacAddrneERKS_+0x26>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <_ZNK7MacAddrneERKS_+0x28>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_ZN5FrameD1Ev>:
	Frame();
	Frame(int length, uint8_t *data);				// deserialize packet
	~Frame() { delete [] payload;
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <_ZN5FrameD1Ev+0x1a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00b fbfb 	bl	800d738 <_ZdaPv>
				delete[] en_payload;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <_ZN5FrameD1Ev+0x2c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00b fbf2 	bl	800d738 <_ZdaPv>
	}
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZN12NeighborNodeC1E7MacAddrb>:
	NeighborNode(MacAddr addr, bool tracking = false) : addr(addr), hasTracking(tracking) { last_seen = HAL_GetTick(); }
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fc3f 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	731a      	strb	r2, [r3, #12]
 8001f7e:	f7ff f83b 	bl	8000ff8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_ZN12NeighborNode4seenEv>:
	void seen(void) { last_seen = HAL_GetTick(); }
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	f7ff f82d 	bl	8000ff8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN12NeighborNode8isAroundEv>:
	bool isAround(void) { return last_seen + NEIGHBOR_MAX_TIMEOUT_MS > HAL_GetTick(); }
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 3474 	add.w	r4, r3, #249856	@ 0x3d000
 8001fbc:	3490      	adds	r4, #144	@ 0x90
 8001fbe:	f7ff f81b 	bl	8000ff8 <HAL_GetTick>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	429c      	cmp	r4, r3
 8001fc6:	bf8c      	ite	hi
 8001fc8:	2301      	movhi	r3, #1
 8001fca:	2300      	movls	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}

08001fd6 <_ZN7MacFifo4sizeEv>:

	/* usable in async mode */
	bool remove_delete_acked_frame(MacAddr dest);
	bool remove_delete(Frame *frm);
	int add(Frame *frm);
	int size() { return fifo.size(); }
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fe79 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZN7MacFifoC1Ev>:
class MacFifo
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fe78 	bl	8002cf0 <_ZN10LinkedListIP5FrameEC1Ev>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_ZN7MacFifoD1Ev>:
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fe8d 	bl	8002d34 <_ZN10LinkedListIP5FrameED1Ev>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_ZN8FanetMacC1Ev>:
	bool isNeighbor(MacAddr addr);

public:
	bool doForward = true;

	FanetMac() : myTimer(MAC_SLOT_MS, stateWrapper), myAddr(_myAddr) { }
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <_ZN8FanetMacC1Ev+0x78>)
 8002030:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fb37 	bl	80016a8 <_ZN11TimerObjectC1EmPFvvE>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3314      	adds	r3, #20
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffd6 	bl	8001ff0 <_ZN7MacFifoC1Ev>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3330      	adds	r3, #48	@ 0x30
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ffd1 	bl	8001ff0 <_ZN7MacFifoC1Ev>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	334c      	adds	r3, #76	@ 0x4c
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fe9a 	bl	8002d8c <_ZN10LinkedListIP12NeighborNodeEC1Ev>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	669a      	str	r2, [r3, #104]	@ 0x68
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	336c      	adds	r3, #108	@ 0x6c
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fbb7 	bl	80017d6 <_ZN7MacAddrC1Ev>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	675a      	str	r2, [r3, #116]	@ 0x74
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2207      	movs	r2, #7
 8002072:	679a      	str	r2, [r3, #120]	@ 0x78
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08002479 	.word	0x08002479

080020a0 <_ZN8FanetMacD1Ev>:
	~FanetMac() { }
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	334c      	adds	r3, #76	@ 0x4c
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fe8f 	bl	8002dd0 <_ZN10LinkedListIP12NeighborNodeED1Ev>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3330      	adds	r3, #48	@ 0x30
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffa7 	bl	800200a <_ZN7MacFifoD1Ev>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3314      	adds	r3, #20
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ffa2 	bl	800200a <_ZN7MacFifoD1Ev>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff feef 	bl	8001eac <_ZN11TimerObjectD1Ev>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZN7MacFifo10get_nexttxEv>:


/* get next frame which can be sent out */
//previoustodo: this is potentially dangerous, as frm may be deleted in another place.
Frame* MacFifo::get_nexttx()
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e0:	f3ef 8310 	mrs	r3, PRIMASK
 80020e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80020e6:	68bb      	ldr	r3, [r7, #8]
	int next;
	uint32_t prim = __get_PRIMASK();
 80020e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ea:	b672      	cpsid	i
}
 80020ec:	bf00      	nop
	__disable_irq();
	for (next = 0; next < fifo.size(); next++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e013      	b.n	800211c <_ZN7MacFifo10get_nexttxEv+0x44>
		if (fifo.get(next)->next_tx < HAL_GetTick())
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fea0 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 80020fe:	4603      	mov	r3, r0
 8002100:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002102:	f7fe ff79 	bl	8000ff8 <HAL_GetTick>
 8002106:	4603      	mov	r3, r0
 8002108:	429c      	cmp	r4, r3
 800210a:	bf34      	ite	cc
 800210c:	2301      	movcc	r3, #1
 800210e:	2300      	movcs	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d110      	bne.n	8002138 <_ZN7MacFifo10get_nexttxEv+0x60>
	for (next = 0; next < fifo.size(); next++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fdda 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4293      	cmp	r3, r2
 800212a:	bfb4      	ite	lt
 800212c:	2301      	movlt	r3, #1
 800212e:	2300      	movge	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1de      	bne.n	80020f4 <_ZN7MacFifo10get_nexttxEv+0x1c>
 8002136:	e000      	b.n	800213a <_ZN7MacFifo10get_nexttxEv+0x62>
			break;
 8002138:	bf00      	nop
	Frame *frm;
	if (next == fifo.size())
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fdcb 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002142:	4602      	mov	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	4293      	cmp	r3, r2
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <_ZN7MacFifo10get_nexttxEv+0x82>
		frm = NULL;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e005      	b.n	8002166 <_ZN7MacFifo10get_nexttxEv+0x8e>
	else
		frm = fifo.get(next);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fe6d 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 8002164:	6138      	str	r0, [r7, #16]
	if (!prim)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <_ZN7MacFifo10get_nexttxEv+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 800216c:	b662      	cpsie	i
}
 800216e:	bf00      	nop
		__enable_irq();

	return frm;
 8002170:	693b      	ldr	r3, [r7, #16]
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}

0800217a <_ZN7MacFifo13frame_in_listEP5Frame>:

Frame* MacFifo::frame_in_list(Frame *frm)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002184:	f3ef 8310 	mrs	r3, PRIMASK
 8002188:	60bb      	str	r3, [r7, #8]
  return(result);
 800218a:	68bb      	ldr	r3, [r7, #8]
	uint32_t prim = __get_PRIMASK();
 800218c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800218e:	b672      	cpsid	i
}
 8002190:	bf00      	nop
	__disable_irq();

	for (int i = 0; i < fifo.size(); i++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e016      	b.n	80021c6 <_ZN7MacFifo13frame_in_listEP5Frame+0x4c>
	{
		Frame *frm_list = fifo.get(i);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6979      	ldr	r1, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fe4e 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 80021a2:	60f8      	str	r0, [r7, #12]
		if (*frm_list == *frm)
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f004 fb42 	bl	8006830 <_ZNK5FrameeqERKS_>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <_ZN7MacFifo13frame_in_listEP5Frame+0x46>
		{
			if (!prim)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <_ZN7MacFifo13frame_in_listEP5Frame+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b8:	b662      	cpsie	i
}
 80021ba:	bf00      	nop
				__enable_irq();
			return frm_list;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	e015      	b.n	80021ec <_ZN7MacFifo13frame_in_listEP5Frame+0x72>
	for (int i = 0; i < fifo.size(); i++)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fd85 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	bfb4      	ite	lt
 80021d6:	2301      	movlt	r3, #1
 80021d8:	2300      	movge	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1db      	bne.n	8002198 <_ZN7MacFifo13frame_in_listEP5Frame+0x1e>
		}
	}

	if (!prim)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <_ZN7MacFifo13frame_in_listEP5Frame+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 80021e6:	b662      	cpsie	i
}
 80021e8:	bf00      	nop
		__enable_irq();

	return NULL;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN7MacFifo5frontEv>:

Frame* MacFifo::front()
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002200:	60fb      	str	r3, [r7, #12]
  return(result);
 8002202:	68fb      	ldr	r3, [r7, #12]
	uint32_t prim = __get_PRIMASK();
 8002204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002206:	b672      	cpsid	i
}
 8002208:	bf00      	nop
	__disable_irq();
	Frame *frm = fifo.shift();
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fe2b 	bl	8002e68 <_ZN10LinkedListIP5FrameE5shiftEv>
 8002212:	6138      	str	r0, [r7, #16]
	if (!prim)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <_ZN7MacFifo5frontEv+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 800221a:	b662      	cpsie	i
}
 800221c:	bf00      	nop
		__enable_irq();

	return frm;
 800221e:	693b      	ldr	r3, [r7, #16]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZN7MacFifo3addEP5Frame>:

/* add frame to fifo */
int MacFifo::add(Frame *frm)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002232:	f3ef 8310 	mrs	r3, PRIMASK
 8002236:	60bb      	str	r3, [r7, #8]
  return(result);
 8002238:	68bb      	ldr	r3, [r7, #8]
	uint32_t prim = __get_PRIMASK();
 800223a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
	__disable_irq();

	/* buffer full */
	/* note: ACKs will always fit */
	if (fifo.size() >= MAC_FIFO_SIZE && frm->type != FRM_TYPE_ACK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd48 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002248:	4603      	mov	r3, r0
 800224a:	2b07      	cmp	r3, #7
 800224c:	dd05      	ble.n	800225a <_ZN7MacFifo3addEP5Frame+0x32>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <_ZN7MacFifo3addEP5Frame+0x32>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <_ZN7MacFifo3addEP5Frame+0x34>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <_ZN7MacFifo3addEP5Frame+0x48>
	{
		if (!prim)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <_ZN7MacFifo3addEP5Frame+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 8002266:	b662      	cpsie	i
}
 8002268:	bf00      	nop
			__enable_irq();
		return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e059      	b.n	8002324 <_ZN7MacFifo3addEP5Frame+0xfc>
	}

	/* only one ack_requested from us to a specific address at a time is allowed in the queue */
	//in order not to screw with the awaiting of ACK
	if (frm->ack_requested)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d040      	beq.n	80022fa <_ZN7MacFifo3addEP5Frame+0xd2>
	{
		for (int i = 0; i < fifo.size(); i++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e030      	b.n	80022e0 <_ZN7MacFifo3addEP5Frame+0xb8>
		{
			//note: this never succeeds for received packets -> tx condition only
			Frame *ffrm = fifo.get(i);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fddb 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 8002288:	60f8      	str	r0, [r7, #12]
			if (ffrm->ack_requested && ffrm->src == fmac.myAddr && ffrm->dest == frm->dest)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d018      	beq.n	80022c4 <_ZN7MacFifo3addEP5Frame+0x9c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a25      	ldr	r2, [pc, #148]	@ (800232c <_ZN7MacFifo3addEP5Frame+0x104>)
 8002296:	f8d2 2184 	ldr.w	r2, [r2, #388]	@ 0x184
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe11 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <_ZN7MacFifo3addEP5Frame+0x9c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f103 0208 	add.w	r2, r3, #8
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3308      	adds	r3, #8
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7ff fe05 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <_ZN7MacFifo3addEP5Frame+0x9c>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <_ZN7MacFifo3addEP5Frame+0x9e>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <_ZN7MacFifo3addEP5Frame+0xb2>
			{
				if (!prim)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <_ZN7MacFifo3addEP5Frame+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 80022d0:	b662      	cpsie	i
}
 80022d2:	bf00      	nop
					__enable_irq();
				return -2;
 80022d4:	f06f 0301 	mvn.w	r3, #1
 80022d8:	e024      	b.n	8002324 <_ZN7MacFifo3addEP5Frame+0xfc>
		for (int i = 0; i < fifo.size(); i++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fcf8 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 80022e8:	4602      	mov	r2, r0
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bfb4      	ite	lt
 80022f0:	2301      	movlt	r3, #1
 80022f2:	2300      	movge	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1c1      	bne.n	800227e <_ZN7MacFifo3addEP5Frame+0x56>
			}
		}
	}

	if (frm->type == FRM_TYPE_ACK)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <_ZN7MacFifo3addEP5Frame+0xe6>
		/* add to front */
		fifo.unshift(frm);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fde5 	bl	8002ed6 <_ZN10LinkedListIP5FrameE7unshiftES1_>
 800230c:	e004      	b.n	8002318 <_ZN7MacFifo3addEP5Frame+0xf0>
	else
		/* add to tail */
		fifo.add(frm);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fe11 	bl	8002f3a <_ZN10LinkedListIP5FrameE3addES1_>

	if (!prim)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <_ZN7MacFifo3addEP5Frame+0xfa>
  __ASM volatile ("cpsie i" : : : "memory");
 800231e:	b662      	cpsie	i
}
 8002320:	bf00      	nop
		__enable_irq();
	return 0;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000021c 	.word	0x2000021c

08002330 <_ZN7MacFifo13remove_deleteEP5Frame>:

/* remove frame from linked list and delete it */
bool MacFifo::remove_delete(Frame *frm)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
	bool found = false;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	60bb      	str	r3, [r7, #8]
  return(result);
 8002344:	68bb      	ldr	r3, [r7, #8]

	uint32_t prim = __get_PRIMASK();
 8002346:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
	__disable_irq();
	for (int i = 0; i < fifo.size() && !found; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e021      	b.n	8002396 <_ZN7MacFifo13remove_deleteEP5Frame+0x66>
		if (frm == fifo.get(i))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd71 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 800235c:	4602      	mov	r2, r0
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4293      	cmp	r3, r2
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <_ZN7MacFifo13remove_deleteEP5Frame+0x60>
		{
			delete fifo.remove(i);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fe14 	bl	8002fa0 <_ZN10LinkedListIP5FrameE6removeEi>
 8002378:	4604      	mov	r4, r0
 800237a:	2c00      	cmp	r4, #0
 800237c:	d006      	beq.n	800238c <_ZN7MacFifo13remove_deleteEP5Frame+0x5c>
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff fdd2 	bl	8001f28 <_ZN5FrameD1Ev>
 8002384:	2144      	movs	r1, #68	@ 0x44
 8002386:	4620      	mov	r0, r4
 8002388:	f00b f9d4 	bl	800d734 <_ZdlPvj>
			found = true;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < fifo.size() && !found; i++)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	3301      	adds	r3, #1
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fc9d 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	da07      	bge.n	80023b6 <_ZN7MacFifo13remove_deleteEP5Frame+0x86>
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	f083 0301 	eor.w	r3, r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <_ZN7MacFifo13remove_deleteEP5Frame+0x86>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <_ZN7MacFifo13remove_deleteEP5Frame+0x88>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ca      	bne.n	8002352 <_ZN7MacFifo13remove_deleteEP5Frame+0x22>
		}
	if (!prim)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <_ZN7MacFifo13remove_deleteEP5Frame+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 80023c2:	b662      	cpsie	i
}
 80023c4:	bf00      	nop
		__enable_irq();

	return found;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}

080023d0 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr>:

/* remove any pending frame that waits on an ACK from a host */
bool MacFifo::remove_delete_acked_frame(MacAddr dest)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	bool found = false;
 80023da:	2300      	movs	r3, #0
 80023dc:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023de:	f3ef 8310 	mrs	r3, PRIMASK
 80023e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80023e4:	68fb      	ldr	r3, [r7, #12]
	uint32_t prim = __get_PRIMASK();
 80023e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
	__disable_irq();

	for (int i = 0; i < fifo.size(); i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e02b      	b.n	800244a <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x7a>
	{
		Frame* frm = fifo.get(i);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69b9      	ldr	r1, [r7, #24]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fd21 	bl	8002e3e <_ZN10LinkedListIP5FrameE3getEi>
 80023fc:	6138      	str	r0, [r7, #16]
		if (frm->ack_requested && frm->dest == dest)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x4c>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	3308      	adds	r3, #8
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fd59 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x4c>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x4e>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x74>
		{
			delete fifo.remove(i);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69b9      	ldr	r1, [r7, #24]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fdba 	bl	8002fa0 <_ZN10LinkedListIP5FrameE6removeEi>
 800242c:	4604      	mov	r4, r0
 800242e:	2c00      	cmp	r4, #0
 8002430:	d006      	beq.n	8002440 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x70>
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fd78 	bl	8001f28 <_ZN5FrameD1Ev>
 8002438:	2144      	movs	r1, #68	@ 0x44
 800243a:	4620      	mov	r0, r4
 800243c:	f00b f97a 	bl	800d734 <_ZdlPvj>
			found = true;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < fifo.size(); i++)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	3301      	adds	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fc43 	bl	8002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4293      	cmp	r3, r2
 8002458:	bfb4      	ite	lt
 800245a:	2301      	movlt	r3, #1
 800245c:	2300      	movge	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1c6      	bne.n	80023f2 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x22>
		}
	}
	if (!prim)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x9e>
  __ASM volatile ("cpsie i" : : : "memory");
 800246a:	b662      	cpsie	i
}
 800246c:	bf00      	nop
		__enable_irq();
	return found;
 800246e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3724      	adds	r7, #36	@ 0x24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <_ZN8FanetMac12stateWrapperEv>:
	return true;
}

/* wrapper to fit callback into c++ */
void FanetMac::stateWrapper()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	fmac.handleRx();
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <_ZN8FanetMac12stateWrapperEv+0x14>)
 800247e:	f000 f884 	bl	800258a <_ZN8FanetMac8handleRxEv>
	fmac.handleTx();
 8002482:	4802      	ldr	r0, [pc, #8]	@ (800248c <_ZN8FanetMac12stateWrapperEv+0x14>)
 8002484:	f000 fa64 	bl	8002950 <_ZN8FanetMac8handleTxEv>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000021c 	.word	0x2000021c

08002490 <_ZN8FanetMac10isNeighborE7MacAddr>:

bool FanetMac::isNeighbor(MacAddr addr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < neighbors.size(); i++)
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e013      	b.n	80024c8 <_ZN8FanetMac10isNeighborE7MacAddr+0x38>
		if (neighbors.get(i)->addr == addr)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	334c      	adds	r3, #76	@ 0x4c
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fdc8 	bl	800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>
 80024ac:	4603      	mov	r3, r0
 80024ae:	3304      	adds	r3, #4
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fd06 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <_ZN8FanetMac10isNeighborE7MacAddr+0x32>
			return true;
 80024be:	2301      	movs	r3, #1
 80024c0:	e011      	b.n	80024e6 <_ZN8FanetMac10isNeighborE7MacAddr+0x56>
	for (int i = 0; i < neighbors.size(); i++)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	334c      	adds	r3, #76	@ 0x4c
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fcab 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bfb4      	ite	lt
 80024da:	2301      	movlt	r3, #1
 80024dc:	2300      	movge	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1dd      	bne.n	80024a0 <_ZN8FanetMac10isNeighborE7MacAddr+0x10>

	return false;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZN8FanetMac3ackEP5Frame>:

/*
 * Generates ACK frame
 */
void FanetMac::ack(Frame* frm)
{
 80024ee:	b590      	push	{r4, r7, lr}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
#if MAC_debug_mode > 0
	printf("### generating ACK\n");
#endif

	/* generate reply */
	Frame *ack = new Frame(myAddr);
 80024f8:	2044      	movs	r0, #68	@ 0x44
 80024fa:	f00b f91f 	bl	800d73c <_Znwj>
 80024fe:	4603      	mov	r3, r0
 8002500:	461c      	mov	r4, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f971 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4619      	mov	r1, r3
 800251a:	4620      	mov	r0, r4
 800251c:	f7ff f97e 	bl	800181c <_ZN5FrameC1E7MacAddr>
 8002520:	617c      	str	r4, [r7, #20]
	ack->type = FRM_TYPE_ACK;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
	ack->dest = frm->src;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	3308      	adds	r3, #8
 800252e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002532:	e883 0003 	stmia.w	r3, {r0, r1}

	/* only do a 2 hop ACK in case it was requested and we received it via a two hop link (= forward bit is not set anymore) */
	if (frm->ack_requested == FRM_ACK_TWOHOP && !frm->forward)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d109      	bne.n	8002552 <_ZN8FanetMac3ackEP5Frame+0x64>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7d1b      	ldrb	r3, [r3, #20]
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <_ZN8FanetMac3ackEP5Frame+0x64>
		ack->forward = true;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2201      	movs	r2, #1
 8002550:	751a      	strb	r2, [r3, #20]

	/* add to front of fifo */
	//note: this will not fail by define
	if (tx_fifo.add(ack) != 0)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3314      	adds	r3, #20
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe65 	bl	8002228 <_ZN7MacFifo3addEP5Frame>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <_ZN8FanetMac3ackEP5Frame+0x94>
		delete ack;
 800256e:	697c      	ldr	r4, [r7, #20]
 8002570:	2c00      	cmp	r4, #0
 8002572:	d006      	beq.n	8002582 <_ZN8FanetMac3ackEP5Frame+0x94>
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff fcd7 	bl	8001f28 <_ZN5FrameD1Ev>
 800257a:	2144      	movs	r1, #68	@ 0x44
 800257c:	4620      	mov	r0, r4
 800257e:	f00b f8d9 	bl	800d734 <_ZdlPvj>
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}

0800258a <_ZN8FanetMac8handleRxEv>:

/*
 * Processes stuff from rx_fifo
 */
void FanetMac::handleRx()
{
 800258a:	b5b0      	push	{r4, r5, r7, lr}
 800258c:	b092      	sub	sp, #72	@ 0x48
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
	/* nothing to do */
	if (rx_fifo.size() == 0)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3330      	adds	r3, #48	@ 0x30
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd1d 	bl	8001fd6 <_ZN7MacFifo4sizeEv>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d033      	beq.n	8002614 <_ZN8FanetMac8handleRxEv+0x8a>
	{
		/* clean neighbors list */
		for (int i = 0; i < neighbors.size(); i++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b0:	e021      	b.n	80025f6 <_ZN8FanetMac8handleRxEv+0x6c>
		{
			if (neighbors.get(i)->isAround() == false)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	334c      	adds	r3, #76	@ 0x4c
 80025b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fd3f 	bl	800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>
 80025be:	4603      	mov	r3, r0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fcf3 	bl	8001fac <_ZN12NeighborNode8isAroundEv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <_ZN8FanetMac8handleRxEv+0x66>
				delete neighbors.remove(i);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	334c      	adds	r3, #76	@ 0x4c
 80025da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fd42 	bl	8003066 <_ZN10LinkedListIP12NeighborNodeE6removeEi>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <_ZN8FanetMac8handleRxEv+0x66>
 80025e8:	2110      	movs	r1, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f00b f8a2 	bl	800d734 <_ZdlPvj>
		for (int i = 0; i < neighbors.size(); i++)
 80025f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f2:	3301      	adds	r3, #1
 80025f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	334c      	adds	r3, #76	@ 0x4c
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fc14 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002600:	4602      	mov	r2, r0
 8002602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002604:	4293      	cmp	r3, r2
 8002606:	bfb4      	ite	lt
 8002608:	2301      	movlt	r3, #1
 800260a:	2300      	movge	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1cf      	bne.n	80025b2 <_ZN8FanetMac8handleRxEv+0x28>
		}

		return;
 8002612:	e199      	b.n	8002948 <_ZN8FanetMac8handleRxEv+0x3be>
	}

	Frame *frm = rx_fifo.front();
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3330      	adds	r3, #48	@ 0x30
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fdeb 	bl	80021f4 <_ZN7MacFifo5frontEv>
 800261e:	63b8      	str	r0, [r7, #56]	@ 0x38
	if(frm == nullptr)
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 818f 	beq.w	8002946 <_ZN8FanetMac8handleRxEv+0x3bc>
		return;

	/* build up neighbors list */
	bool neighbor_known = false;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	for (int i = 0; i < neighbors.size(); i++)
 800262e:	2300      	movs	r3, #0
 8002630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002632:	e031      	b.n	8002698 <_ZN8FanetMac8handleRxEv+0x10e>
	{
		if (neighbors.get(i)->addr == frm->src)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	334c      	adds	r3, #76	@ 0x4c
 8002638:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fcfe 	bl	800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002640:	4603      	mov	r3, r0
 8002642:	3304      	adds	r3, #4
 8002644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fc3b 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01e      	beq.n	8002692 <_ZN8FanetMac8handleRxEv+0x108>
		{
			/* update presents */
			neighbors.get(i)->seen();
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	334c      	adds	r3, #76	@ 0x4c
 8002658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fcee 	bl	800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002660:	4603      	mov	r3, r0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fc95 	bl	8001f92 <_ZN12NeighborNode4seenEv>
			if(frm->type == FRM_TYPE_TRACKING || frm->type == FRM_TYPE_GROUNDTRACKING)
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d003      	beq.n	8002678 <_ZN8FanetMac8handleRxEv+0xee>
 8002670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b07      	cmp	r3, #7
 8002676:	d108      	bne.n	800268a <_ZN8FanetMac8handleRxEv+0x100>
				neighbors.get(i)->hasTracking = true;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	334c      	adds	r3, #76	@ 0x4c
 800267c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fcdc 	bl	800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002684:	4603      	mov	r3, r0
 8002686:	2201      	movs	r2, #1
 8002688:	731a      	strb	r2, [r3, #12]
			neighbor_known = true;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			break;
 8002690:	e010      	b.n	80026b4 <_ZN8FanetMac8handleRxEv+0x12a>
	for (int i = 0; i < neighbors.size(); i++)
 8002692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002694:	3301      	adds	r3, #1
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	334c      	adds	r3, #76	@ 0x4c
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fbc3 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a6:	4293      	cmp	r3, r2
 80026a8:	bfb4      	ite	lt
 80026aa:	2301      	movlt	r3, #1
 80026ac:	2300      	movge	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1bf      	bne.n	8002634 <_ZN8FanetMac8handleRxEv+0xaa>
		}
	}

	/* neighbor unknown until now, add to list */
	if (neighbor_known == false)
 80026b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d13c      	bne.n	8002736 <_ZN8FanetMac8handleRxEv+0x1ac>
	{
		/* too many neighbors, delete oldest member */
		if (neighbors.size() > MAC_NEIGHBOR_SIZE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	334c      	adds	r3, #76	@ 0x4c
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fbb1 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b40      	cmp	r3, #64	@ 0x40
 80026ca:	bfcc      	ite	gt
 80026cc:	2301      	movgt	r3, #1
 80026ce:	2300      	movle	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <_ZN8FanetMac8handleRxEv+0x164>
			delete neighbors.shift();
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	334c      	adds	r3, #76	@ 0x4c
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd11 	bl	8003102 <_ZN10LinkedListIP12NeighborNodeE5shiftEv>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <_ZN8FanetMac8handleRxEv+0x164>
 80026e6:	2110      	movs	r1, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00b f823 	bl	800d734 <_ZdlPvj>

		neighbors.add(new NeighborNode(frm->src, frm->type == FRM_TYPE_TRACKING || frm->type == FRM_TYPE_GROUNDTRACKING));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80026f4:	2010      	movs	r0, #16
 80026f6:	f00b f821 	bl	800d73c <_Znwj>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461d      	mov	r5, r3
 80026fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f875 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d003      	beq.n	800271c <_ZN8FanetMac8handleRxEv+0x192>
 8002714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d101      	bne.n	8002720 <_ZN8FanetMac8handleRxEv+0x196>
 800271c:	2201      	movs	r2, #1
 800271e:	e000      	b.n	8002722 <_ZN8FanetMac8handleRxEv+0x198>
 8002720:	2200      	movs	r2, #0
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4619      	mov	r1, r3
 8002728:	4628      	mov	r0, r5
 800272a:	f7ff fc18 	bl	8001f5e <_ZN12NeighborNodeC1E7MacAddrb>
 800272e:	4629      	mov	r1, r5
 8002730:	4620      	mov	r0, r4
 8002732:	f000 fd1d 	bl	8003170 <_ZN10LinkedListIP12NeighborNodeE3addES1_>
	}

	/* is the frame a forwarded one and is it still in the tx queue? */
	Frame *frm_list = tx_fifo.frame_in_list(frm);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3314      	adds	r3, #20
 800273a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fd1c 	bl	800217a <_ZN7MacFifo13frame_in_listEP5Frame>
 8002742:	6378      	str	r0, [r7, #52]	@ 0x34
	if (frm_list != NULL)
 8002744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01a      	beq.n	8002780 <_ZN8FanetMac8handleRxEv+0x1f6>
	{
		/* frame already in tx queue */

		if (frm->rssi > frm_list->rssi + MAC_FORWARD_MIN_DB_BOOST)
 800274a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	3314      	adds	r3, #20
 8002754:	429a      	cmp	r2, r3
 8002756:	dd06      	ble.n	8002766 <_ZN8FanetMac8handleRxEv+0x1dc>
			/* somebody broadcasted it already towards our direction */
#if MAC_debug_mode > 0
			printf("### rx frame better than org. dropping both.\n");
#endif
			/* received frame is at least 20dB better than the original -> no need to rebroadcast */
			tx_fifo.remove_delete(frm_list);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3314      	adds	r3, #20
 800275c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fde6 	bl	8002330 <_ZN7MacFifo13remove_deleteEP5Frame>
 8002764:	e0e4      	b.n	8002930 <_ZN8FanetMac8handleRxEv+0x3a6>
		{
#if MAC_debug_mode >= 2
			printf("### adjusting tx time");
#endif
			/* adjusting new departure time */
			frm_list->next_tx = HAL_GetTick() + random(MAC_FORWARD_DELAY_MIN, MAC_FORWARD_DELAY_MAX);
 8002766:	f7fe fc47 	bl	8000ff8 <HAL_GetTick>
 800276a:	4604      	mov	r4, r0
 800276c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002770:	2064      	movs	r0, #100	@ 0x64
 8002772:	f004 f8c0 	bl	80068f6 <_Z6randomii>
 8002776:	4603      	mov	r3, r0
 8002778:	18e2      	adds	r2, r4, r3
 800277a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800277e:	e0d7      	b.n	8002930 <_ZN8FanetMac8handleRxEv+0x3a6>
		}
	}
	else
	{
		if ((frm->dest == MacAddr() || frm->dest == myAddr) && frm->src != myAddr)
 8002780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002782:	f103 0408 	add.w	r4, r3, #8
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f823 	bl	80017d6 <_ZN7MacAddrC1Ev>
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff fb94 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <_ZN8FanetMac8handleRxEv+0x232>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7ff fb87 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <_ZN8FanetMac8handleRxEv+0x24c>
 80027bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7ff fb95 	bl	8001ef6 <_ZNK7MacAddrneERKS_>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <_ZN8FanetMac8handleRxEv+0x24c>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <_ZN8FanetMac8handleRxEv+0x24e>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d040      	beq.n	800285e <_ZN8FanetMac8handleRxEv+0x2d4>
		{
			/* a relevant frame */
			if (frm->type == FRM_TYPE_ACK)
 80027dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d126      	bne.n	8002832 <_ZN8FanetMac8handleRxEv+0x2a8>
			{
				if (tx_fifo.remove_delete_acked_frame(frm->src) && myApp != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0414 	add.w	r4, r3, #20
 80027ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe ffff 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff fde6 	bl	80023d0 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <_ZN8FanetMac8handleRxEv+0x28c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <_ZN8FanetMac8handleRxEv+0x28c>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <_ZN8FanetMac8handleRxEv+0x28e>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <_ZN8FanetMac8handleRxEv+0x2d4>
					myApp->handle_acked(true, frm->src);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800282c:	2101      	movs	r1, #1
 800282e:	4798      	blx	r3
 8002830:	e015      	b.n	800285e <_ZN8FanetMac8handleRxEv+0x2d4>
			}
			else
			{
				/* generate ACK */
				if (frm->ack_requested)
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <_ZN8FanetMac8handleRxEv+0x2b8>
					ack(frm);
 800283a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe56 	bl	80024ee <_ZN8FanetMac3ackEP5Frame>

				/* forward frame */
				if (myApp != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <_ZN8FanetMac8handleRxEv+0x2d4>
					myApp->handle_frame(frm);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3318      	adds	r3, #24
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800285a:	4610      	mov	r0, r2
 800285c:	4798      	blx	r3
			}
		}

		/* Forward frame */
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
				&& (frm->dest == MacAddr() || isNeighbor(frm->dest)) && sx1272_get_airlimit() < 0.5f)
 8002864:	2b00      	cmp	r3, #0
 8002866:	d040      	beq.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 8002868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286a:	7d1b      	ldrb	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d03c      	beq.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3314      	adds	r3, #20
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fbae 	bl	8001fd6 <_ZN7MacFifo4sizeEv>
 800287a:	4603      	mov	r3, r0
 800287c:	2b04      	cmp	r3, #4
 800287e:	dc34      	bgt.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f113 0f59 	cmn.w	r3, #89	@ 0x59
 8002888:	da2f      	bge.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
				&& (frm->dest == MacAddr() || isNeighbor(frm->dest)) && sx1272_get_airlimit() < 0.5f)
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	f103 0408 	add.w	r4, r3, #8
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe ff9e 	bl	80017d6 <_ZN7MacAddrC1Ev>
 800289a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff fb0f 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <_ZN8FanetMac8handleRxEv+0x346>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe ff9c 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 80028be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fde3 	bl	8002490 <_ZN8FanetMac10isNeighborE7MacAddr>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
 80028d0:	f004 f928 	bl	8006b24 <sx1272_get_airlimit>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd ff54 	bl	8000788 <__aeabi_fcmplt>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <_ZN8FanetMac8handleRxEv+0x360>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <_ZN8FanetMac8handleRxEv+0x362>
 80028ea:	2300      	movs	r3, #0
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <_ZN8FanetMac8handleRxEv+0x3a6>
		{
#if MAC_debug_mode >= 2
			printf("### adding new forward frame\n");
#endif
			/* prevent from re-forwarding */
			frm->forward = false;
 80028f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f2:	2200      	movs	r2, #0
 80028f4:	751a      	strb	r2, [r3, #20]

			/* generate new tx time */
			frm->next_tx = HAL_GetTick() + random(MAC_FORWARD_DELAY_MIN, MAC_FORWARD_DELAY_MAX);
 80028f6:	f7fe fb7f 	bl	8000ff8 <HAL_GetTick>
 80028fa:	4604      	mov	r4, r0
 80028fc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002900:	2064      	movs	r0, #100	@ 0x64
 8002902:	f003 fff8 	bl	80068f6 <_Z6randomii>
 8002906:	4603      	mov	r3, r0
 8002908:	18e2      	adds	r2, r4, r3
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c
			frm->num_tx = !!frm->ack_requested;
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38

			/* add to list */
			tx_fifo.add(frm);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3314      	adds	r3, #20
 8002926:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fc7d 	bl	8002228 <_ZN7MacFifo3addEP5Frame>
			return;
 800292e:	e00b      	b.n	8002948 <_ZN8FanetMac8handleRxEv+0x3be>
		}
	}

	/* discard frame */
	delete frm;
 8002930:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002932:	2c00      	cmp	r4, #0
 8002934:	d008      	beq.n	8002948 <_ZN8FanetMac8handleRxEv+0x3be>
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff faf6 	bl	8001f28 <_ZN5FrameD1Ev>
 800293c:	2144      	movs	r1, #68	@ 0x44
 800293e:	4620      	mov	r0, r4
 8002940:	f00a fef8 	bl	800d734 <_ZdlPvj>
 8002944:	e000      	b.n	8002948 <_ZN8FanetMac8handleRxEv+0x3be>
		return;
 8002946:	bf00      	nop
}
 8002948:	3748      	adds	r7, #72	@ 0x48
 800294a:	46bd      	mov	sp, r7
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002950 <_ZN8FanetMac8handleTxEv>:

/*
 * get a from from tx_fifo (or the app layer) and transmit it
 */
void FanetMac::handleTx()
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b08c      	sub	sp, #48	@ 0x30
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	/* still in backoff or chip turned off*/
	if (HAL_GetTick() < csma_next_tx  || !sx1272_isArmed())
 8002958:	f7fe fb4e 	bl	8000ff8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002962:	429a      	cmp	r2, r3
 8002964:	d307      	bcc.n	8002976 <_ZN8FanetMac8handleTxEv+0x26>
 8002966:	f004 f8e0 	bl	8006b2a <sx1272_isArmed>
 800296a:	4603      	mov	r3, r0
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <_ZN8FanetMac8handleTxEv+0x2a>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <_ZN8FanetMac8handleTxEv+0x2c>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 819e 	bne.w	8002cbe <_ZN8FanetMac8handleTxEv+0x36e>
		return;

	/* find next send-able packet */
	/* this breaks the layering. however, this approach is much more efficient as the app layer now has a much higher priority */
	Frame* frm;
	bool app_tx = false;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if (myApp->is_broadcast_ready(neighbors.size()))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3308      	adds	r3, #8
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	334c      	adds	r3, #76	@ 0x4c
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa44 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4628      	mov	r0, r5
 80029a6:	47a0      	blx	r4
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d025      	beq.n	80029fa <_ZN8FanetMac8handleTxEv+0xaa>
	{
		/* the app wants to broadcast the glider state */
		frm = myApp->get_frame();
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3310      	adds	r3, #16
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4610      	mov	r0, r2
 80029be:	4798      	blx	r3
 80029c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (frm == NULL)
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 817c 	beq.w	8002cc2 <_ZN8FanetMac8handleTxEv+0x372>
			return;

		if (neighbors.size() <= MAC_MAXNEIGHBORS_4_TRACKING_2HOP)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	334c      	adds	r3, #76	@ 0x4c
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa2a 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	bfd4      	ite	le
 80029da:	2301      	movle	r3, #1
 80029dc:	2300      	movgt	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <_ZN8FanetMac8handleTxEv+0x9c>
			frm->forward = true;
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	2201      	movs	r2, #1
 80029e8:	751a      	strb	r2, [r3, #20]
 80029ea:	e002      	b.n	80029f2 <_ZN8FanetMac8handleTxEv+0xa2>
		else
			frm->forward = false;
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	2200      	movs	r2, #0
 80029f0:	751a      	strb	r2, [r3, #20]

		app_tx = true;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029f8:	e07b      	b.n	8002af2 <_ZN8FanetMac8handleTxEv+0x1a2>
	}
	else if(sx1272_get_airlimit() < 0.9f)
 80029fa:	f004 f893 	bl	8006b24 <sx1272_get_airlimit>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2201      	movs	r2, #1
 8002a02:	4614      	mov	r4, r2
 8002a04:	49a5      	ldr	r1, [pc, #660]	@ (8002c9c <_ZN8FanetMac8handleTxEv+0x34c>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd febe 	bl	8000788 <__aeabi_fcmplt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <_ZN8FanetMac8handleTxEv+0xc6>
 8002a12:	2300      	movs	r3, #0
 8002a14:	461c      	mov	r4, r3
 8002a16:	b2e3      	uxtb	r3, r4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8154 	beq.w	8002cc6 <_ZN8FanetMac8handleTxEv+0x376>
			queue_length = current_qlen;
		}
#endif

		/* get a frame from the fifo */
		frm = tx_fifo.get_nexttx();
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3314      	adds	r3, #20
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb58 	bl	80020d8 <_ZN7MacFifo10get_nexttxEv>
 8002a28:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (frm == nullptr)
 8002a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 814c 	beq.w	8002cca <_ZN8FanetMac8handleTxEv+0x37a>
			return;

		/* frame w/o a received ack and no more re-transmissions left */
		if (frm->ack_requested && frm->num_tx <= 0)
 8002a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d029      	beq.n	8002a8e <_ZN8FanetMac8handleTxEv+0x13e>
 8002a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	dc25      	bgt.n	8002a8e <_ZN8FanetMac8handleTxEv+0x13e>
		{
#if MAC_debug_mode > 0
			printf("### Frame, 0x%02X NACK!\n", frm->type);
#endif
			if (myApp != nullptr && frm->src == myAddr)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <_ZN8FanetMac8handleTxEv+0x114>
 8002a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7ff fa35 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <_ZN8FanetMac8handleTxEv+0x114>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <_ZN8FanetMac8handleTxEv+0x116>
 8002a64:	2300      	movs	r3, #0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <_ZN8FanetMac8handleTxEv+0x130>
				myApp->handle_acked(false, frm->dest);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4798      	blx	r3
			tx_fifo.remove_delete(frm);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3314      	adds	r3, #20
 8002a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fc52 	bl	8002330 <_ZN7MacFifo13remove_deleteEP5Frame>
			return;
 8002a8c:	e120      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
		}

		/* unicast frame w/o forwarding and it is not a direct neighbor */
		if (frm->forward == false && frm->dest != MacAddr() && isNeighbor(frm->dest) == false)
 8002a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a90:	7d1b      	ldrb	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d124      	bne.n	8002ae0 <_ZN8FanetMac8handleTxEv+0x190>
 8002a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a98:	f103 0408 	add.w	r4, r3, #8
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fe98 	bl	80017d6 <_ZN7MacAddrC1Ev>
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7ff fa22 	bl	8001ef6 <_ZNK7MacAddrneERKS_>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <_ZN8FanetMac8handleTxEv+0x190>
 8002ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aba:	f103 0208 	add.w	r2, r3, #8
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fe96 	bl	80017f6 <_ZN7MacAddrC1ERKS_>
 8002aca:	f107 0318 	add.w	r3, r7, #24
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fcdd 	bl	8002490 <_ZN8FanetMac10isNeighborE7MacAddr>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <_ZN8FanetMac8handleTxEv+0x190>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <_ZN8FanetMac8handleTxEv+0x192>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <_ZN8FanetMac8handleTxEv+0x19c>
			frm->forward = true;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	751a      	strb	r2, [r3, #20]

		app_tx = false;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		return;
	}

	/* serialize frame */
	uint8_t* buffer;
	int blength = frm->serialize(buffer);
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002afa:	f003 fcef 	bl	80064dc <_ZN5Frame9serializeERPh>
 8002afe:	6278      	str	r0, [r7, #36]	@ 0x24
	if (blength < 0)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da16      	bge.n	8002b34 <_ZN8FanetMac8handleTxEv+0x1e4>
	{
#if MAC_debug_mode > 0
		printf("### Problem serialization type 0x%02X. removing.\n", frm->type);
#endif
		/* problem while assembling the frame */
		if (app_tx)
 8002b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <_ZN8FanetMac8handleTxEv+0x1d6>
			delete frm;
 8002b0e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002b10:	2c00      	cmp	r4, #0
 8002b12:	f000 80dc 	beq.w	8002cce <_ZN8FanetMac8handleTxEv+0x37e>
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff fa06 	bl	8001f28 <_ZN5FrameD1Ev>
 8002b1c:	2144      	movs	r1, #68	@ 0x44
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f00a fe08 	bl	800d734 <_ZdlPvj>
		else
			tx_fifo.remove_delete(frm);
		return;
 8002b24:	e0d3      	b.n	8002cce <_ZN8FanetMac8handleTxEv+0x37e>
			tx_fifo.remove_delete(frm);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fbff 	bl	8002330 <_ZN7MacFifo13remove_deleteEP5Frame>
		return;
 8002b32:	e0cc      	b.n	8002cce <_ZN8FanetMac8handleTxEv+0x37e>
	printf(" ");
#endif

	/* channel free and transmit? */
	//note: for only a few nodes around, increase the coding rate to ensure a more robust transmission
	int tx_ret = sx1272_sendFrame(buffer, blength, neighbors.size() < MAC_CODING48_THRESHOLD ? CR_8 : CR_5);
 8002b34:	68fc      	ldr	r4, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	334c      	adds	r3, #76	@ 0x4c
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f974 	bl	8002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	dc01      	bgt.n	8002b4a <_ZN8FanetMac8handleTxEv+0x1fa>
 8002b46:	2320      	movs	r3, #32
 8002b48:	e000      	b.n	8002b4c <_ZN8FanetMac8handleTxEv+0x1fc>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b50:	4620      	mov	r0, r4
 8002b52:	f003 ffec 	bl	8006b2e <sx1272_sendFrame>
 8002b56:	6238      	str	r0, [r7, #32]
	delete[] buffer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <_ZN8FanetMac8handleTxEv+0x216>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00a fde9 	bl	800d738 <_ZdaPv>

	if (tx_ret == TX_OK)
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d166      	bne.n	8002c3a <_ZN8FanetMac8handleTxEv+0x2ea>
	{
#if MAC_debug_mode > 0
		printf("done.\n");
#endif

		if (app_tx)
 8002b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <_ZN8FanetMac8handleTxEv+0x250>
		{
			/* app tx */
			myApp->broadcast_successful(frm->type);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b84:	6912      	ldr	r2, [r2, #16]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4798      	blx	r3
			delete frm;
 8002b8a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002b8c:	2c00      	cmp	r4, #0
 8002b8e:	d046      	beq.n	8002c1e <_ZN8FanetMac8handleTxEv+0x2ce>
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff f9c9 	bl	8001f28 <_ZN5FrameD1Ev>
 8002b96:	2144      	movs	r1, #68	@ 0x44
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f00a fdcb 	bl	800d734 <_ZdlPvj>
 8002b9e:	e03e      	b.n	8002c1e <_ZN8FanetMac8handleTxEv+0x2ce>
		else
		{
			/* fifo tx */

			/* transmission successful */
			if (!frm->ack_requested || frm->src != myAddr)
 8002ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <_ZN8FanetMac8handleTxEv+0x26e>
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff f99f 	bl	8001ef6 <_ZNK7MacAddrneERKS_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <_ZN8FanetMac8handleTxEv+0x272>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <_ZN8FanetMac8handleTxEv+0x274>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <_ZN8FanetMac8handleTxEv+0x286>
			{
				/* remove frame from FIFO */
				tx_fifo.remove_delete(frm);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fbae 	bl	8002330 <_ZN7MacFifo13remove_deleteEP5Frame>
 8002bd4:	e023      	b.n	8002c1e <_ZN8FanetMac8handleTxEv+0x2ce>
			}
			else
			{
				/* update next transmission */
				if (--frm->num_tx > 0)
 8002bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bfcc      	ite	gt
 8002be8:	2301      	movgt	r3, #1
 8002bea:	2300      	movle	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <_ZN8FanetMac8handleTxEv+0x2c0>
					frm->next_tx = HAL_GetTick() + (MAC_TX_RETRANSMISSION_TIME * (MAC_TX_RETRANSMISSION_RETRYS - frm->num_tx));
 8002bf2:	f7fe fa01 	bl	8000ff8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	f1c3 0303 	rsb	r3, r3, #3
 8002c00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	441a      	add	r2, r3
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c0e:	e006      	b.n	8002c1e <_ZN8FanetMac8handleTxEv+0x2ce>
				else
					frm->next_tx = HAL_GetTick() + MAC_TX_ACKTIMEOUT;
 8002c10:	f7fe f9f2 	bl	8000ff8 <HAL_GetTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
			}
		}

		/* ready for a new transmission in */
		csma_backoff_exp = MAC_TX_BACKOFF_EXP_MIN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2207      	movs	r2, #7
 8002c22:	679a      	str	r2, [r3, #120]	@ 0x78
		csma_next_tx = HAL_GetTick() + MAC_TX_MINPREAMBLEHEADERTIME_MS + (blength * MAC_TX_TIMEPERBYTE_MS);
 8002c24:	f7fe f9e8 	bl	8000ff8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	f103 020f 	add.w	r2, r3, #15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c38:	e04a      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
	}
	else if (tx_ret == TX_RX_ONGOING || tx_ret == TX_TX_ONGOING)
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f113 0f02 	cmn.w	r3, #2
 8002c40:	d003      	beq.n	8002c4a <_ZN8FanetMac8handleTxEv+0x2fa>
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d12a      	bne.n	8002ca0 <_ZN8FanetMac8handleTxEv+0x350>
			printf("rx, abort.\n");
		else
			printf("tx not done yet, abort.\n");
#endif

		if (app_tx)
 8002c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <_ZN8FanetMac8handleTxEv+0x316>
			delete frm;
 8002c52:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002c54:	2c00      	cmp	r4, #0
 8002c56:	d006      	beq.n	8002c66 <_ZN8FanetMac8handleTxEv+0x316>
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff f965 	bl	8001f28 <_ZN5FrameD1Ev>
 8002c5e:	2144      	movs	r1, #68	@ 0x44
 8002c60:	4620      	mov	r0, r4
 8002c62:	f00a fd67 	bl	800d734 <_ZdlPvj>

		/* channel busy, increment backoff exp */
		if (csma_backoff_exp < MAC_TX_BACKOFF_EXP_MAX)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c6a:	2b0b      	cmp	r3, #11
 8002c6c:	dc04      	bgt.n	8002c78 <_ZN8FanetMac8handleTxEv+0x328>
			csma_backoff_exp++;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	679a      	str	r2, [r3, #120]	@ 0x78

		/* next tx try */
		csma_next_tx = HAL_GetTick() + random(1 << (MAC_TX_BACKOFF_EXP_MIN - 1), 1 << csma_backoff_exp);
 8002c78:	f7fe f9be 	bl	8000ff8 <HAL_GetTick>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2040      	movs	r0, #64	@ 0x40
 8002c8c:	f003 fe33 	bl	80068f6 <_Z6randomii>
 8002c90:	4603      	mov	r3, r0
 8002c92:	18e2      	adds	r2, r4, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c98:	e01a      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
 8002c9a:	bf00      	nop
 8002c9c:	3f666666 	.word	0x3f666666
		/* ignoring TX_TX_ONGOING */
#if MAC_debug_mode > 2
		printf("## WAT: %d\n", tx_ret);
#endif

		if (app_tx)
 8002ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
			delete frm;
 8002ca8:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002caa:	2c00      	cmp	r4, #0
 8002cac:	d010      	beq.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff f93a 	bl	8001f28 <_ZN5FrameD1Ev>
 8002cb4:	2144      	movs	r1, #68	@ 0x44
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f00a fd3c 	bl	800d734 <_ZdlPvj>
 8002cbc:	e008      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002cbe:	bf00      	nop
 8002cc0:	e006      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
			return;
 8002cc2:	bf00      	nop
 8002cc4:	e004      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
			return;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002cce:	bf00      	nop
	}
}
 8002cd0:	3730      	adds	r7, #48	@ 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd6:	bf00      	nop

08002cd8 <_ZN10LinkedListIP5FrameE4sizeEv>:

	return (ListNode<T>*) false;
}

template<typename T>
int LinkedList<T>::size(){
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	return _size;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
	...

08002cf0 <_ZN10LinkedListIP5FrameEC1Ev>:
LinkedList<T>::LinkedList()
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <_ZN10LinkedListIP5FrameEC1Ev+0x40>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
	root=NULL;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
	last=NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
	_size=0;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
	lastNodeGot = root;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]
	lastIndexGot = 0;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	615a      	str	r2, [r3, #20]
	isCached = false;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	0800f050 	.word	0x0800f050

08002d34 <_ZN10LinkedListIP5FrameED1Ev>:
LinkedList<T>::~LinkedList()
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
}
 8002d3c:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <_ZN10LinkedListIP5FrameED1Ev+0x54>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
	while(root!=NULL)
 8002d42:	e00e      	b.n	8002d62 <_ZN10LinkedListIP5FrameED1Ev+0x2e>
		tmp=root;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60fb      	str	r3, [r7, #12]
		root=root->next;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
		delete tmp;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <_ZN10LinkedListIP5FrameED1Ev+0x2e>
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00a fce9 	bl	800d734 <_ZdlPvj>
	while(root!=NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ec      	bne.n	8002d44 <_ZN10LinkedListIP5FrameED1Ev+0x10>
	last = NULL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
	_size=0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
	isCached = false;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0800f050 	.word	0x0800f050

08002d8c <_ZN10LinkedListIP12NeighborNodeEC1Ev>:
LinkedList<T>::LinkedList()
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <_ZN10LinkedListIP12NeighborNodeEC1Ev+0x40>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
	root=NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
	last=NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
	_size=0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	605a      	str	r2, [r3, #4]
	lastNodeGot = root;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	611a      	str	r2, [r3, #16]
	lastIndexGot = 0;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
	isCached = false;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	0800f01c 	.word	0x0800f01c

08002dd0 <_ZN10LinkedListIP12NeighborNodeED1Ev>:
LinkedList<T>::~LinkedList()
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
}
 8002dd8:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <_ZN10LinkedListIP12NeighborNodeED1Ev+0x54>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
	while(root!=NULL)
 8002dde:	e00e      	b.n	8002dfe <_ZN10LinkedListIP12NeighborNodeED1Ev+0x2e>
		tmp=root;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	60fb      	str	r3, [r7, #12]
		root=root->next;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
		delete tmp;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <_ZN10LinkedListIP12NeighborNodeED1Ev+0x2e>
 8002df6:	2108      	movs	r1, #8
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00a fc9b 	bl	800d734 <_ZdlPvj>
	while(root!=NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ec      	bne.n	8002de0 <_ZN10LinkedListIP12NeighborNodeED1Ev+0x10>
	last = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
	_size=0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
	isCached = false;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800f01c 	.word	0x0800f01c

08002e28 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>:
int LinkedList<T>::size(){
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	return _size;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <_ZN10LinkedListIP5FrameE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = getNode(index);
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9c3 	bl	80031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>
 8002e50:	60f8      	str	r0, [r7, #12]

	return (tmp ? tmp->data : T());
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <_ZN10LinkedListIP5FrameE3getEi+0x20>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	e000      	b.n	8002e60 <_ZN10LinkedListIP5FrameE3getEi+0x22>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZN10LinkedListIP5FrameE5shiftEv>:
T LinkedList<T>::shift(){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dc01      	bgt.n	8002e7c <_ZN10LinkedListIP5FrameE5shiftEv+0x14>
		return T();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e028      	b.n	8002ece <_ZN10LinkedListIP5FrameE5shiftEv+0x66>
	if(_size > 1){
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	dd1c      	ble.n	8002ebe <_ZN10LinkedListIP5FrameE5shiftEv+0x56>
		ListNode<T> *_next = root->next;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
		T ret = root->data;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60bb      	str	r3, [r7, #8]
		delete(root);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <_ZN10LinkedListIP5FrameE5shiftEv+0x3c>
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f00a fc48 	bl	800d734 <_ZdlPvj>
		root = _next;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	609a      	str	r2, [r3, #8]
		_size --;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
		isCached = false;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	761a      	strb	r2, [r3, #24]
		return ret;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	e007      	b.n	8002ece <_ZN10LinkedListIP5FrameE5shiftEv+0x66>
		return pop();
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3318      	adds	r3, #24
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	bf00      	nop
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_ZN10LinkedListIP5FrameE7unshiftES1_>:
bool LinkedList<T>::unshift(T _t){
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
	if(_size == 0)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <_ZN10LinkedListIP5FrameE7unshiftES1_+0x24>
		return add(_t);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	e01b      	b.n	8002f32 <_ZN10LinkedListIP5FrameE7unshiftES1_+0x5c>
	ListNode<T> *tmp = new ListNode<T>();
 8002efa:	2008      	movs	r0, #8
 8002efc:	f00a fc1e 	bl	800d73c <_Znwj>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
	tmp->next = root;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	605a      	str	r2, [r3, #4]
	tmp->data = _t;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]
	root = tmp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]
	_size++;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]
	isCached = false;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	761a      	strb	r2, [r3, #24]
	return true;
 8002f30:	2301      	movs	r3, #1
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZN10LinkedListIP5FrameE3addES1_>:
bool LinkedList<T>::add(T _t){
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = new ListNode<T>();
 8002f44:	2008      	movs	r0, #8
 8002f46:	f00a fbf9 	bl	800d73c <_Znwj>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
	tmp->data = _t;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	601a      	str	r2, [r3, #0]
	tmp->next = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
	if(root){
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <_ZN10LinkedListIP5FrameE3addES1_+0x40>
		last->next = tmp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
		last = tmp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	e005      	b.n	8002f86 <_ZN10LinkedListIP5FrameE3addES1_+0x4c>
		root = tmp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]
		last = tmp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	60da      	str	r2, [r3, #12]
	_size++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	605a      	str	r2, [r3, #4]
	isCached = false;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	761a      	strb	r2, [r3, #24]
	return true;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZN10LinkedListIP5FrameE6removeEi>:
T LinkedList<T>::remove(int index){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= _size)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db04      	blt.n	8002fba <_ZN10LinkedListIP5FrameE6removeEi+0x1a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	db01      	blt.n	8002fbe <_ZN10LinkedListIP5FrameE6removeEi+0x1e>
		return T();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e03a      	b.n	8003034 <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	if(index == 0)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <_ZN10LinkedListIP5FrameE6removeEi+0x34>
		return shift();
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	331c      	adds	r3, #28
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	e02f      	b.n	8003034 <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	if (index == _size-1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d107      	bne.n	8002ff0 <_ZN10LinkedListIP5FrameE6removeEi+0x50>
		return pop();
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	4603      	mov	r3, r0
 8002fee:	e021      	b.n	8003034 <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	ListNode<T> *tmp = getNode(index - 1);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8ed 	bl	80031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>
 8002ffc:	6178      	str	r0, [r7, #20]
	ListNode<T> *toDelete = tmp->next;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	613b      	str	r3, [r7, #16]
	T ret = toDelete->data;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
	tmp->next = tmp->next->next;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	605a      	str	r2, [r3, #4]
	delete(toDelete);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <_ZN10LinkedListIP5FrameE6removeEi+0x82>
 800301a:	2108      	movs	r1, #8
 800301c:	4618      	mov	r0, r3
 800301e:	f00a fb89 	bl	800d734 <_ZdlPvj>
	_size--;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]
	isCached = false;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	761a      	strb	r2, [r3, #24]
	return ret;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_ZN10LinkedListIP12NeighborNodeE3getEi>:
T LinkedList<T>::get(int index){
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = getNode(index);
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f94c 	bl	80032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 800304e:	60f8      	str	r0, [r7, #12]
	return (tmp ? tmp->data : T());
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <_ZN10LinkedListIP12NeighborNodeE3getEi+0x20>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e000      	b.n	800305e <_ZN10LinkedListIP12NeighborNodeE3getEi+0x22>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <_ZN10LinkedListIP12NeighborNodeE6removeEi>:
T LinkedList<T>::remove(int index){
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= _size)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db04      	blt.n	8003080 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x1a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	db01      	blt.n	8003084 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x1e>
		return T();
 8003080:	2300      	movs	r3, #0
 8003082:	e03a      	b.n	80030fa <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	if(index == 0)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x34>
		return shift();
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	331c      	adds	r3, #28
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
 8003096:	4603      	mov	r3, r0
 8003098:	e02f      	b.n	80030fa <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	if (index == _size-1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d107      	bne.n	80030b6 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x50>
		return pop();
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3318      	adds	r3, #24
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	e021      	b.n	80030fa <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	ListNode<T> *tmp = getNode(index - 1);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f912 	bl	80032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 80030c2:	6178      	str	r0, [r7, #20]
	ListNode<T> *toDelete = tmp->next;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
	T ret = toDelete->data;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
	tmp->next = tmp->next->next;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	605a      	str	r2, [r3, #4]
	delete(toDelete);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x82>
 80030e0:	2108      	movs	r1, #8
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00a fb26 	bl	800d734 <_ZdlPvj>
	_size--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	1e5a      	subs	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	605a      	str	r2, [r3, #4]
	isCached = false;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	761a      	strb	r2, [r3, #24]
	return ret;
 80030f8:	68fb      	ldr	r3, [r7, #12]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_ZN10LinkedListIP12NeighborNodeE5shiftEv>:
T LinkedList<T>::shift(){
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc01      	bgt.n	8003116 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x14>
		return T();
 8003112:	2300      	movs	r3, #0
 8003114:	e028      	b.n	8003168 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x66>
	if(_size > 1){
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	dd1c      	ble.n	8003158 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x56>
		ListNode<T> *_next = root->next;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
		T ret = root->data;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60bb      	str	r3, [r7, #8]
		delete(root);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x3c>
 8003136:	2108      	movs	r1, #8
 8003138:	4618      	mov	r0, r3
 800313a:	f00a fafb 	bl	800d734 <_ZdlPvj>
		root = _next;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
		_size --;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	605a      	str	r2, [r3, #4]
		isCached = false;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	761a      	strb	r2, [r3, #24]
		return ret;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	e007      	b.n	8003168 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x66>
		return pop();
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3318      	adds	r3, #24
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	4603      	mov	r3, r0
 8003166:	bf00      	nop
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN10LinkedListIP12NeighborNodeE3addES1_>:
bool LinkedList<T>::add(T _t){
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = new ListNode<T>();
 800317a:	2008      	movs	r0, #8
 800317c:	f00a fade 	bl	800d73c <_Znwj>
 8003180:	4603      	mov	r3, r0
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	60fb      	str	r3, [r7, #12]
	tmp->data = _t;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	601a      	str	r2, [r3, #0]
	tmp->next = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
	if(root){
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <_ZN10LinkedListIP12NeighborNodeE3addES1_+0x40>
		last->next = tmp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]
		last = tmp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	e005      	b.n	80031bc <_ZN10LinkedListIP12NeighborNodeE3addES1_+0x4c>
		root = tmp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
		last = tmp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	60da      	str	r2, [r3, #12]
	_size++;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	605a      	str	r2, [r3, #4]
	isCached = false;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	761a      	strb	r2, [r3, #24]
	return true;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>:
ListNode<T>* LinkedList<T>::getNode(int index){
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
	int _pos = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
	ListNode<T>* current = root;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]
	if(isCached && lastIndexGot <= index){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7e1b      	ldrb	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <_ZN10LinkedListIP5FrameE7getNodeEi+0x40>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	db0c      	blt.n	8003216 <_ZN10LinkedListIP5FrameE7getNodeEi+0x40>
		_pos = lastIndexGot;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	60fb      	str	r3, [r7, #12]
		current = lastNodeGot;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	60bb      	str	r3, [r7, #8]
	while(_pos < index && current){
 8003208:	e005      	b.n	8003216 <_ZN10LinkedListIP5FrameE7getNodeEi+0x40>
		current = current->next;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60bb      	str	r3, [r7, #8]
		_pos++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
	while(_pos < index && current){
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	da02      	bge.n	8003224 <_ZN10LinkedListIP5FrameE7getNodeEi+0x4e>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f2      	bne.n	800320a <_ZN10LinkedListIP5FrameE7getNodeEi+0x34>
	if(_pos == index){
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d10a      	bne.n	8003242 <_ZN10LinkedListIP5FrameE7getNodeEi+0x6c>
		isCached = true;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	761a      	strb	r2, [r3, #24]
		lastIndexGot = index;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	615a      	str	r2, [r3, #20]
		lastNodeGot = current;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	611a      	str	r2, [r3, #16]
		return current;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	e000      	b.n	8003244 <_ZN10LinkedListIP5FrameE7getNodeEi+0x6e>
	return (ListNode<T>*) false;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <_ZN10LinkedListIP5FrameE3popEv>:
T LinkedList<T>::pop(){
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	dc01      	bgt.n	8003262 <_ZN10LinkedListIP5FrameE3popEv+0x14>
		return T();
 800325e:	2300      	movs	r3, #0
 8003260:	e03d      	b.n	80032de <_ZN10LinkedListIP5FrameE3popEv+0x90>
	isCached = false;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	761a      	strb	r2, [r3, #24]
	if(_size >= 2){
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b01      	cmp	r3, #1
 800326e:	dd20      	ble.n	80032b2 <_ZN10LinkedListIP5FrameE3popEv+0x64>
		ListNode<T> *tmp = getNode(_size - 2);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	3b02      	subs	r3, #2
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffac 	bl	80031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>
 800327e:	6138      	str	r0, [r7, #16]
		T ret = tmp->next->data;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
		delete(tmp->next);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <_ZN10LinkedListIP5FrameE3popEv+0x4a>
 8003290:	2108      	movs	r1, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f00a fa4e 	bl	800d734 <_ZdlPvj>
		tmp->next = NULL;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
		last = tmp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	60da      	str	r2, [r3, #12]
		_size--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	605a      	str	r2, [r3, #4]
		return ret;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	e015      	b.n	80032de <_ZN10LinkedListIP5FrameE3popEv+0x90>
		T ret = root->data;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	617b      	str	r3, [r7, #20]
		delete(root);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <_ZN10LinkedListIP5FrameE3popEv+0x7c>
 80032c2:	2108      	movs	r1, #8
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00a fa35 	bl	800d734 <_ZdlPvj>
		root = NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
		last = NULL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
		_size = 0;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	605a      	str	r2, [r3, #4]
		return ret;
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>:
ListNode<T>* LinkedList<T>::getNode(int index){
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
	int _pos = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
	ListNode<T>* current = root;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
	if(isCached && lastIndexGot <= index){
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7e1b      	ldrb	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x40>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	db0c      	blt.n	8003326 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x40>
		_pos = lastIndexGot;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	60fb      	str	r3, [r7, #12]
		current = lastNodeGot;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	60bb      	str	r3, [r7, #8]
	while(_pos < index && current){
 8003318:	e005      	b.n	8003326 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x40>
		current = current->next;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60bb      	str	r3, [r7, #8]
		_pos++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
	while(_pos < index && current){
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	da02      	bge.n	8003334 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x4e>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f2      	bne.n	800331a <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x34>
	if(_pos == index){
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d10a      	bne.n	8003352 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x6c>
		isCached = true;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	761a      	strb	r2, [r3, #24]
		lastIndexGot = index;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	615a      	str	r2, [r3, #20]
		lastNodeGot = current;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	611a      	str	r2, [r3, #16]
		return current;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	e000      	b.n	8003354 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x6e>
	return (ListNode<T>*) false;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <_ZN10LinkedListIP12NeighborNodeE3popEv>:
T LinkedList<T>::pop(){
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dc01      	bgt.n	8003372 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x14>
		return T();
 800336e:	2300      	movs	r3, #0
 8003370:	e03d      	b.n	80033ee <_ZN10LinkedListIP12NeighborNodeE3popEv+0x90>
	isCached = false;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	761a      	strb	r2, [r3, #24]
	if(_size >= 2){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b01      	cmp	r3, #1
 800337e:	dd20      	ble.n	80033c2 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x64>
		ListNode<T> *tmp = getNode(_size - 2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	3b02      	subs	r3, #2
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffac 	bl	80032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 800338e:	6138      	str	r0, [r7, #16]
		T ret = tmp->next->data;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
		delete(tmp->next);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x4a>
 80033a0:	2108      	movs	r1, #8
 80033a2:	4618      	mov	r0, r3
 80033a4:	f00a f9c6 	bl	800d734 <_ZdlPvj>
		tmp->next = NULL;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
		last = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	60da      	str	r2, [r3, #12]
		_size--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	605a      	str	r2, [r3, #4]
		return ret;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	e015      	b.n	80033ee <_ZN10LinkedListIP12NeighborNodeE3popEv+0x90>
		T ret = root->data;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
		delete(root);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <_ZN10LinkedListIP12NeighborNodeE3popEv+0x7c>
 80033d2:	2108      	movs	r1, #8
 80033d4:	4618      	mov	r0, r3
 80033d6:	f00a f9ad 	bl	800d734 <_ZdlPvj>
		root = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
		last = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
		_size = 0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
		return ret;
 80033ec:	697b      	ldr	r3, [r7, #20]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <_Z41__static_initialization_and_destruction_0ii>:
	return (ret == HAL_OK && sectorError == UINT32_MAX);
	*/
	return HAL_OK;
}

FanetMac fmac = FanetMac();
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d107      	bne.n	8003418 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800340e:	4293      	cmp	r3, r2
 8003410:	d102      	bne.n	8003418 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003412:	4809      	ldr	r0, [pc, #36]	@ (8003438 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003414:	f7fe fe06 	bl	8002024 <_ZN8FanetMacC1Ev>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003428:	4803      	ldr	r0, [pc, #12]	@ (8003438 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800342a:	f7fe fe39 	bl	80020a0 <_ZN8FanetMacD1Ev>
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	2000021c 	.word	0x2000021c

0800343c <_ZN10LinkedListIP12NeighborNodeE3addEiS1_>:
bool LinkedList<T>::add(int index, T _t){
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
	if(index >= _size)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	db08      	blt.n	8003464 <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x28>
		return add(_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3308      	adds	r3, #8
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	4798      	blx	r3
 8003460:	4603      	mov	r3, r0
 8003462:	e02e      	b.n	80034c2 <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x86>
	if(index == 0)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x40>
		return unshift(_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	4798      	blx	r3
 8003478:	4603      	mov	r3, r0
 800347a:	e022      	b.n	80034c2 <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x86>
	ListNode<T> *tmp = new ListNode<T>(),
 800347c:	2008      	movs	r0, #8
 800347e:	f00a f95d 	bl	800d73c <_Znwj>
 8003482:	4603      	mov	r3, r0
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]
				 *_prev = getNode(index-1);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3b01      	subs	r3, #1
 8003492:	4619      	mov	r1, r3
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ff26 	bl	80032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 800349a:	6138      	str	r0, [r7, #16]
	tmp->data = _t;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
	tmp->next = _prev->next;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	605a      	str	r2, [r3, #4]
	_prev->next = tmp;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	605a      	str	r2, [r3, #4]
	_size++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
	isCached = false;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	761a      	strb	r2, [r3, #24]
	return true;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_>:
bool LinkedList<T>::unshift(T _t){
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
	if(_size == 0)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_+0x24>
		return add(_t);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	e01b      	b.n	8003526 <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_+0x5c>
	ListNode<T> *tmp = new ListNode<T>();
 80034ee:	2008      	movs	r0, #8
 80034f0:	f00a f924 	bl	800d73c <_Znwj>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]
	tmp->next = root;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	tmp->data = _t;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
	root = tmp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
	_size++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]
	isCached = false;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	761a      	strb	r2, [r3, #24]
	return true;
 8003524:	2301      	movs	r3, #1
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_ZN10LinkedListIP12NeighborNodeE3setEiS1_>:
bool LinkedList<T>::set(int index, T _t){
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
	if(index < 0 || index >= _size)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db04      	blt.n	800354a <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x1c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	db01      	blt.n	800354e <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x20>
		return false;
 800354a:	2300      	movs	r3, #0
 800354c:	e007      	b.n	800355e <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x30>
	getNode(index)->data = _t;
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff fec8 	bl	80032e6 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]
	return true;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN10LinkedListIP12NeighborNodeE5clearEv>:

template<typename T>
void LinkedList<T>::clear(){
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
	while(size() > 0)
 800356e:	e005      	b.n	800357c <_ZN10LinkedListIP12NeighborNodeE5clearEv+0x16>
		shift();
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	331c      	adds	r3, #28
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
	while(size() > 0)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	bfcc      	ite	gt
 800358c:	2301      	movgt	r3, #1
 800358e:	2300      	movle	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ec      	bne.n	8003570 <_ZN10LinkedListIP12NeighborNodeE5clearEv+0xa>
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E>:

template<typename T>
void LinkedList<T>::sort(int (*cmp)(T &, T &)){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	if(_size < 2) return; // trivial case;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f340 8083 	ble.w	80036ba <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x11a>

	for(;;) {

		ListNode<T> **joinPoint = &root;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3308      	adds	r3, #8
 80035b8:	61fb      	str	r3, [r7, #28]

		while(*joinPoint) {
 80035ba:	e077      	b.n	80036ac <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x10c>
			ListNode<T> *a = *joinPoint;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
			ListNode<T> *a_end = findEndOfSortedString(a, cmp);
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f98c 	bl	80038e4 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 80035cc:	6138      	str	r0, [r7, #16]

			if(!a_end->next	) {
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x4e>
				if(joinPoint == &root) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3308      	adds	r3, #8
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d16a      	bne.n	80036b6 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x116>
					last = a_end;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]
					isCached = false;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	761a      	strb	r2, [r3, #24]
					return;
 80035ec:	e066      	b.n	80036bc <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x11c>
				else {
					break;
				}
			}

			ListNode<T> *b = a_end->next;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	617b      	str	r3, [r7, #20]
			ListNode<T> *b_end = findEndOfSortedString(b, cmp);
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f973 	bl	80038e4 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 80035fe:	60f8      	str	r0, [r7, #12]

			ListNode<T> *tail = b_end->next;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60bb      	str	r3, [r7, #8]

			a_end->next = NULL;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2200      	movs	r2, #0
 800360a:	605a      	str	r2, [r3, #4]
			b_end->next = NULL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]

			while(a && b) {
 8003612:	e01f      	b.n	8003654 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xb4>
				if(cmp(a->data, b->data) <= 0) {
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4610      	mov	r0, r2
 800361c:	4798      	blx	r3
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfd4      	ite	le
 8003624:	2301      	movle	r3, #1
 8003626:	2300      	movgt	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xa2>
					*joinPoint = a;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	601a      	str	r2, [r3, #0]
					joinPoint = &a->next;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	3304      	adds	r3, #4
 8003638:	61fb      	str	r3, [r7, #28]
					a = a->next;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e008      	b.n	8003654 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xb4>
				}
				else {
					*joinPoint = b;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	601a      	str	r2, [r3, #0]
					joinPoint = &b->next;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3304      	adds	r3, #4
 800364c:	61fb      	str	r3, [r7, #28]
					b = b->next;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	617b      	str	r3, [r7, #20]
			while(a && b) {
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xc0>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1d9      	bne.n	8003614 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x74>
				}
			}

			if(a) {
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d011      	beq.n	800368a <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xea>
				*joinPoint = a;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]
				while(a->next) a = a->next;
 800366c:	e002      	b.n	8003674 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xd4>
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f8      	bne.n	800366e <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xce>
				a->next = tail;
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	605a      	str	r2, [r3, #4]
				joinPoint = &a->next;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	3304      	adds	r3, #4
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e010      	b.n	80036ac <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x10c>
			}
			else {
				*joinPoint = b;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	601a      	str	r2, [r3, #0]
				while(b->next) b = b->next;
 8003690:	e002      	b.n	8003698 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xf8>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f8      	bne.n	8003692 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xf2>
				b->next = tail;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	605a      	str	r2, [r3, #4]
				joinPoint = &b->next;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3304      	adds	r3, #4
 80036aa:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d183      	bne.n	80035bc <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x1c>
 80036b4:	e77e      	b.n	80035b4 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x14>
					break;
 80036b6:	bf00      	nop
	for(;;) {
 80036b8:	e77c      	b.n	80035b4 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x14>
	if(_size < 2) return; // trivial case;
 80036ba:	bf00      	nop
			}
		}
	}
}
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZN10LinkedListIP5FrameE3addEiS1_>:
bool LinkedList<T>::add(int index, T _t){
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
	if(index >= _size)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	db08      	blt.n	80036ea <_ZN10LinkedListIP5FrameE3addEiS1_+0x28>
		return add(_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	4798      	blx	r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	e02e      	b.n	8003748 <_ZN10LinkedListIP5FrameE3addEiS1_+0x86>
	if(index == 0)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d108      	bne.n	8003702 <_ZN10LinkedListIP5FrameE3addEiS1_+0x40>
		return unshift(_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	4798      	blx	r3
 80036fe:	4603      	mov	r3, r0
 8003700:	e022      	b.n	8003748 <_ZN10LinkedListIP5FrameE3addEiS1_+0x86>
	ListNode<T> *tmp = new ListNode<T>(),
 8003702:	2008      	movs	r0, #8
 8003704:	f00a f81a 	bl	800d73c <_Znwj>
 8003708:	4603      	mov	r3, r0
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	617b      	str	r3, [r7, #20]
				 *_prev = getNode(index-1);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3b01      	subs	r3, #1
 8003718:	4619      	mov	r1, r3
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fd5b 	bl	80031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003720:	6138      	str	r0, [r7, #16]
	tmp->data = _t;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
	tmp->next = _prev->next;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	605a      	str	r2, [r3, #4]
	_prev->next = tmp;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	605a      	str	r2, [r3, #4]
	_size++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
	isCached = false;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	761a      	strb	r2, [r3, #24]
	return true;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN10LinkedListIP5FrameE3setEiS1_>:
bool LinkedList<T>::set(int index, T _t){
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
	if(index < 0 || index >= _size)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db04      	blt.n	800376c <_ZN10LinkedListIP5FrameE3setEiS1_+0x1c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	db01      	blt.n	8003770 <_ZN10LinkedListIP5FrameE3setEiS1_+0x20>
		return false;
 800376c:	2300      	movs	r3, #0
 800376e:	e007      	b.n	8003780 <_ZN10LinkedListIP5FrameE3setEiS1_+0x30>
	getNode(index)->data = _t;
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fd2f 	bl	80031d6 <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
	return true;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZN10LinkedListIP5FrameE5clearEv>:
void LinkedList<T>::clear(){
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	while(size() > 0)
 8003790:	e005      	b.n	800379e <_ZN10LinkedListIP5FrameE5clearEv+0x16>
		shift();
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	331c      	adds	r3, #28
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
	while(size() > 0)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfcc      	ite	gt
 80037ae:	2301      	movgt	r3, #1
 80037b0:	2300      	movle	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ec      	bne.n	8003792 <_ZN10LinkedListIP5FrameE5clearEv+0xa>
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E>:
void LinkedList<T>::sort(int (*cmp)(T &, T &)){
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b088      	sub	sp, #32
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
	if(_size < 2) return; // trivial case;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f340 8083 	ble.w	80038dc <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x11a>
		ListNode<T> **joinPoint = &root;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3308      	adds	r3, #8
 80037da:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 80037dc:	e077      	b.n	80038ce <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x10c>
			ListNode<T> *a = *joinPoint;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61bb      	str	r3, [r7, #24]
			ListNode<T> *a_end = findEndOfSortedString(a, cmp);
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f89d 	bl	8003928 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 80037ee:	6138      	str	r0, [r7, #16]
			if(!a_end->next	) {
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x4e>
				if(joinPoint == &root) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3308      	adds	r3, #8
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d16a      	bne.n	80038d8 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x116>
					last = a_end;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	60da      	str	r2, [r3, #12]
					isCached = false;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	761a      	strb	r2, [r3, #24]
					return;
 800380e:	e066      	b.n	80038de <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x11c>
			ListNode<T> *b = a_end->next;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
			ListNode<T> *b_end = findEndOfSortedString(b, cmp);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6979      	ldr	r1, [r7, #20]
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f884 	bl	8003928 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 8003820:	60f8      	str	r0, [r7, #12]
			ListNode<T> *tail = b_end->next;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60bb      	str	r3, [r7, #8]
			a_end->next = NULL;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
			b_end->next = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]
			while(a && b) {
 8003834:	e01f      	b.n	8003876 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xb4>
				if(cmp(a->data, b->data) <= 0) {
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfd4      	ite	le
 8003846:	2301      	movle	r3, #1
 8003848:	2300      	movgt	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xa2>
					*joinPoint = a;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	601a      	str	r2, [r3, #0]
					joinPoint = &a->next;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3304      	adds	r3, #4
 800385a:	61fb      	str	r3, [r7, #28]
					a = a->next;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e008      	b.n	8003876 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xb4>
					*joinPoint = b;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	601a      	str	r2, [r3, #0]
					joinPoint = &b->next;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3304      	adds	r3, #4
 800386e:	61fb      	str	r3, [r7, #28]
					b = b->next;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]
			while(a && b) {
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xc0>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1d9      	bne.n	8003836 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x74>
			if(a) {
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xea>
				*joinPoint = a;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	601a      	str	r2, [r3, #0]
				while(a->next) a = a->next;
 800388e:	e002      	b.n	8003896 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xd4>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f8      	bne.n	8003890 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xce>
				a->next = tail;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	605a      	str	r2, [r3, #4]
				joinPoint = &a->next;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3304      	adds	r3, #4
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e010      	b.n	80038ce <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x10c>
				*joinPoint = b;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	601a      	str	r2, [r3, #0]
				while(b->next) b = b->next;
 80038b2:	e002      	b.n	80038ba <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xf8>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f8      	bne.n	80038b4 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xf2>
				b->next = tail;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	605a      	str	r2, [r3, #4]
				joinPoint = &b->next;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3304      	adds	r3, #4
 80038cc:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d183      	bne.n	80037de <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x1c>
 80038d6:	e77e      	b.n	80037d6 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x14>
					break;
 80038d8:	bf00      	nop
	for(;;) {
 80038da:	e77c      	b.n	80037d6 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x14>
	if(_size < 2) return; // trivial case;
 80038dc:	bf00      	nop
}
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>:

template<typename T>
ListNode<T>* LinkedList<T>::findEndOfSortedString(ListNode<T> *p, int (*cmp)(T &, T &)) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 80038f0:	e002      	b.n	80038f8 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x14>
		p = p->next;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60bb      	str	r3, [r7, #8]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x34>
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	dc01      	bgt.n	8003918 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x34>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x36>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e9      	bne.n	80038f2 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0xe>
	}

	return p;
 800391e:	68bb      	ldr	r3, [r7, #8]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>:
ListNode<T>* LinkedList<T>::findEndOfSortedString(ListNode<T> *p, int (*cmp)(T &, T &)) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 8003934:	e002      	b.n	800393c <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x14>
		p = p->next;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60bb      	str	r3, [r7, #8]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x34>
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4619      	mov	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4610      	mov	r0, r2
 8003950:	4798      	blx	r3
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	dc01      	bgt.n	800395c <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x34>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x36>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e9      	bne.n	8003936 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0xe>
	return p;
 8003962:	68bb      	ldr	r3, [r7, #8]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_GLOBAL__sub_I__ZN7MacFifo10get_nexttxEv>:
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
 8003970:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003974:	2001      	movs	r0, #1
 8003976:	f7ff fd3f 	bl	80033f8 <_Z41__static_initialization_and_destruction_0ii>
 800397a:	bd80      	pop	{r7, pc}

0800397c <_GLOBAL__sub_D__ZN7MacFifo10get_nexttxEv>:
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
 8003980:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003984:	2000      	movs	r0, #0
 8003986:	f7ff fd37 	bl	80033f8 <_Z41__static_initialization_and_destruction_0ii>
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZL3PADi>:
  result |= result >> 16;
  result |= result >> 8;
  return ((((int)(result & 0xff) - 1) >> 8) & 1) - 1;
}

forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
 800398c:	b4f0      	push	{r4, r5, r6, r7}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f1c1 0107 	rsb	r1, r1, #7
 800399a:	00cc      	lsls	r4, r1, #3
 800399c:	f04f 0080 	mov.w	r0, #128	@ 0x80
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f1a4 0620 	sub.w	r6, r4, #32
 80039a8:	f1c4 0520 	rsb	r5, r4, #32
 80039ac:	fa01 f304 	lsl.w	r3, r1, r4
 80039b0:	fa00 f606 	lsl.w	r6, r0, r6
 80039b4:	4333      	orrs	r3, r6
 80039b6:	fa20 f505 	lsr.w	r5, r0, r5
 80039ba:	432b      	orrs	r3, r5
 80039bc:	fa00 f204 	lsl.w	r2, r0, r4
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bcf0      	pop	{r4, r5, r6, r7}
 80039ca:	4770      	bx	lr

080039cc <_ZL4DSEPv>:

forceinline uint64_t DSEP() { return 0x01; }
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f04f 0201 	mov.w	r2, #1
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <_ZL9LOADBYTESPKhi>:
forceinline uint64_t MASK(int n) {
  /* undefined for n == 0 */
  return ~0ull >> (64 - 8 * n);
}

forceinline uint64_t LOADBYTES(const uint8_t* bytes, int n) {
 80039e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e6:	b09a      	sub	sp, #104	@ 0x68
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80039ec:	65b9      	str	r1, [r7, #88]	@ 0x58
  uint64_t x = 0;
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  memcpy(&x, bytes, n);
 80039fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039fc:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8003a00:	461a      	mov	r2, r3
 8003a02:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a04:	f00a fa79 	bl	800defa <memcpy>
  return U64TOWORD(x);
 8003a08:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	f04f 0500 	mov.w	r5, #0
 8003a14:	0615      	lsls	r5, r2, #24
 8003a16:	2400      	movs	r4, #0
 8003a18:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003a1c:	f04f 0000 	mov.w	r0, #0
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	0211      	lsls	r1, r2, #8
 8003a26:	2000      	movs	r0, #0
 8003a28:	f04f 0800 	mov.w	r8, #0
 8003a2c:	f401 097f 	and.w	r9, r1, #16711680	@ 0xff0000
 8003a30:	ea44 0308 	orr.w	r3, r4, r8
 8003a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a36:	ea45 0309 	orr.w	r3, r5, r9
 8003a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a3c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003a40:	f04f 0000 	mov.w	r0, #0
 8003a44:	f04f 0100 	mov.w	r1, #0
 8003a48:	0619      	lsls	r1, r3, #24
 8003a4a:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8003a4e:	0610      	lsls	r0, r2, #24
 8003a50:	f04f 0a00 	mov.w	sl, #0
 8003a54:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8003a58:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	ea42 020a 	orr.w	r2, r2, sl
 8003a62:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003a64:	4623      	mov	r3, r4
 8003a66:	ea43 030b 	orr.w	r3, r3, fp
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003a70:	f04f 0000 	mov.w	r0, #0
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	0219      	lsls	r1, r3, #8
 8003a7a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a7e:	0210      	lsls	r0, r2, #8
 8003a80:	2500      	movs	r5, #0
 8003a82:	643d      	str	r5, [r7, #64]	@ 0x40
 8003a84:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003a8e:	4618      	mov	r0, r3
 8003a90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a94:	468c      	mov	ip, r1
 8003a96:	ea40 000c 	orr.w	r0, r0, ip
 8003a9a:	63b8      	str	r0, [r7, #56]	@ 0x38
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0a10      	lsrs	r0, r2, #8
 8003ab0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003ab4:	0a19      	lsrs	r1, r3, #8
 8003ab6:	f000 437f 	and.w	r3, r0, #4278190080	@ 0xff000000
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003abc:	637d      	str	r5, [r7, #52]	@ 0x34
 8003abe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ac8:	468c      	mov	ip, r1
 8003aca:	ea40 000c 	orr.w	r0, r0, ip
 8003ace:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0e10      	lsrs	r0, r2, #24
 8003ae4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003ae8:	0e19      	lsrs	r1, r3, #24
 8003aea:	f400 037f 	and.w	r3, r0, #16711680	@ 0xff0000
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	627d      	str	r5, [r7, #36]	@ 0x24
 8003af2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003af6:	4618      	mov	r0, r3
 8003af8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003afc:	468c      	mov	ip, r1
 8003afe:	ea40 000c 	orr.w	r0, r0, ip
 8003b02:	61b8      	str	r0, [r7, #24]
 8003b04:	4623      	mov	r3, r4
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	0a0a      	lsrs	r2, r1, #8
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	617d      	str	r5, [r7, #20]
 8003b22:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003b26:	4618      	mov	r0, r3
 8003b28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	4328      	orrs	r0, r5
 8003b30:	60b8      	str	r0, [r7, #8]
 8003b32:	4623      	mov	r3, r4
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	0e0a      	lsrs	r2, r1, #24
 8003b46:	2300      	movs	r3, #0
 8003b48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4314      	orrs	r4, r2
 8003b50:	603c      	str	r4, [r7, #0]
 8003b52:	4319      	orrs	r1, r3
 8003b54:	6079      	str	r1, [r7, #4]
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	3768      	adds	r7, #104	@ 0x68
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b66 <_ZL10STOREBYTESPhyi>:

forceinline void STOREBYTES(uint8_t* bytes, uint64_t w, int n) {
 8003b66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6a:	b09c      	sub	sp, #112	@ 0x70
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6678      	str	r0, [r7, #100]	@ 0x64
 8003b70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  uint64_t x = WORDTOU64(w);
 8003b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b78:	f04f 0400 	mov.w	r4, #0
 8003b7c:	f04f 0500 	mov.w	r5, #0
 8003b80:	0615      	lsls	r5, r2, #24
 8003b82:	2400      	movs	r4, #0
 8003b84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	2000      	movs	r0, #0
 8003b94:	f04f 0800 	mov.w	r8, #0
 8003b98:	f401 097f 	and.w	r9, r1, #16711680	@ 0xff0000
 8003b9c:	ea44 0308 	orr.w	r3, r4, r8
 8003ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ba2:	ea45 0309 	orr.w	r3, r5, r9
 8003ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ba8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0619      	lsls	r1, r3, #24
 8003bb6:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8003bba:	0610      	lsls	r0, r2, #24
 8003bbc:	f04f 0a00 	mov.w	sl, #0
 8003bc0:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8003bc4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8003bc8:	461a      	mov	r2, r3
 8003bca:	ea42 020a 	orr.w	r2, r2, sl
 8003bce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	ea43 030b 	orr.w	r3, r3, fp
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0219      	lsls	r1, r3, #8
 8003be6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003bea:	0210      	lsls	r0, r2, #8
 8003bec:	2500      	movs	r5, #0
 8003bee:	643d      	str	r5, [r7, #64]	@ 0x40
 8003bf0:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c00:	468c      	mov	ip, r1
 8003c02:	ea40 000c 	orr.w	r0, r0, ip
 8003c06:	63b8      	str	r0, [r7, #56]	@ 0x38
 8003c08:	4623      	mov	r3, r4
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0a10      	lsrs	r0, r2, #8
 8003c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003c20:	0a19      	lsrs	r1, r3, #8
 8003c22:	f000 437f 	and.w	r3, r0, #4278190080	@ 0xff000000
 8003c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c28:	637d      	str	r5, [r7, #52]	@ 0x34
 8003c2a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003c2e:	4618      	mov	r0, r3
 8003c30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c34:	468c      	mov	ip, r1
 8003c36:	ea40 000c 	orr.w	r0, r0, ip
 8003c3a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	0e10      	lsrs	r0, r2, #24
 8003c50:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003c54:	0e19      	lsrs	r1, r3, #24
 8003c56:	f400 037f 	and.w	r3, r0, #16711680	@ 0xff0000
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	627d      	str	r5, [r7, #36]	@ 0x24
 8003c5e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003c62:	4618      	mov	r0, r3
 8003c64:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c68:	468c      	mov	ip, r1
 8003c6a:	ea40 000c 	orr.w	r0, r0, ip
 8003c6e:	61b8      	str	r0, [r7, #24]
 8003c70:	4623      	mov	r3, r4
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	0a0a      	lsrs	r2, r1, #8
 8003c84:	2300      	movs	r3, #0
 8003c86:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	617d      	str	r5, [r7, #20]
 8003c8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003c92:	4618      	mov	r0, r3
 8003c94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4328      	orrs	r0, r5
 8003c9c:	60b8      	str	r0, [r7, #8]
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	0e0a      	lsrs	r2, r1, #24
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cb8:	4604      	mov	r4, r0
 8003cba:	4314      	orrs	r4, r2
 8003cbc:	603c      	str	r4, [r7, #0]
 8003cbe:	4319      	orrs	r1, r3
 8003cc0:	6079      	str	r1, [r7, #4]
 8003cc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003cc6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  memcpy(bytes, &x, n);
 8003cca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003cce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003cd6:	f00a f910 	bl	800defa <memcpy>
}
 8003cda:	bf00      	nop
 8003cdc:	3770      	adds	r7, #112	@ 0x70
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ce4 <_ZL9P12ROUNDSP13ascon_state_t>:
    s->x[2] = c.x;                   \
    s->x[3] = d.x;                   \
    s->x[4] = e.x;                   \
  } while (0)

forceinline void P12ROUNDS(ascon_state_t* s) {
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0b5      	sub	sp, #212	@ 0xd4
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6178      	str	r0, [r7, #20]
  word_t x0, x1, x2, x3, x4;
  LOADSTATE(s, x0, x1, x2, x3, x4);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d08:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d12:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  ROUND5(x0, x1, x2, x3, x4, RC0);
 8003d20:	f8d7 c038 	ldr.w	ip, [r7, #56]	@ 0x38
 8003d24:	f8c7 c010 	str.w	ip, [r7, #16]
 8003d28:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 8003d2c:	f8c7 e00c 	str.w	lr, [r7, #12]
 8003d30:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 8003d34:	f8c7 8008 	str.w	r8, [r7, #8]
 8003d38:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8003d3a:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8003d3c:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8003d3e:	6a38      	ldr	r0, [r7, #32]
 8003d40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8003d4a:	f8c7 c004 	str.w	ip, [r7, #4]
 8003d4e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003d52:	f8c7 e010 	str.w	lr, [r7, #16]
 8003d56:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8003d5a:	f8c7 800c 	str.w	r8, [r7, #12]
 8003d5e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003d62:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8003d66:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003d6a:	f085 05f0 	eor.w	r5, r5, #240	@ 0xf0
 8003d6e:	ea88 0905 	eor.w	r9, r8, r5
 8003d72:	ea8c 0a02 	eor.w	sl, ip, r2
 8003d76:	ea80 0b02 	eor.w	fp, r0, r2
 8003d7a:	ea6f 0202 	mvn.w	r2, r2
 8003d7e:	ea40 0202 	orr.w	r2, r0, r2
 8003d82:	ea82 0209 	eor.w	r2, r2, r9
 8003d86:	ea80 0008 	eor.w	r0, r0, r8
 8003d8a:	ea40 0009 	orr.w	r0, r0, r9
 8003d8e:	ea80 000a 	eor.w	r0, r0, sl
 8003d92:	ea85 050a 	eor.w	r5, r5, sl
 8003d96:	ea45 0508 	orr.w	r5, r5, r8
 8003d9a:	ea85 050b 	eor.w	r5, r5, fp
 8003d9e:	ea28 080a 	bic.w	r8, r8, sl
 8003da2:	ea88 080b 	eor.w	r8, r8, fp
 8003da6:	ea4c 0c0b 	orr.w	ip, ip, fp
 8003daa:	ea8c 0c09 	eor.w	ip, ip, r9
 8003dae:	ea86 0904 	eor.w	r9, r6, r4
 8003db2:	ea8e 0a03 	eor.w	sl, lr, r3
 8003db6:	ea81 0b03 	eor.w	fp, r1, r3
 8003dba:	ea6f 0303 	mvn.w	r3, r3
 8003dbe:	ea41 0303 	orr.w	r3, r1, r3
 8003dc2:	ea83 0309 	eor.w	r3, r3, r9
 8003dc6:	ea81 0106 	eor.w	r1, r1, r6
 8003dca:	ea41 0109 	orr.w	r1, r1, r9
 8003dce:	ea81 010a 	eor.w	r1, r1, sl
 8003dd2:	ea84 040a 	eor.w	r4, r4, sl
 8003dd6:	ea44 0406 	orr.w	r4, r4, r6
 8003dda:	ea84 040b 	eor.w	r4, r4, fp
 8003dde:	ea26 060a 	bic.w	r6, r6, sl
 8003de2:	ea86 060b 	eor.w	r6, r6, fp
 8003de6:	ea4e 0e0b 	orr.w	lr, lr, fp
 8003dea:	ea8e 0e09 	eor.w	lr, lr, r9
 8003dee:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8003df2:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8003df6:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8003dfa:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8003dfe:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8003e02:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8003e06:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8003e0a:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8003e0e:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8003e12:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8003e16:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8003e1a:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8003e1e:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8003e22:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8003e26:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8003e2a:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8003e2e:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8003e32:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8003e36:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8003e3a:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8003e3e:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8003e42:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8003e46:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8003e4a:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8003e4e:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8003e52:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8003e56:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8003e5a:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8003e5e:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8003e62:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8003e66:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8003e6a:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8003e6e:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8003e72:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8003e76:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8003e7a:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8003e7e:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8003e82:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8003e86:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8003e8a:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8003e8e:	f8c7 b000 	str.w	fp, [r7]
 8003e92:	f8c7 a004 	str.w	sl, [r7, #4]
 8003e96:	f8c7 9008 	str.w	r9, [r7, #8]
 8003e9a:	f8c7 800c 	str.w	r8, [r7, #12]
 8003e9e:	f8c7 e010 	str.w	lr, [r7, #16]
 8003ea2:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8003ea6:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8003eaa:	f8c7 e03c 	str.w	lr, [r7, #60]	@ 0x3c
 8003eae:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003eb2:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
 8003eb6:	637e      	str	r6, [r7, #52]	@ 0x34
 8003eb8:	62bd      	str	r5, [r7, #40]	@ 0x28
 8003eba:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8003ebc:	6238      	str	r0, [r7, #32]
 8003ebe:	6279      	str	r1, [r7, #36]	@ 0x24
 8003ec0:	61ba      	str	r2, [r7, #24]
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8003ec8:	f8c7 90cc 	str.w	r9, [r7, #204]	@ 0xcc
 8003ecc:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8003ed0:	f8c7 a0c8 	str.w	sl, [r7, #200]	@ 0xc8
 8003ed4:	f8d7 b000 	ldr.w	fp, [r7]
 8003ed8:	f8c7 b0c4 	str.w	fp, [r7, #196]	@ 0xc4
  ROUND5(x2, x3, x4, x0, x1, RC1);
 8003edc:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8003ee0:	f8c7 c010 	str.w	ip, [r7, #16]
 8003ee4:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8003ee8:	f8c7 e00c 	str.w	lr, [r7, #12]
 8003eec:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8003ef0:	f8c7 8008 	str.w	r8, [r7, #8]
 8003ef4:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8003ef6:	69bd      	ldr	r5, [r7, #24]
 8003ef8:	69fc      	ldr	r4, [r7, #28]
 8003efa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003efc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f02:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8003f06:	f8c7 c004 	str.w	ip, [r7, #4]
 8003f0a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003f0e:	f8c7 e010 	str.w	lr, [r7, #16]
 8003f12:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8003f16:	f8c7 800c 	str.w	r8, [r7, #12]
 8003f1a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003f1e:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8003f22:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003f26:	f085 05e1 	eor.w	r5, r5, #225	@ 0xe1
 8003f2a:	ea88 0905 	eor.w	r9, r8, r5
 8003f2e:	ea8c 0a02 	eor.w	sl, ip, r2
 8003f32:	ea80 0b02 	eor.w	fp, r0, r2
 8003f36:	ea6f 0202 	mvn.w	r2, r2
 8003f3a:	ea40 0202 	orr.w	r2, r0, r2
 8003f3e:	ea82 0209 	eor.w	r2, r2, r9
 8003f42:	ea80 0008 	eor.w	r0, r0, r8
 8003f46:	ea40 0009 	orr.w	r0, r0, r9
 8003f4a:	ea80 000a 	eor.w	r0, r0, sl
 8003f4e:	ea85 050a 	eor.w	r5, r5, sl
 8003f52:	ea45 0508 	orr.w	r5, r5, r8
 8003f56:	ea85 050b 	eor.w	r5, r5, fp
 8003f5a:	ea28 080a 	bic.w	r8, r8, sl
 8003f5e:	ea88 080b 	eor.w	r8, r8, fp
 8003f62:	ea4c 0c0b 	orr.w	ip, ip, fp
 8003f66:	ea8c 0c09 	eor.w	ip, ip, r9
 8003f6a:	ea86 0904 	eor.w	r9, r6, r4
 8003f6e:	ea8e 0a03 	eor.w	sl, lr, r3
 8003f72:	ea81 0b03 	eor.w	fp, r1, r3
 8003f76:	ea6f 0303 	mvn.w	r3, r3
 8003f7a:	ea41 0303 	orr.w	r3, r1, r3
 8003f7e:	ea83 0309 	eor.w	r3, r3, r9
 8003f82:	ea81 0106 	eor.w	r1, r1, r6
 8003f86:	ea41 0109 	orr.w	r1, r1, r9
 8003f8a:	ea81 010a 	eor.w	r1, r1, sl
 8003f8e:	ea84 040a 	eor.w	r4, r4, sl
 8003f92:	ea44 0406 	orr.w	r4, r4, r6
 8003f96:	ea84 040b 	eor.w	r4, r4, fp
 8003f9a:	ea26 060a 	bic.w	r6, r6, sl
 8003f9e:	ea86 060b 	eor.w	r6, r6, fp
 8003fa2:	ea4e 0e0b 	orr.w	lr, lr, fp
 8003fa6:	ea8e 0e09 	eor.w	lr, lr, r9
 8003faa:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8003fae:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8003fb2:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8003fb6:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8003fba:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8003fbe:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8003fc2:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8003fc6:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8003fca:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8003fce:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8003fd2:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8003fd6:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8003fda:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8003fde:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8003fe2:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8003fe6:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8003fea:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8003fee:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8003ff2:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8003ff6:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8003ffa:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8003ffe:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004002:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8004006:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 800400a:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 800400e:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004012:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004016:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 800401a:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 800401e:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004022:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004026:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 800402a:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 800402e:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004032:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004036:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 800403a:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 800403e:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004042:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004046:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 800404a:	f8c7 b000 	str.w	fp, [r7]
 800404e:	f8c7 a004 	str.w	sl, [r7, #4]
 8004052:	f8c7 9008 	str.w	r9, [r7, #8]
 8004056:	f8c7 800c 	str.w	r8, [r7, #12]
 800405a:	f8c7 e010 	str.w	lr, [r7, #16]
 800405e:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8004062:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004066:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 800406a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800406e:	f8c7 8020 	str.w	r8, [r7, #32]
 8004072:	627e      	str	r6, [r7, #36]	@ 0x24
 8004074:	61bd      	str	r5, [r7, #24]
 8004076:	61fc      	str	r4, [r7, #28]
 8004078:	63b8      	str	r0, [r7, #56]	@ 0x38
 800407a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800407c:	633a      	str	r2, [r7, #48]	@ 0x30
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004080:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004084:	f8c7 90c0 	str.w	r9, [r7, #192]	@ 0xc0
 8004088:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800408c:	f8c7 a0bc 	str.w	sl, [r7, #188]	@ 0xbc
 8004090:	f8d7 b000 	ldr.w	fp, [r7]
 8004094:	f8c7 b0b8 	str.w	fp, [r7, #184]	@ 0xb8
  ROUND5(x4, x0, x1, x2, x3, RC2);
 8004098:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800409c:	f8c7 c010 	str.w	ip, [r7, #16]
 80040a0:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 80040a4:	f8c7 e00c 	str.w	lr, [r7, #12]
 80040a8:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 80040ac:	f8c7 8008 	str.w	r8, [r7, #8]
 80040b0:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 80040b2:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 80040b4:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80040b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80040c2:	f8c7 c004 	str.w	ip, [r7, #4]
 80040c6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80040ca:	f8c7 e010 	str.w	lr, [r7, #16]
 80040ce:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80040d2:	f8c7 800c 	str.w	r8, [r7, #12]
 80040d6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80040da:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80040de:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80040e2:	f085 05d2 	eor.w	r5, r5, #210	@ 0xd2
 80040e6:	ea88 0905 	eor.w	r9, r8, r5
 80040ea:	ea8c 0a02 	eor.w	sl, ip, r2
 80040ee:	ea80 0b02 	eor.w	fp, r0, r2
 80040f2:	ea6f 0202 	mvn.w	r2, r2
 80040f6:	ea40 0202 	orr.w	r2, r0, r2
 80040fa:	ea82 0209 	eor.w	r2, r2, r9
 80040fe:	ea80 0008 	eor.w	r0, r0, r8
 8004102:	ea40 0009 	orr.w	r0, r0, r9
 8004106:	ea80 000a 	eor.w	r0, r0, sl
 800410a:	ea85 050a 	eor.w	r5, r5, sl
 800410e:	ea45 0508 	orr.w	r5, r5, r8
 8004112:	ea85 050b 	eor.w	r5, r5, fp
 8004116:	ea28 080a 	bic.w	r8, r8, sl
 800411a:	ea88 080b 	eor.w	r8, r8, fp
 800411e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004122:	ea8c 0c09 	eor.w	ip, ip, r9
 8004126:	ea86 0904 	eor.w	r9, r6, r4
 800412a:	ea8e 0a03 	eor.w	sl, lr, r3
 800412e:	ea81 0b03 	eor.w	fp, r1, r3
 8004132:	ea6f 0303 	mvn.w	r3, r3
 8004136:	ea41 0303 	orr.w	r3, r1, r3
 800413a:	ea83 0309 	eor.w	r3, r3, r9
 800413e:	ea81 0106 	eor.w	r1, r1, r6
 8004142:	ea41 0109 	orr.w	r1, r1, r9
 8004146:	ea81 010a 	eor.w	r1, r1, sl
 800414a:	ea84 040a 	eor.w	r4, r4, sl
 800414e:	ea44 0406 	orr.w	r4, r4, r6
 8004152:	ea84 040b 	eor.w	r4, r4, fp
 8004156:	ea26 060a 	bic.w	r6, r6, sl
 800415a:	ea86 060b 	eor.w	r6, r6, fp
 800415e:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004162:	ea8e 0e09 	eor.w	lr, lr, r9
 8004166:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 800416a:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 800416e:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004172:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004176:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 800417a:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800417e:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004182:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004186:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 800418a:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800418e:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004192:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004196:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 800419a:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800419e:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 80041a2:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 80041a6:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 80041aa:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 80041ae:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 80041b2:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 80041b6:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 80041ba:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 80041be:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 80041c2:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 80041c6:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 80041ca:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 80041ce:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 80041d2:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 80041d6:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 80041da:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 80041de:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 80041e2:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 80041e6:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 80041ea:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 80041ee:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 80041f2:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 80041f6:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 80041fa:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 80041fe:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004202:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8004206:	f8c7 b000 	str.w	fp, [r7]
 800420a:	f8c7 a004 	str.w	sl, [r7, #4]
 800420e:	f8c7 9008 	str.w	r9, [r7, #8]
 8004212:	f8c7 800c 	str.w	r8, [r7, #12]
 8004216:	f8c7 e010 	str.w	lr, [r7, #16]
 800421a:	f8c7 c018 	str.w	ip, [r7, #24]
 800421e:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004222:	f8c7 e01c 	str.w	lr, [r7, #28]
 8004226:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800422a:	f8c7 8038 	str.w	r8, [r7, #56]	@ 0x38
 800422e:	63fe      	str	r6, [r7, #60]	@ 0x3c
 8004230:	633d      	str	r5, [r7, #48]	@ 0x30
 8004232:	637c      	str	r4, [r7, #52]	@ 0x34
 8004234:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004236:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004238:	623a      	str	r2, [r7, #32]
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
 800423c:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004240:	f8c7 90b4 	str.w	r9, [r7, #180]	@ 0xb4
 8004244:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004248:	f8c7 a0b0 	str.w	sl, [r7, #176]	@ 0xb0
 800424c:	f8d7 b000 	ldr.w	fp, [r7]
 8004250:	f8c7 b0ac 	str.w	fp, [r7, #172]	@ 0xac
  ROUND5(x1, x2, x3, x4, x0, RC3);
 8004254:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8004258:	f8c7 c010 	str.w	ip, [r7, #16]
 800425c:	f8d7 e034 	ldr.w	lr, [r7, #52]	@ 0x34
 8004260:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004264:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 8004268:	f8c7 8008 	str.w	r8, [r7, #8]
 800426c:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 800426e:	6a3d      	ldr	r5, [r7, #32]
 8004270:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004272:	69b8      	ldr	r0, [r7, #24]
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800427e:	f8c7 c004 	str.w	ip, [r7, #4]
 8004282:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004286:	f8c7 e010 	str.w	lr, [r7, #16]
 800428a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800428e:	f8c7 800c 	str.w	r8, [r7, #12]
 8004292:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004296:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800429a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800429e:	f085 05c3 	eor.w	r5, r5, #195	@ 0xc3
 80042a2:	ea88 0905 	eor.w	r9, r8, r5
 80042a6:	ea8c 0a02 	eor.w	sl, ip, r2
 80042aa:	ea80 0b02 	eor.w	fp, r0, r2
 80042ae:	ea6f 0202 	mvn.w	r2, r2
 80042b2:	ea40 0202 	orr.w	r2, r0, r2
 80042b6:	ea82 0209 	eor.w	r2, r2, r9
 80042ba:	ea80 0008 	eor.w	r0, r0, r8
 80042be:	ea40 0009 	orr.w	r0, r0, r9
 80042c2:	ea80 000a 	eor.w	r0, r0, sl
 80042c6:	ea85 050a 	eor.w	r5, r5, sl
 80042ca:	ea45 0508 	orr.w	r5, r5, r8
 80042ce:	ea85 050b 	eor.w	r5, r5, fp
 80042d2:	ea28 080a 	bic.w	r8, r8, sl
 80042d6:	ea88 080b 	eor.w	r8, r8, fp
 80042da:	ea4c 0c0b 	orr.w	ip, ip, fp
 80042de:	ea8c 0c09 	eor.w	ip, ip, r9
 80042e2:	ea86 0904 	eor.w	r9, r6, r4
 80042e6:	ea8e 0a03 	eor.w	sl, lr, r3
 80042ea:	ea81 0b03 	eor.w	fp, r1, r3
 80042ee:	ea6f 0303 	mvn.w	r3, r3
 80042f2:	ea41 0303 	orr.w	r3, r1, r3
 80042f6:	ea83 0309 	eor.w	r3, r3, r9
 80042fa:	ea81 0106 	eor.w	r1, r1, r6
 80042fe:	ea41 0109 	orr.w	r1, r1, r9
 8004302:	ea81 010a 	eor.w	r1, r1, sl
 8004306:	ea84 040a 	eor.w	r4, r4, sl
 800430a:	ea44 0406 	orr.w	r4, r4, r6
 800430e:	ea84 040b 	eor.w	r4, r4, fp
 8004312:	ea26 060a 	bic.w	r6, r6, sl
 8004316:	ea86 060b 	eor.w	r6, r6, fp
 800431a:	ea4e 0e0b 	orr.w	lr, lr, fp
 800431e:	ea8e 0e09 	eor.w	lr, lr, r9
 8004322:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8004326:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 800432a:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 800432e:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004332:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8004336:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800433a:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 800433e:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004342:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004346:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800434a:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 800434e:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004352:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004356:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800435a:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 800435e:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004362:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004366:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 800436a:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 800436e:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8004372:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004376:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 800437a:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 800437e:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8004382:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004386:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 800438a:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 800438e:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8004392:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004396:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 800439a:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 800439e:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 80043a2:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 80043a6:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 80043aa:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 80043ae:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 80043b2:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 80043b6:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 80043ba:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 80043be:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 80043c2:	f8c7 b000 	str.w	fp, [r7]
 80043c6:	f8c7 a004 	str.w	sl, [r7, #4]
 80043ca:	f8c7 9008 	str.w	r9, [r7, #8]
 80043ce:	f8c7 800c 	str.w	r8, [r7, #12]
 80043d2:	f8c7 e010 	str.w	lr, [r7, #16]
 80043d6:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 80043da:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80043de:	f8c7 e034 	str.w	lr, [r7, #52]	@ 0x34
 80043e2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80043e6:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 80043ea:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80043ec:	623d      	str	r5, [r7, #32]
 80043ee:	627c      	str	r4, [r7, #36]	@ 0x24
 80043f0:	61b8      	str	r0, [r7, #24]
 80043f2:	61f9      	str	r1, [r7, #28]
 80043f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80043fc:	f8c7 90a8 	str.w	r9, [r7, #168]	@ 0xa8
 8004400:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004404:	f8c7 a0a4 	str.w	sl, [r7, #164]	@ 0xa4
 8004408:	f8d7 b000 	ldr.w	fp, [r7]
 800440c:	f8c7 b0a0 	str.w	fp, [r7, #160]	@ 0xa0
  ROUND5(x3, x4, x0, x1, x2, RC4);
 8004410:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8004414:	f8c7 c010 	str.w	ip, [r7, #16]
 8004418:	f8d7 e024 	ldr.w	lr, [r7, #36]	@ 0x24
 800441c:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004420:	f8d7 8018 	ldr.w	r8, [r7, #24]
 8004424:	f8c7 8008 	str.w	r8, [r7, #8]
 8004428:	69fe      	ldr	r6, [r7, #28]
 800442a:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800442c:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800442e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004430:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800443a:	f8c7 c004 	str.w	ip, [r7, #4]
 800443e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004442:	f8c7 e010 	str.w	lr, [r7, #16]
 8004446:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800444a:	f8c7 800c 	str.w	r8, [r7, #12]
 800444e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004452:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004456:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800445a:	f085 05b4 	eor.w	r5, r5, #180	@ 0xb4
 800445e:	ea88 0905 	eor.w	r9, r8, r5
 8004462:	ea8c 0a02 	eor.w	sl, ip, r2
 8004466:	ea80 0b02 	eor.w	fp, r0, r2
 800446a:	ea6f 0202 	mvn.w	r2, r2
 800446e:	ea40 0202 	orr.w	r2, r0, r2
 8004472:	ea82 0209 	eor.w	r2, r2, r9
 8004476:	ea80 0008 	eor.w	r0, r0, r8
 800447a:	ea40 0009 	orr.w	r0, r0, r9
 800447e:	ea80 000a 	eor.w	r0, r0, sl
 8004482:	ea85 050a 	eor.w	r5, r5, sl
 8004486:	ea45 0508 	orr.w	r5, r5, r8
 800448a:	ea85 050b 	eor.w	r5, r5, fp
 800448e:	ea28 080a 	bic.w	r8, r8, sl
 8004492:	ea88 080b 	eor.w	r8, r8, fp
 8004496:	ea4c 0c0b 	orr.w	ip, ip, fp
 800449a:	ea8c 0c09 	eor.w	ip, ip, r9
 800449e:	ea86 0904 	eor.w	r9, r6, r4
 80044a2:	ea8e 0a03 	eor.w	sl, lr, r3
 80044a6:	ea81 0b03 	eor.w	fp, r1, r3
 80044aa:	ea6f 0303 	mvn.w	r3, r3
 80044ae:	ea41 0303 	orr.w	r3, r1, r3
 80044b2:	ea83 0309 	eor.w	r3, r3, r9
 80044b6:	ea81 0106 	eor.w	r1, r1, r6
 80044ba:	ea41 0109 	orr.w	r1, r1, r9
 80044be:	ea81 010a 	eor.w	r1, r1, sl
 80044c2:	ea84 040a 	eor.w	r4, r4, sl
 80044c6:	ea44 0406 	orr.w	r4, r4, r6
 80044ca:	ea84 040b 	eor.w	r4, r4, fp
 80044ce:	ea26 060a 	bic.w	r6, r6, sl
 80044d2:	ea86 060b 	eor.w	r6, r6, fp
 80044d6:	ea4e 0e0b 	orr.w	lr, lr, fp
 80044da:	ea8e 0e09 	eor.w	lr, lr, r9
 80044de:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 80044e2:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 80044e6:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 80044ea:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 80044ee:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 80044f2:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 80044f6:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 80044fa:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 80044fe:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004502:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8004506:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 800450a:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 800450e:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004512:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8004516:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 800451a:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 800451e:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004522:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8004526:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 800452a:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 800452e:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004532:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004536:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 800453a:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 800453e:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004542:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004546:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 800454a:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 800454e:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004552:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004556:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 800455a:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 800455e:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8004562:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004566:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 800456a:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 800456e:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8004572:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004576:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 800457a:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 800457e:	f8c7 b000 	str.w	fp, [r7]
 8004582:	f8c7 a004 	str.w	sl, [r7, #4]
 8004586:	f8c7 9008 	str.w	r9, [r7, #8]
 800458a:	f8c7 800c 	str.w	r8, [r7, #12]
 800458e:	f8c7 e010 	str.w	lr, [r7, #16]
 8004592:	f8c7 c020 	str.w	ip, [r7, #32]
 8004596:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800459a:	f8c7 e024 	str.w	lr, [r7, #36]	@ 0x24
 800459e:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80045a2:	f8c7 8018 	str.w	r8, [r7, #24]
 80045a6:	61fe      	str	r6, [r7, #28]
 80045a8:	63bd      	str	r5, [r7, #56]	@ 0x38
 80045aa:	63fc      	str	r4, [r7, #60]	@ 0x3c
 80045ac:	6338      	str	r0, [r7, #48]	@ 0x30
 80045ae:	6379      	str	r1, [r7, #52]	@ 0x34
 80045b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b4:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80045b8:	f8c7 909c 	str.w	r9, [r7, #156]	@ 0x9c
 80045bc:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80045c0:	f8c7 a098 	str.w	sl, [r7, #152]	@ 0x98
 80045c4:	f8d7 b000 	ldr.w	fp, [r7]
 80045c8:	f8c7 b094 	str.w	fp, [r7, #148]	@ 0x94
  ROUND5(x0, x1, x2, x3, x4, RC5);
 80045cc:	f8d7 c038 	ldr.w	ip, [r7, #56]	@ 0x38
 80045d0:	f8c7 c010 	str.w	ip, [r7, #16]
 80045d4:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 80045d8:	f8c7 e00c 	str.w	lr, [r7, #12]
 80045dc:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 80045e0:	f8c7 8008 	str.w	r8, [r7, #8]
 80045e4:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 80045e6:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 80045e8:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80045ea:	6a38      	ldr	r0, [r7, #32]
 80045ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80045f6:	f8c7 c004 	str.w	ip, [r7, #4]
 80045fa:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80045fe:	f8c7 e010 	str.w	lr, [r7, #16]
 8004602:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8004606:	f8c7 800c 	str.w	r8, [r7, #12]
 800460a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800460e:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004612:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004616:	f085 05a5 	eor.w	r5, r5, #165	@ 0xa5
 800461a:	ea88 0905 	eor.w	r9, r8, r5
 800461e:	ea8c 0a02 	eor.w	sl, ip, r2
 8004622:	ea80 0b02 	eor.w	fp, r0, r2
 8004626:	ea6f 0202 	mvn.w	r2, r2
 800462a:	ea40 0202 	orr.w	r2, r0, r2
 800462e:	ea82 0209 	eor.w	r2, r2, r9
 8004632:	ea80 0008 	eor.w	r0, r0, r8
 8004636:	ea40 0009 	orr.w	r0, r0, r9
 800463a:	ea80 000a 	eor.w	r0, r0, sl
 800463e:	ea85 050a 	eor.w	r5, r5, sl
 8004642:	ea45 0508 	orr.w	r5, r5, r8
 8004646:	ea85 050b 	eor.w	r5, r5, fp
 800464a:	ea28 080a 	bic.w	r8, r8, sl
 800464e:	ea88 080b 	eor.w	r8, r8, fp
 8004652:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004656:	ea8c 0c09 	eor.w	ip, ip, r9
 800465a:	ea86 0904 	eor.w	r9, r6, r4
 800465e:	ea8e 0a03 	eor.w	sl, lr, r3
 8004662:	ea81 0b03 	eor.w	fp, r1, r3
 8004666:	ea6f 0303 	mvn.w	r3, r3
 800466a:	ea41 0303 	orr.w	r3, r1, r3
 800466e:	ea83 0309 	eor.w	r3, r3, r9
 8004672:	ea81 0106 	eor.w	r1, r1, r6
 8004676:	ea41 0109 	orr.w	r1, r1, r9
 800467a:	ea81 010a 	eor.w	r1, r1, sl
 800467e:	ea84 040a 	eor.w	r4, r4, sl
 8004682:	ea44 0406 	orr.w	r4, r4, r6
 8004686:	ea84 040b 	eor.w	r4, r4, fp
 800468a:	ea26 060a 	bic.w	r6, r6, sl
 800468e:	ea86 060b 	eor.w	r6, r6, fp
 8004692:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004696:	ea8e 0e09 	eor.w	lr, lr, r9
 800469a:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 800469e:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 80046a2:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 80046a6:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 80046aa:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 80046ae:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 80046b2:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 80046b6:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 80046ba:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 80046be:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 80046c2:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 80046c6:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 80046ca:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 80046ce:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 80046d2:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 80046d6:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 80046da:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 80046de:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 80046e2:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 80046e6:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 80046ea:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 80046ee:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 80046f2:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 80046f6:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 80046fa:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 80046fe:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004702:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004706:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 800470a:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 800470e:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004712:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004716:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 800471a:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 800471e:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004722:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004726:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 800472a:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 800472e:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004732:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004736:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 800473a:	f8c7 b000 	str.w	fp, [r7]
 800473e:	f8c7 a004 	str.w	sl, [r7, #4]
 8004742:	f8c7 9008 	str.w	r9, [r7, #8]
 8004746:	f8c7 800c 	str.w	r8, [r7, #12]
 800474a:	f8c7 e010 	str.w	lr, [r7, #16]
 800474e:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8004752:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004756:	f8c7 e03c 	str.w	lr, [r7, #60]	@ 0x3c
 800475a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800475e:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
 8004762:	637e      	str	r6, [r7, #52]	@ 0x34
 8004764:	62bd      	str	r5, [r7, #40]	@ 0x28
 8004766:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8004768:	6238      	str	r0, [r7, #32]
 800476a:	6279      	str	r1, [r7, #36]	@ 0x24
 800476c:	61ba      	str	r2, [r7, #24]
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004774:	f8c7 9090 	str.w	r9, [r7, #144]	@ 0x90
 8004778:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800477c:	f8c7 a08c 	str.w	sl, [r7, #140]	@ 0x8c
 8004780:	f8d7 b000 	ldr.w	fp, [r7]
 8004784:	f8c7 b088 	str.w	fp, [r7, #136]	@ 0x88
  ROUND5(x2, x3, x4, x0, x1, RC6);
 8004788:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800478c:	f8c7 c010 	str.w	ip, [r7, #16]
 8004790:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8004794:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004798:	f8d7 8020 	ldr.w	r8, [r7, #32]
 800479c:	f8c7 8008 	str.w	r8, [r7, #8]
 80047a0:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80047a2:	69bd      	ldr	r5, [r7, #24]
 80047a4:	69fc      	ldr	r4, [r7, #28]
 80047a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80047b2:	f8c7 c004 	str.w	ip, [r7, #4]
 80047b6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80047ba:	f8c7 e010 	str.w	lr, [r7, #16]
 80047be:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80047c2:	f8c7 800c 	str.w	r8, [r7, #12]
 80047c6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80047ca:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80047ce:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80047d2:	f085 0596 	eor.w	r5, r5, #150	@ 0x96
 80047d6:	ea88 0905 	eor.w	r9, r8, r5
 80047da:	ea8c 0a02 	eor.w	sl, ip, r2
 80047de:	ea80 0b02 	eor.w	fp, r0, r2
 80047e2:	ea6f 0202 	mvn.w	r2, r2
 80047e6:	ea40 0202 	orr.w	r2, r0, r2
 80047ea:	ea82 0209 	eor.w	r2, r2, r9
 80047ee:	ea80 0008 	eor.w	r0, r0, r8
 80047f2:	ea40 0009 	orr.w	r0, r0, r9
 80047f6:	ea80 000a 	eor.w	r0, r0, sl
 80047fa:	ea85 050a 	eor.w	r5, r5, sl
 80047fe:	ea45 0508 	orr.w	r5, r5, r8
 8004802:	ea85 050b 	eor.w	r5, r5, fp
 8004806:	ea28 080a 	bic.w	r8, r8, sl
 800480a:	ea88 080b 	eor.w	r8, r8, fp
 800480e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004812:	ea8c 0c09 	eor.w	ip, ip, r9
 8004816:	ea86 0904 	eor.w	r9, r6, r4
 800481a:	ea8e 0a03 	eor.w	sl, lr, r3
 800481e:	ea81 0b03 	eor.w	fp, r1, r3
 8004822:	ea6f 0303 	mvn.w	r3, r3
 8004826:	ea41 0303 	orr.w	r3, r1, r3
 800482a:	ea83 0309 	eor.w	r3, r3, r9
 800482e:	ea81 0106 	eor.w	r1, r1, r6
 8004832:	ea41 0109 	orr.w	r1, r1, r9
 8004836:	ea81 010a 	eor.w	r1, r1, sl
 800483a:	ea84 040a 	eor.w	r4, r4, sl
 800483e:	ea44 0406 	orr.w	r4, r4, r6
 8004842:	ea84 040b 	eor.w	r4, r4, fp
 8004846:	ea26 060a 	bic.w	r6, r6, sl
 800484a:	ea86 060b 	eor.w	r6, r6, fp
 800484e:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004852:	ea8e 0e09 	eor.w	lr, lr, r9
 8004856:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 800485a:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 800485e:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004862:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004866:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 800486a:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800486e:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004872:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004876:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 800487a:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800487e:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004882:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004886:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 800488a:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800488e:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8004892:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004896:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 800489a:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 800489e:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 80048a2:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 80048a6:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 80048aa:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 80048ae:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 80048b2:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 80048b6:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 80048ba:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 80048be:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 80048c2:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 80048c6:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 80048ca:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 80048ce:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 80048d2:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 80048d6:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 80048da:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 80048de:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 80048e2:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 80048e6:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 80048ea:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 80048ee:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 80048f2:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 80048f6:	f8c7 b000 	str.w	fp, [r7]
 80048fa:	f8c7 a004 	str.w	sl, [r7, #4]
 80048fe:	f8c7 9008 	str.w	r9, [r7, #8]
 8004902:	f8c7 800c 	str.w	r8, [r7, #12]
 8004906:	f8c7 e010 	str.w	lr, [r7, #16]
 800490a:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800490e:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004912:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 8004916:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800491a:	f8c7 8020 	str.w	r8, [r7, #32]
 800491e:	627e      	str	r6, [r7, #36]	@ 0x24
 8004920:	61bd      	str	r5, [r7, #24]
 8004922:	61fc      	str	r4, [r7, #28]
 8004924:	63b8      	str	r0, [r7, #56]	@ 0x38
 8004926:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004928:	633a      	str	r2, [r7, #48]	@ 0x30
 800492a:	637b      	str	r3, [r7, #52]	@ 0x34
 800492c:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004930:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 8004934:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004938:	f8c7 a080 	str.w	sl, [r7, #128]	@ 0x80
 800493c:	f8d7 b000 	ldr.w	fp, [r7]
 8004940:	f8c7 b07c 	str.w	fp, [r7, #124]	@ 0x7c
  ROUND5(x4, x0, x1, x2, x3, RC7);
 8004944:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8004948:	f8c7 c010 	str.w	ip, [r7, #16]
 800494c:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8004950:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004954:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 8004958:	f8c7 8008 	str.w	r8, [r7, #8]
 800495c:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800495e:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004960:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8004962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800496e:	f8c7 c004 	str.w	ip, [r7, #4]
 8004972:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004976:	f8c7 e010 	str.w	lr, [r7, #16]
 800497a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800497e:	f8c7 800c 	str.w	r8, [r7, #12]
 8004982:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004986:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800498a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800498e:	f085 0587 	eor.w	r5, r5, #135	@ 0x87
 8004992:	ea88 0905 	eor.w	r9, r8, r5
 8004996:	ea8c 0a02 	eor.w	sl, ip, r2
 800499a:	ea80 0b02 	eor.w	fp, r0, r2
 800499e:	ea6f 0202 	mvn.w	r2, r2
 80049a2:	ea40 0202 	orr.w	r2, r0, r2
 80049a6:	ea82 0209 	eor.w	r2, r2, r9
 80049aa:	ea80 0008 	eor.w	r0, r0, r8
 80049ae:	ea40 0009 	orr.w	r0, r0, r9
 80049b2:	ea80 000a 	eor.w	r0, r0, sl
 80049b6:	ea85 050a 	eor.w	r5, r5, sl
 80049ba:	ea45 0508 	orr.w	r5, r5, r8
 80049be:	ea85 050b 	eor.w	r5, r5, fp
 80049c2:	ea28 080a 	bic.w	r8, r8, sl
 80049c6:	ea88 080b 	eor.w	r8, r8, fp
 80049ca:	ea4c 0c0b 	orr.w	ip, ip, fp
 80049ce:	ea8c 0c09 	eor.w	ip, ip, r9
 80049d2:	ea86 0904 	eor.w	r9, r6, r4
 80049d6:	ea8e 0a03 	eor.w	sl, lr, r3
 80049da:	ea81 0b03 	eor.w	fp, r1, r3
 80049de:	ea6f 0303 	mvn.w	r3, r3
 80049e2:	ea41 0303 	orr.w	r3, r1, r3
 80049e6:	ea83 0309 	eor.w	r3, r3, r9
 80049ea:	ea81 0106 	eor.w	r1, r1, r6
 80049ee:	ea41 0109 	orr.w	r1, r1, r9
 80049f2:	ea81 010a 	eor.w	r1, r1, sl
 80049f6:	ea84 040a 	eor.w	r4, r4, sl
 80049fa:	ea44 0406 	orr.w	r4, r4, r6
 80049fe:	ea84 040b 	eor.w	r4, r4, fp
 8004a02:	ea26 060a 	bic.w	r6, r6, sl
 8004a06:	ea86 060b 	eor.w	r6, r6, fp
 8004a0a:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004a0e:	ea8e 0e09 	eor.w	lr, lr, r9
 8004a12:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8004a16:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8004a1a:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004a1e:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004a22:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8004a26:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8004a2a:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004a2e:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004a32:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004a36:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8004a3a:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004a3e:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004a42:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004a46:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8004a4a:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8004a4e:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004a52:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004a56:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8004a5a:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8004a5e:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8004a62:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004a66:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004a6a:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8004a6e:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8004a72:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004a76:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004a7a:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004a7e:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8004a82:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004a86:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004a8a:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004a8e:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8004a92:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8004a96:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004a9a:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004a9e:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8004aa2:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8004aa6:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004aaa:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004aae:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8004ab2:	f8c7 b000 	str.w	fp, [r7]
 8004ab6:	f8c7 a004 	str.w	sl, [r7, #4]
 8004aba:	f8c7 9008 	str.w	r9, [r7, #8]
 8004abe:	f8c7 800c 	str.w	r8, [r7, #12]
 8004ac2:	f8c7 e010 	str.w	lr, [r7, #16]
 8004ac6:	f8c7 c018 	str.w	ip, [r7, #24]
 8004aca:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004ace:	f8c7 e01c 	str.w	lr, [r7, #28]
 8004ad2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004ad6:	f8c7 8038 	str.w	r8, [r7, #56]	@ 0x38
 8004ada:	63fe      	str	r6, [r7, #60]	@ 0x3c
 8004adc:	633d      	str	r5, [r7, #48]	@ 0x30
 8004ade:	637c      	str	r4, [r7, #52]	@ 0x34
 8004ae0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004ae2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ae4:	623a      	str	r2, [r7, #32]
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004aec:	f8c7 9078 	str.w	r9, [r7, #120]	@ 0x78
 8004af0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004af4:	f8c7 a074 	str.w	sl, [r7, #116]	@ 0x74
 8004af8:	f8d7 b000 	ldr.w	fp, [r7]
 8004afc:	f8c7 b070 	str.w	fp, [r7, #112]	@ 0x70
  ROUND5(x1, x2, x3, x4, x0, RC8);
 8004b00:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8004b04:	f8c7 c010 	str.w	ip, [r7, #16]
 8004b08:	f8d7 e034 	ldr.w	lr, [r7, #52]	@ 0x34
 8004b0c:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004b10:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 8004b14:	f8c7 8008 	str.w	r8, [r7, #8]
 8004b18:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8004b1a:	6a3d      	ldr	r5, [r7, #32]
 8004b1c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004b1e:	69b8      	ldr	r0, [r7, #24]
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b26:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8004b2a:	f8c7 c004 	str.w	ip, [r7, #4]
 8004b2e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004b32:	f8c7 e010 	str.w	lr, [r7, #16]
 8004b36:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8004b3a:	f8c7 800c 	str.w	r8, [r7, #12]
 8004b3e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004b42:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004b46:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004b4a:	f085 0578 	eor.w	r5, r5, #120	@ 0x78
 8004b4e:	ea88 0905 	eor.w	r9, r8, r5
 8004b52:	ea8c 0a02 	eor.w	sl, ip, r2
 8004b56:	ea80 0b02 	eor.w	fp, r0, r2
 8004b5a:	ea6f 0202 	mvn.w	r2, r2
 8004b5e:	ea40 0202 	orr.w	r2, r0, r2
 8004b62:	ea82 0209 	eor.w	r2, r2, r9
 8004b66:	ea80 0008 	eor.w	r0, r0, r8
 8004b6a:	ea40 0009 	orr.w	r0, r0, r9
 8004b6e:	ea80 000a 	eor.w	r0, r0, sl
 8004b72:	ea85 050a 	eor.w	r5, r5, sl
 8004b76:	ea45 0508 	orr.w	r5, r5, r8
 8004b7a:	ea85 050b 	eor.w	r5, r5, fp
 8004b7e:	ea28 080a 	bic.w	r8, r8, sl
 8004b82:	ea88 080b 	eor.w	r8, r8, fp
 8004b86:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004b8a:	ea8c 0c09 	eor.w	ip, ip, r9
 8004b8e:	ea86 0904 	eor.w	r9, r6, r4
 8004b92:	ea8e 0a03 	eor.w	sl, lr, r3
 8004b96:	ea81 0b03 	eor.w	fp, r1, r3
 8004b9a:	ea6f 0303 	mvn.w	r3, r3
 8004b9e:	ea41 0303 	orr.w	r3, r1, r3
 8004ba2:	ea83 0309 	eor.w	r3, r3, r9
 8004ba6:	ea81 0106 	eor.w	r1, r1, r6
 8004baa:	ea41 0109 	orr.w	r1, r1, r9
 8004bae:	ea81 010a 	eor.w	r1, r1, sl
 8004bb2:	ea84 040a 	eor.w	r4, r4, sl
 8004bb6:	ea44 0406 	orr.w	r4, r4, r6
 8004bba:	ea84 040b 	eor.w	r4, r4, fp
 8004bbe:	ea26 060a 	bic.w	r6, r6, sl
 8004bc2:	ea86 060b 	eor.w	r6, r6, fp
 8004bc6:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004bca:	ea8e 0e09 	eor.w	lr, lr, r9
 8004bce:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8004bd2:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8004bd6:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004bda:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004bde:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8004be2:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8004be6:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004bea:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004bee:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004bf2:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8004bf6:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004bfa:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004bfe:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004c02:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8004c06:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8004c0a:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004c0e:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004c12:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8004c16:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8004c1a:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8004c1e:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004c22:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004c26:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8004c2a:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8004c2e:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004c32:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004c36:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004c3a:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8004c3e:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004c42:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004c46:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004c4a:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8004c4e:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8004c52:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004c56:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004c5a:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8004c5e:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8004c62:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004c66:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004c6a:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8004c6e:	f8c7 b000 	str.w	fp, [r7]
 8004c72:	f8c7 a004 	str.w	sl, [r7, #4]
 8004c76:	f8c7 9008 	str.w	r9, [r7, #8]
 8004c7a:	f8c7 800c 	str.w	r8, [r7, #12]
 8004c7e:	f8c7 e010 	str.w	lr, [r7, #16]
 8004c82:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 8004c86:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004c8a:	f8c7 e034 	str.w	lr, [r7, #52]	@ 0x34
 8004c8e:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004c92:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8004c96:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8004c98:	623d      	str	r5, [r7, #32]
 8004c9a:	627c      	str	r4, [r7, #36]	@ 0x24
 8004c9c:	61b8      	str	r0, [r7, #24]
 8004c9e:	61f9      	str	r1, [r7, #28]
 8004ca0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca4:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004ca8:	f8c7 906c 	str.w	r9, [r7, #108]	@ 0x6c
 8004cac:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004cb0:	f8c7 a068 	str.w	sl, [r7, #104]	@ 0x68
 8004cb4:	f8d7 b000 	ldr.w	fp, [r7]
 8004cb8:	f8c7 b064 	str.w	fp, [r7, #100]	@ 0x64
  ROUND5(x3, x4, x0, x1, x2, RC9);
 8004cbc:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8004cc0:	f8c7 c010 	str.w	ip, [r7, #16]
 8004cc4:	f8d7 e024 	ldr.w	lr, [r7, #36]	@ 0x24
 8004cc8:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004ccc:	f8d7 8018 	ldr.w	r8, [r7, #24]
 8004cd0:	f8c7 8008 	str.w	r8, [r7, #8]
 8004cd4:	69fe      	ldr	r6, [r7, #28]
 8004cd6:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004cd8:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cdc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8004ce6:	f8c7 c004 	str.w	ip, [r7, #4]
 8004cea:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004cee:	f8c7 e010 	str.w	lr, [r7, #16]
 8004cf2:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8004cf6:	f8c7 800c 	str.w	r8, [r7, #12]
 8004cfa:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004cfe:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004d02:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004d06:	f085 0569 	eor.w	r5, r5, #105	@ 0x69
 8004d0a:	ea88 0905 	eor.w	r9, r8, r5
 8004d0e:	ea8c 0a02 	eor.w	sl, ip, r2
 8004d12:	ea80 0b02 	eor.w	fp, r0, r2
 8004d16:	ea6f 0202 	mvn.w	r2, r2
 8004d1a:	ea40 0202 	orr.w	r2, r0, r2
 8004d1e:	ea82 0209 	eor.w	r2, r2, r9
 8004d22:	ea80 0008 	eor.w	r0, r0, r8
 8004d26:	ea40 0009 	orr.w	r0, r0, r9
 8004d2a:	ea80 000a 	eor.w	r0, r0, sl
 8004d2e:	ea85 050a 	eor.w	r5, r5, sl
 8004d32:	ea45 0508 	orr.w	r5, r5, r8
 8004d36:	ea85 050b 	eor.w	r5, r5, fp
 8004d3a:	ea28 080a 	bic.w	r8, r8, sl
 8004d3e:	ea88 080b 	eor.w	r8, r8, fp
 8004d42:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004d46:	ea8c 0c09 	eor.w	ip, ip, r9
 8004d4a:	ea86 0904 	eor.w	r9, r6, r4
 8004d4e:	ea8e 0a03 	eor.w	sl, lr, r3
 8004d52:	ea81 0b03 	eor.w	fp, r1, r3
 8004d56:	ea6f 0303 	mvn.w	r3, r3
 8004d5a:	ea41 0303 	orr.w	r3, r1, r3
 8004d5e:	ea83 0309 	eor.w	r3, r3, r9
 8004d62:	ea81 0106 	eor.w	r1, r1, r6
 8004d66:	ea41 0109 	orr.w	r1, r1, r9
 8004d6a:	ea81 010a 	eor.w	r1, r1, sl
 8004d6e:	ea84 040a 	eor.w	r4, r4, sl
 8004d72:	ea44 0406 	orr.w	r4, r4, r6
 8004d76:	ea84 040b 	eor.w	r4, r4, fp
 8004d7a:	ea26 060a 	bic.w	r6, r6, sl
 8004d7e:	ea86 060b 	eor.w	r6, r6, fp
 8004d82:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004d86:	ea8e 0e09 	eor.w	lr, lr, r9
 8004d8a:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8004d8e:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8004d92:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004d96:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004d9a:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8004d9e:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8004da2:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004da6:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004daa:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004dae:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8004db2:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004db6:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004dba:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004dbe:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8004dc2:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8004dc6:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004dca:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004dce:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8004dd2:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8004dd6:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8004dda:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004dde:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004de2:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8004de6:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8004dea:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004dee:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004df2:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004df6:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8004dfa:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004dfe:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004e02:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004e06:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8004e0a:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8004e0e:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004e12:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004e16:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8004e1a:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8004e1e:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004e22:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004e26:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8004e2a:	f8c7 b000 	str.w	fp, [r7]
 8004e2e:	f8c7 a004 	str.w	sl, [r7, #4]
 8004e32:	f8c7 9008 	str.w	r9, [r7, #8]
 8004e36:	f8c7 800c 	str.w	r8, [r7, #12]
 8004e3a:	f8c7 e010 	str.w	lr, [r7, #16]
 8004e3e:	f8c7 c020 	str.w	ip, [r7, #32]
 8004e42:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004e46:	f8c7 e024 	str.w	lr, [r7, #36]	@ 0x24
 8004e4a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004e4e:	f8c7 8018 	str.w	r8, [r7, #24]
 8004e52:	61fe      	str	r6, [r7, #28]
 8004e54:	63bd      	str	r5, [r7, #56]	@ 0x38
 8004e56:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8004e58:	6338      	str	r0, [r7, #48]	@ 0x30
 8004e5a:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e60:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004e64:	f8c7 9060 	str.w	r9, [r7, #96]	@ 0x60
 8004e68:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004e6c:	f8c7 a05c 	str.w	sl, [r7, #92]	@ 0x5c
 8004e70:	f8d7 b000 	ldr.w	fp, [r7]
 8004e74:	f8c7 b058 	str.w	fp, [r7, #88]	@ 0x58
#if !ASCON_INLINE_PERM
  ROUND5(x0, x1, x2, x3, x4, RCa);
 8004e78:	f8d7 c038 	ldr.w	ip, [r7, #56]	@ 0x38
 8004e7c:	f8c7 c010 	str.w	ip, [r7, #16]
 8004e80:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 8004e84:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004e88:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 8004e8c:	f8c7 8008 	str.w	r8, [r7, #8]
 8004e90:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004e92:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8004e94:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8004ea2:	f8c7 c004 	str.w	ip, [r7, #4]
 8004ea6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004eaa:	f8c7 e010 	str.w	lr, [r7, #16]
 8004eae:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8004eb2:	f8c7 800c 	str.w	r8, [r7, #12]
 8004eb6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004eba:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8004ebe:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8004ec2:	f085 055a 	eor.w	r5, r5, #90	@ 0x5a
 8004ec6:	ea88 0905 	eor.w	r9, r8, r5
 8004eca:	ea8c 0a02 	eor.w	sl, ip, r2
 8004ece:	ea80 0b02 	eor.w	fp, r0, r2
 8004ed2:	ea6f 0202 	mvn.w	r2, r2
 8004ed6:	ea40 0202 	orr.w	r2, r0, r2
 8004eda:	ea82 0209 	eor.w	r2, r2, r9
 8004ede:	ea80 0008 	eor.w	r0, r0, r8
 8004ee2:	ea40 0009 	orr.w	r0, r0, r9
 8004ee6:	ea80 000a 	eor.w	r0, r0, sl
 8004eea:	ea85 050a 	eor.w	r5, r5, sl
 8004eee:	ea45 0508 	orr.w	r5, r5, r8
 8004ef2:	ea85 050b 	eor.w	r5, r5, fp
 8004ef6:	ea28 080a 	bic.w	r8, r8, sl
 8004efa:	ea88 080b 	eor.w	r8, r8, fp
 8004efe:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004f02:	ea8c 0c09 	eor.w	ip, ip, r9
 8004f06:	ea86 0904 	eor.w	r9, r6, r4
 8004f0a:	ea8e 0a03 	eor.w	sl, lr, r3
 8004f0e:	ea81 0b03 	eor.w	fp, r1, r3
 8004f12:	ea6f 0303 	mvn.w	r3, r3
 8004f16:	ea41 0303 	orr.w	r3, r1, r3
 8004f1a:	ea83 0309 	eor.w	r3, r3, r9
 8004f1e:	ea81 0106 	eor.w	r1, r1, r6
 8004f22:	ea41 0109 	orr.w	r1, r1, r9
 8004f26:	ea81 010a 	eor.w	r1, r1, sl
 8004f2a:	ea84 040a 	eor.w	r4, r4, sl
 8004f2e:	ea44 0406 	orr.w	r4, r4, r6
 8004f32:	ea84 040b 	eor.w	r4, r4, fp
 8004f36:	ea26 060a 	bic.w	r6, r6, sl
 8004f3a:	ea86 060b 	eor.w	r6, r6, fp
 8004f3e:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004f42:	ea8e 0e09 	eor.w	lr, lr, r9
 8004f46:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8004f4a:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8004f4e:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8004f52:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8004f56:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8004f5a:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8004f5e:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8004f62:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8004f66:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8004f6a:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8004f6e:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8004f72:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8004f76:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8004f7a:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8004f7e:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8004f82:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8004f86:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8004f8a:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8004f8e:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8004f92:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8004f96:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8004f9a:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8004f9e:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8004fa2:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8004fa6:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8004faa:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8004fae:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8004fb2:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8004fb6:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8004fba:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8004fbe:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8004fc2:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8004fc6:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8004fca:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8004fce:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8004fd2:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8004fd6:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8004fda:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8004fde:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8004fe2:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8004fe6:	f8c7 b000 	str.w	fp, [r7]
 8004fea:	f8c7 a004 	str.w	sl, [r7, #4]
 8004fee:	f8c7 9008 	str.w	r9, [r7, #8]
 8004ff2:	f8c7 800c 	str.w	r8, [r7, #12]
 8004ff6:	f8c7 e010 	str.w	lr, [r7, #16]
 8004ffa:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8004ffe:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005002:	f8c7 e03c 	str.w	lr, [r7, #60]	@ 0x3c
 8005006:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800500a:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
 800500e:	637e      	str	r6, [r7, #52]	@ 0x34
 8005010:	62bd      	str	r5, [r7, #40]	@ 0x28
 8005012:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8005014:	6238      	str	r0, [r7, #32]
 8005016:	6279      	str	r1, [r7, #36]	@ 0x24
 8005018:	61ba      	str	r2, [r7, #24]
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005020:	f8c7 9054 	str.w	r9, [r7, #84]	@ 0x54
 8005024:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005028:	f8c7 a050 	str.w	sl, [r7, #80]	@ 0x50
 800502c:	f8d7 b000 	ldr.w	fp, [r7]
 8005030:	f8c7 b04c 	str.w	fp, [r7, #76]	@ 0x4c
  ROUND5(x2, x3, x4, x0, x1, RCb);
 8005034:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8005038:	f8c7 c010 	str.w	ip, [r7, #16]
 800503c:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8005040:	f8c7 e00c 	str.w	lr, [r7, #12]
 8005044:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8005048:	f8c7 8008 	str.w	r8, [r7, #8]
 800504c:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800504e:	69bd      	ldr	r5, [r7, #24]
 8005050:	69fc      	ldr	r4, [r7, #28]
 8005052:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800505e:	f8c7 c004 	str.w	ip, [r7, #4]
 8005062:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005066:	f8c7 e010 	str.w	lr, [r7, #16]
 800506a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800506e:	f8c7 800c 	str.w	r8, [r7, #12]
 8005072:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005076:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800507a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800507e:	f085 054b 	eor.w	r5, r5, #75	@ 0x4b
 8005082:	ea88 0905 	eor.w	r9, r8, r5
 8005086:	ea8c 0a02 	eor.w	sl, ip, r2
 800508a:	ea80 0b02 	eor.w	fp, r0, r2
 800508e:	ea6f 0202 	mvn.w	r2, r2
 8005092:	ea40 0202 	orr.w	r2, r0, r2
 8005096:	ea82 0209 	eor.w	r2, r2, r9
 800509a:	ea80 0008 	eor.w	r0, r0, r8
 800509e:	ea40 0009 	orr.w	r0, r0, r9
 80050a2:	ea80 000a 	eor.w	r0, r0, sl
 80050a6:	ea85 050a 	eor.w	r5, r5, sl
 80050aa:	ea45 0508 	orr.w	r5, r5, r8
 80050ae:	ea85 050b 	eor.w	r5, r5, fp
 80050b2:	ea28 080a 	bic.w	r8, r8, sl
 80050b6:	ea88 080b 	eor.w	r8, r8, fp
 80050ba:	ea4c 0c0b 	orr.w	ip, ip, fp
 80050be:	ea8c 0c09 	eor.w	ip, ip, r9
 80050c2:	ea86 0904 	eor.w	r9, r6, r4
 80050c6:	ea8e 0a03 	eor.w	sl, lr, r3
 80050ca:	ea81 0b03 	eor.w	fp, r1, r3
 80050ce:	ea6f 0303 	mvn.w	r3, r3
 80050d2:	ea41 0303 	orr.w	r3, r1, r3
 80050d6:	ea83 0309 	eor.w	r3, r3, r9
 80050da:	ea81 0106 	eor.w	r1, r1, r6
 80050de:	ea41 0109 	orr.w	r1, r1, r9
 80050e2:	ea81 010a 	eor.w	r1, r1, sl
 80050e6:	ea84 040a 	eor.w	r4, r4, sl
 80050ea:	ea44 0406 	orr.w	r4, r4, r6
 80050ee:	ea84 040b 	eor.w	r4, r4, fp
 80050f2:	ea26 060a 	bic.w	r6, r6, sl
 80050f6:	ea86 060b 	eor.w	r6, r6, fp
 80050fa:	ea4e 0e0b 	orr.w	lr, lr, fp
 80050fe:	ea8e 0e09 	eor.w	lr, lr, r9
 8005102:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8005106:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 800510a:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 800510e:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8005112:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8005116:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800511a:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 800511e:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8005122:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8005126:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800512a:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 800512e:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8005132:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8005136:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800513a:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 800513e:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8005142:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8005146:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 800514a:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 800514e:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8005152:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8005156:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 800515a:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 800515e:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8005162:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8005166:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 800516a:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 800516e:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8005172:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8005176:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 800517a:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 800517e:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8005182:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8005186:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 800518a:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 800518e:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8005192:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8005196:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 800519a:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 800519e:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 80051a2:	f8c7 b000 	str.w	fp, [r7]
 80051a6:	f8c7 a004 	str.w	sl, [r7, #4]
 80051aa:	f8c7 9008 	str.w	r9, [r7, #8]
 80051ae:	f8c7 800c 	str.w	r8, [r7, #12]
 80051b2:	f8c7 e010 	str.w	lr, [r7, #16]
 80051b6:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80051ba:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80051be:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 80051c2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80051c6:	f8c7 8020 	str.w	r8, [r7, #32]
 80051ca:	627e      	str	r6, [r7, #36]	@ 0x24
 80051cc:	61bd      	str	r5, [r7, #24]
 80051ce:	61fc      	str	r4, [r7, #28]
 80051d0:	63b8      	str	r0, [r7, #56]	@ 0x38
 80051d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80051d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80051dc:	f8c7 9048 	str.w	r9, [r7, #72]	@ 0x48
 80051e0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80051e4:	f8c7 a044 	str.w	sl, [r7, #68]	@ 0x44
 80051e8:	f8d7 b000 	ldr.w	fp, [r7]
 80051ec:	f8c7 b040 	str.w	fp, [r7, #64]	@ 0x40
  STORESTATE(s, x4, x0, x1, x2, x3);
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	6979      	ldr	r1, [r7, #20]
 80051f6:	e9c1 2300 	strd	r2, r3, [r1]
 80051fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005204:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800520e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	e9c1 2308 	strd	r2, r3, [r1, #32]
#else
  STORESTATE(s, x0, x1, x2, x3, x4);
  ROUND(s, RCa);
  ROUND(s, RCb);
#endif
}
 8005222:	bf00      	nop
 8005224:	37d4      	adds	r7, #212	@ 0xd4
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800522c <_ZL8P6ROUNDSP13ascon_state_t>:
  ROUND(s, RCa);
  ROUND(s, RCb);
#endif
}

forceinline void P6ROUNDS(ascon_state_t* s) {
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	b0a3      	sub	sp, #140	@ 0x8c
 8005232:	af00      	add	r7, sp, #0
 8005234:	6178      	str	r0, [r7, #20]
  word_t x0, x1, x2, x3, x4;
  LOADSTATE(s, x0, x1, x2, x3, x4);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005246:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005250:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800525a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005264:	e9c7 2306 	strd	r2, r3, [r7, #24]
  ROUND5(x0, x1, x2, x3, x4, RC6);
 8005268:	f8d7 c038 	ldr.w	ip, [r7, #56]	@ 0x38
 800526c:	f8c7 c010 	str.w	ip, [r7, #16]
 8005270:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 8005274:	f8c7 e00c 	str.w	lr, [r7, #12]
 8005278:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 800527c:	f8c7 8008 	str.w	r8, [r7, #8]
 8005280:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8005282:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8005284:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8005286:	6a38      	ldr	r0, [r7, #32]
 8005288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005292:	f8c7 c004 	str.w	ip, [r7, #4]
 8005296:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800529a:	f8c7 e010 	str.w	lr, [r7, #16]
 800529e:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80052a2:	f8c7 800c 	str.w	r8, [r7, #12]
 80052a6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80052aa:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80052ae:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80052b2:	f085 0596 	eor.w	r5, r5, #150	@ 0x96
 80052b6:	ea88 0905 	eor.w	r9, r8, r5
 80052ba:	ea8c 0a02 	eor.w	sl, ip, r2
 80052be:	ea80 0b02 	eor.w	fp, r0, r2
 80052c2:	ea6f 0202 	mvn.w	r2, r2
 80052c6:	ea40 0202 	orr.w	r2, r0, r2
 80052ca:	ea82 0209 	eor.w	r2, r2, r9
 80052ce:	ea80 0008 	eor.w	r0, r0, r8
 80052d2:	ea40 0009 	orr.w	r0, r0, r9
 80052d6:	ea80 000a 	eor.w	r0, r0, sl
 80052da:	ea85 050a 	eor.w	r5, r5, sl
 80052de:	ea45 0508 	orr.w	r5, r5, r8
 80052e2:	ea85 050b 	eor.w	r5, r5, fp
 80052e6:	ea28 080a 	bic.w	r8, r8, sl
 80052ea:	ea88 080b 	eor.w	r8, r8, fp
 80052ee:	ea4c 0c0b 	orr.w	ip, ip, fp
 80052f2:	ea8c 0c09 	eor.w	ip, ip, r9
 80052f6:	ea86 0904 	eor.w	r9, r6, r4
 80052fa:	ea8e 0a03 	eor.w	sl, lr, r3
 80052fe:	ea81 0b03 	eor.w	fp, r1, r3
 8005302:	ea6f 0303 	mvn.w	r3, r3
 8005306:	ea41 0303 	orr.w	r3, r1, r3
 800530a:	ea83 0309 	eor.w	r3, r3, r9
 800530e:	ea81 0106 	eor.w	r1, r1, r6
 8005312:	ea41 0109 	orr.w	r1, r1, r9
 8005316:	ea81 010a 	eor.w	r1, r1, sl
 800531a:	ea84 040a 	eor.w	r4, r4, sl
 800531e:	ea44 0406 	orr.w	r4, r4, r6
 8005322:	ea84 040b 	eor.w	r4, r4, fp
 8005326:	ea26 060a 	bic.w	r6, r6, sl
 800532a:	ea86 060b 	eor.w	r6, r6, fp
 800532e:	ea4e 0e0b 	orr.w	lr, lr, fp
 8005332:	ea8e 0e09 	eor.w	lr, lr, r9
 8005336:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 800533a:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 800533e:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8005342:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8005346:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 800534a:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800534e:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8005352:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8005356:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 800535a:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800535e:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8005362:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8005366:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 800536a:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800536e:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8005372:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8005376:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 800537a:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 800537e:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8005382:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8005386:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 800538a:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 800538e:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8005392:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8005396:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 800539a:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 800539e:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 80053a2:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 80053a6:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 80053aa:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 80053ae:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 80053b2:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 80053b6:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 80053ba:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 80053be:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 80053c2:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 80053c6:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 80053ca:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 80053ce:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 80053d2:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 80053d6:	f8c7 b000 	str.w	fp, [r7]
 80053da:	f8c7 a004 	str.w	sl, [r7, #4]
 80053de:	f8c7 9008 	str.w	r9, [r7, #8]
 80053e2:	f8c7 800c 	str.w	r8, [r7, #12]
 80053e6:	f8c7 e010 	str.w	lr, [r7, #16]
 80053ea:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 80053ee:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80053f2:	f8c7 e03c 	str.w	lr, [r7, #60]	@ 0x3c
 80053f6:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80053fa:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
 80053fe:	637e      	str	r6, [r7, #52]	@ 0x34
 8005400:	62bd      	str	r5, [r7, #40]	@ 0x28
 8005402:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8005404:	6238      	str	r0, [r7, #32]
 8005406:	6279      	str	r1, [r7, #36]	@ 0x24
 8005408:	61ba      	str	r2, [r7, #24]
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005410:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 8005414:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005418:	f8c7 a080 	str.w	sl, [r7, #128]	@ 0x80
 800541c:	f8d7 b000 	ldr.w	fp, [r7]
 8005420:	f8c7 b07c 	str.w	fp, [r7, #124]	@ 0x7c
  ROUND5(x2, x3, x4, x0, x1, RC7);
 8005424:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8005428:	f8c7 c010 	str.w	ip, [r7, #16]
 800542c:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8005430:	f8c7 e00c 	str.w	lr, [r7, #12]
 8005434:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8005438:	f8c7 8008 	str.w	r8, [r7, #8]
 800543c:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800543e:	69bd      	ldr	r5, [r7, #24]
 8005440:	69fc      	ldr	r4, [r7, #28]
 8005442:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800544e:	f8c7 c004 	str.w	ip, [r7, #4]
 8005452:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005456:	f8c7 e010 	str.w	lr, [r7, #16]
 800545a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800545e:	f8c7 800c 	str.w	r8, [r7, #12]
 8005462:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005466:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800546a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800546e:	f085 0587 	eor.w	r5, r5, #135	@ 0x87
 8005472:	ea88 0905 	eor.w	r9, r8, r5
 8005476:	ea8c 0a02 	eor.w	sl, ip, r2
 800547a:	ea80 0b02 	eor.w	fp, r0, r2
 800547e:	ea6f 0202 	mvn.w	r2, r2
 8005482:	ea40 0202 	orr.w	r2, r0, r2
 8005486:	ea82 0209 	eor.w	r2, r2, r9
 800548a:	ea80 0008 	eor.w	r0, r0, r8
 800548e:	ea40 0009 	orr.w	r0, r0, r9
 8005492:	ea80 000a 	eor.w	r0, r0, sl
 8005496:	ea85 050a 	eor.w	r5, r5, sl
 800549a:	ea45 0508 	orr.w	r5, r5, r8
 800549e:	ea85 050b 	eor.w	r5, r5, fp
 80054a2:	ea28 080a 	bic.w	r8, r8, sl
 80054a6:	ea88 080b 	eor.w	r8, r8, fp
 80054aa:	ea4c 0c0b 	orr.w	ip, ip, fp
 80054ae:	ea8c 0c09 	eor.w	ip, ip, r9
 80054b2:	ea86 0904 	eor.w	r9, r6, r4
 80054b6:	ea8e 0a03 	eor.w	sl, lr, r3
 80054ba:	ea81 0b03 	eor.w	fp, r1, r3
 80054be:	ea6f 0303 	mvn.w	r3, r3
 80054c2:	ea41 0303 	orr.w	r3, r1, r3
 80054c6:	ea83 0309 	eor.w	r3, r3, r9
 80054ca:	ea81 0106 	eor.w	r1, r1, r6
 80054ce:	ea41 0109 	orr.w	r1, r1, r9
 80054d2:	ea81 010a 	eor.w	r1, r1, sl
 80054d6:	ea84 040a 	eor.w	r4, r4, sl
 80054da:	ea44 0406 	orr.w	r4, r4, r6
 80054de:	ea84 040b 	eor.w	r4, r4, fp
 80054e2:	ea26 060a 	bic.w	r6, r6, sl
 80054e6:	ea86 060b 	eor.w	r6, r6, fp
 80054ea:	ea4e 0e0b 	orr.w	lr, lr, fp
 80054ee:	ea8e 0e09 	eor.w	lr, lr, r9
 80054f2:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 80054f6:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 80054fa:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 80054fe:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8005502:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8005506:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 800550a:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 800550e:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8005512:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8005516:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 800551a:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 800551e:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8005522:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8005526:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 800552a:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 800552e:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8005532:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8005536:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 800553a:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 800553e:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8005542:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8005546:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 800554a:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 800554e:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8005552:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8005556:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 800555a:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 800555e:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8005562:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8005566:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 800556a:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 800556e:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8005572:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8005576:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 800557a:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 800557e:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8005582:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8005586:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 800558a:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 800558e:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8005592:	f8c7 b000 	str.w	fp, [r7]
 8005596:	f8c7 a004 	str.w	sl, [r7, #4]
 800559a:	f8c7 9008 	str.w	r9, [r7, #8]
 800559e:	f8c7 800c 	str.w	r8, [r7, #12]
 80055a2:	f8c7 e010 	str.w	lr, [r7, #16]
 80055a6:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80055aa:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80055ae:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 80055b2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80055b6:	f8c7 8020 	str.w	r8, [r7, #32]
 80055ba:	627e      	str	r6, [r7, #36]	@ 0x24
 80055bc:	61bd      	str	r5, [r7, #24]
 80055be:	61fc      	str	r4, [r7, #28]
 80055c0:	63b8      	str	r0, [r7, #56]	@ 0x38
 80055c2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80055c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80055cc:	f8c7 9078 	str.w	r9, [r7, #120]	@ 0x78
 80055d0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80055d4:	f8c7 a074 	str.w	sl, [r7, #116]	@ 0x74
 80055d8:	f8d7 b000 	ldr.w	fp, [r7]
 80055dc:	f8c7 b070 	str.w	fp, [r7, #112]	@ 0x70
  ROUND5(x4, x0, x1, x2, x3, RC8);
 80055e0:	f8d7 c018 	ldr.w	ip, [r7, #24]
 80055e4:	f8c7 c010 	str.w	ip, [r7, #16]
 80055e8:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 80055ec:	f8c7 e00c 	str.w	lr, [r7, #12]
 80055f0:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 80055f4:	f8c7 8008 	str.w	r8, [r7, #8]
 80055f8:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 80055fa:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 80055fc:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80055fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800560a:	f8c7 c004 	str.w	ip, [r7, #4]
 800560e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005612:	f8c7 e010 	str.w	lr, [r7, #16]
 8005616:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800561a:	f8c7 800c 	str.w	r8, [r7, #12]
 800561e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005622:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005626:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800562a:	f085 0578 	eor.w	r5, r5, #120	@ 0x78
 800562e:	ea88 0905 	eor.w	r9, r8, r5
 8005632:	ea8c 0a02 	eor.w	sl, ip, r2
 8005636:	ea80 0b02 	eor.w	fp, r0, r2
 800563a:	ea6f 0202 	mvn.w	r2, r2
 800563e:	ea40 0202 	orr.w	r2, r0, r2
 8005642:	ea82 0209 	eor.w	r2, r2, r9
 8005646:	ea80 0008 	eor.w	r0, r0, r8
 800564a:	ea40 0009 	orr.w	r0, r0, r9
 800564e:	ea80 000a 	eor.w	r0, r0, sl
 8005652:	ea85 050a 	eor.w	r5, r5, sl
 8005656:	ea45 0508 	orr.w	r5, r5, r8
 800565a:	ea85 050b 	eor.w	r5, r5, fp
 800565e:	ea28 080a 	bic.w	r8, r8, sl
 8005662:	ea88 080b 	eor.w	r8, r8, fp
 8005666:	ea4c 0c0b 	orr.w	ip, ip, fp
 800566a:	ea8c 0c09 	eor.w	ip, ip, r9
 800566e:	ea86 0904 	eor.w	r9, r6, r4
 8005672:	ea8e 0a03 	eor.w	sl, lr, r3
 8005676:	ea81 0b03 	eor.w	fp, r1, r3
 800567a:	ea6f 0303 	mvn.w	r3, r3
 800567e:	ea41 0303 	orr.w	r3, r1, r3
 8005682:	ea83 0309 	eor.w	r3, r3, r9
 8005686:	ea81 0106 	eor.w	r1, r1, r6
 800568a:	ea41 0109 	orr.w	r1, r1, r9
 800568e:	ea81 010a 	eor.w	r1, r1, sl
 8005692:	ea84 040a 	eor.w	r4, r4, sl
 8005696:	ea44 0406 	orr.w	r4, r4, r6
 800569a:	ea84 040b 	eor.w	r4, r4, fp
 800569e:	ea26 060a 	bic.w	r6, r6, sl
 80056a2:	ea86 060b 	eor.w	r6, r6, fp
 80056a6:	ea4e 0e0b 	orr.w	lr, lr, fp
 80056aa:	ea8e 0e09 	eor.w	lr, lr, r9
 80056ae:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 80056b2:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 80056b6:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 80056ba:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 80056be:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 80056c2:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 80056c6:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 80056ca:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 80056ce:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 80056d2:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 80056d6:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 80056da:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 80056de:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 80056e2:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 80056e6:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 80056ea:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 80056ee:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 80056f2:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 80056f6:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 80056fa:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 80056fe:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8005702:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8005706:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 800570a:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 800570e:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8005712:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8005716:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 800571a:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 800571e:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8005722:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8005726:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 800572a:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 800572e:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8005732:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8005736:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 800573a:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 800573e:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8005742:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8005746:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 800574a:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 800574e:	f8c7 b000 	str.w	fp, [r7]
 8005752:	f8c7 a004 	str.w	sl, [r7, #4]
 8005756:	f8c7 9008 	str.w	r9, [r7, #8]
 800575a:	f8c7 800c 	str.w	r8, [r7, #12]
 800575e:	f8c7 e010 	str.w	lr, [r7, #16]
 8005762:	f8c7 c018 	str.w	ip, [r7, #24]
 8005766:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800576a:	f8c7 e01c 	str.w	lr, [r7, #28]
 800576e:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8005772:	f8c7 8038 	str.w	r8, [r7, #56]	@ 0x38
 8005776:	63fe      	str	r6, [r7, #60]	@ 0x3c
 8005778:	633d      	str	r5, [r7, #48]	@ 0x30
 800577a:	637c      	str	r4, [r7, #52]	@ 0x34
 800577c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800577e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005780:	623a      	str	r2, [r7, #32]
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
 8005784:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005788:	f8c7 906c 	str.w	r9, [r7, #108]	@ 0x6c
 800578c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005790:	f8c7 a068 	str.w	sl, [r7, #104]	@ 0x68
 8005794:	f8d7 b000 	ldr.w	fp, [r7]
 8005798:	f8c7 b064 	str.w	fp, [r7, #100]	@ 0x64
  ROUND5(x1, x2, x3, x4, x0, RC9);
 800579c:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 80057a0:	f8c7 c010 	str.w	ip, [r7, #16]
 80057a4:	f8d7 e034 	ldr.w	lr, [r7, #52]	@ 0x34
 80057a8:	f8c7 e00c 	str.w	lr, [r7, #12]
 80057ac:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 80057b0:	f8c7 8008 	str.w	r8, [r7, #8]
 80057b4:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80057b6:	6a3d      	ldr	r5, [r7, #32]
 80057b8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80057ba:	69b8      	ldr	r0, [r7, #24]
 80057bc:	69f9      	ldr	r1, [r7, #28]
 80057be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c2:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80057c6:	f8c7 c004 	str.w	ip, [r7, #4]
 80057ca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80057ce:	f8c7 e010 	str.w	lr, [r7, #16]
 80057d2:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80057d6:	f8c7 800c 	str.w	r8, [r7, #12]
 80057da:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80057de:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80057e2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80057e6:	f085 0569 	eor.w	r5, r5, #105	@ 0x69
 80057ea:	ea88 0905 	eor.w	r9, r8, r5
 80057ee:	ea8c 0a02 	eor.w	sl, ip, r2
 80057f2:	ea80 0b02 	eor.w	fp, r0, r2
 80057f6:	ea6f 0202 	mvn.w	r2, r2
 80057fa:	ea40 0202 	orr.w	r2, r0, r2
 80057fe:	ea82 0209 	eor.w	r2, r2, r9
 8005802:	ea80 0008 	eor.w	r0, r0, r8
 8005806:	ea40 0009 	orr.w	r0, r0, r9
 800580a:	ea80 000a 	eor.w	r0, r0, sl
 800580e:	ea85 050a 	eor.w	r5, r5, sl
 8005812:	ea45 0508 	orr.w	r5, r5, r8
 8005816:	ea85 050b 	eor.w	r5, r5, fp
 800581a:	ea28 080a 	bic.w	r8, r8, sl
 800581e:	ea88 080b 	eor.w	r8, r8, fp
 8005822:	ea4c 0c0b 	orr.w	ip, ip, fp
 8005826:	ea8c 0c09 	eor.w	ip, ip, r9
 800582a:	ea86 0904 	eor.w	r9, r6, r4
 800582e:	ea8e 0a03 	eor.w	sl, lr, r3
 8005832:	ea81 0b03 	eor.w	fp, r1, r3
 8005836:	ea6f 0303 	mvn.w	r3, r3
 800583a:	ea41 0303 	orr.w	r3, r1, r3
 800583e:	ea83 0309 	eor.w	r3, r3, r9
 8005842:	ea81 0106 	eor.w	r1, r1, r6
 8005846:	ea41 0109 	orr.w	r1, r1, r9
 800584a:	ea81 010a 	eor.w	r1, r1, sl
 800584e:	ea84 040a 	eor.w	r4, r4, sl
 8005852:	ea44 0406 	orr.w	r4, r4, r6
 8005856:	ea84 040b 	eor.w	r4, r4, fp
 800585a:	ea26 060a 	bic.w	r6, r6, sl
 800585e:	ea86 060b 	eor.w	r6, r6, fp
 8005862:	ea4e 0e0b 	orr.w	lr, lr, fp
 8005866:	ea8e 0e09 	eor.w	lr, lr, r9
 800586a:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 800586e:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8005872:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8005876:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 800587a:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 800587e:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8005882:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8005886:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 800588a:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 800588e:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8005892:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8005896:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 800589a:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 800589e:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 80058a2:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 80058a6:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 80058aa:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 80058ae:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 80058b2:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 80058b6:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 80058ba:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 80058be:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 80058c2:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 80058c6:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 80058ca:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 80058ce:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 80058d2:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 80058d6:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 80058da:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 80058de:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 80058e2:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 80058e6:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 80058ea:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 80058ee:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 80058f2:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 80058f6:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 80058fa:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 80058fe:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8005902:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8005906:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 800590a:	f8c7 b000 	str.w	fp, [r7]
 800590e:	f8c7 a004 	str.w	sl, [r7, #4]
 8005912:	f8c7 9008 	str.w	r9, [r7, #8]
 8005916:	f8c7 800c 	str.w	r8, [r7, #12]
 800591a:	f8c7 e010 	str.w	lr, [r7, #16]
 800591e:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 8005922:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005926:	f8c7 e034 	str.w	lr, [r7, #52]	@ 0x34
 800592a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800592e:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8005932:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8005934:	623d      	str	r5, [r7, #32]
 8005936:	627c      	str	r4, [r7, #36]	@ 0x24
 8005938:	61b8      	str	r0, [r7, #24]
 800593a:	61f9      	str	r1, [r7, #28]
 800593c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005940:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005944:	f8c7 9060 	str.w	r9, [r7, #96]	@ 0x60
 8005948:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800594c:	f8c7 a05c 	str.w	sl, [r7, #92]	@ 0x5c
 8005950:	f8d7 b000 	ldr.w	fp, [r7]
 8005954:	f8c7 b058 	str.w	fp, [r7, #88]	@ 0x58
  ROUND5(x3, x4, x0, x1, x2, RCa);
 8005958:	f8d7 c020 	ldr.w	ip, [r7, #32]
 800595c:	f8c7 c010 	str.w	ip, [r7, #16]
 8005960:	f8d7 e024 	ldr.w	lr, [r7, #36]	@ 0x24
 8005964:	f8c7 e00c 	str.w	lr, [r7, #12]
 8005968:	f8d7 8018 	ldr.w	r8, [r7, #24]
 800596c:	f8c7 8008 	str.w	r8, [r7, #8]
 8005970:	69fe      	ldr	r6, [r7, #28]
 8005972:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8005974:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8005976:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005978:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800597a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005982:	f8c7 c004 	str.w	ip, [r7, #4]
 8005986:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800598a:	f8c7 e010 	str.w	lr, [r7, #16]
 800598e:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8005992:	f8c7 800c 	str.w	r8, [r7, #12]
 8005996:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800599a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800599e:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80059a2:	f085 055a 	eor.w	r5, r5, #90	@ 0x5a
 80059a6:	ea88 0905 	eor.w	r9, r8, r5
 80059aa:	ea8c 0a02 	eor.w	sl, ip, r2
 80059ae:	ea80 0b02 	eor.w	fp, r0, r2
 80059b2:	ea6f 0202 	mvn.w	r2, r2
 80059b6:	ea40 0202 	orr.w	r2, r0, r2
 80059ba:	ea82 0209 	eor.w	r2, r2, r9
 80059be:	ea80 0008 	eor.w	r0, r0, r8
 80059c2:	ea40 0009 	orr.w	r0, r0, r9
 80059c6:	ea80 000a 	eor.w	r0, r0, sl
 80059ca:	ea85 050a 	eor.w	r5, r5, sl
 80059ce:	ea45 0508 	orr.w	r5, r5, r8
 80059d2:	ea85 050b 	eor.w	r5, r5, fp
 80059d6:	ea28 080a 	bic.w	r8, r8, sl
 80059da:	ea88 080b 	eor.w	r8, r8, fp
 80059de:	ea4c 0c0b 	orr.w	ip, ip, fp
 80059e2:	ea8c 0c09 	eor.w	ip, ip, r9
 80059e6:	ea86 0904 	eor.w	r9, r6, r4
 80059ea:	ea8e 0a03 	eor.w	sl, lr, r3
 80059ee:	ea81 0b03 	eor.w	fp, r1, r3
 80059f2:	ea6f 0303 	mvn.w	r3, r3
 80059f6:	ea41 0303 	orr.w	r3, r1, r3
 80059fa:	ea83 0309 	eor.w	r3, r3, r9
 80059fe:	ea81 0106 	eor.w	r1, r1, r6
 8005a02:	ea41 0109 	orr.w	r1, r1, r9
 8005a06:	ea81 010a 	eor.w	r1, r1, sl
 8005a0a:	ea84 040a 	eor.w	r4, r4, sl
 8005a0e:	ea44 0406 	orr.w	r4, r4, r6
 8005a12:	ea84 040b 	eor.w	r4, r4, fp
 8005a16:	ea26 060a 	bic.w	r6, r6, sl
 8005a1a:	ea86 060b 	eor.w	r6, r6, fp
 8005a1e:	ea4e 0e0b 	orr.w	lr, lr, fp
 8005a22:	ea8e 0e09 	eor.w	lr, lr, r9
 8005a26:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8005a2a:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8005a2e:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8005a32:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8005a36:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8005a3a:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8005a3e:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8005a42:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8005a46:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8005a4a:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8005a4e:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8005a52:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8005a56:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8005a5a:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8005a5e:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8005a62:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8005a66:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8005a6a:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8005a6e:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8005a72:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8005a76:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8005a7a:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8005a7e:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8005a82:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8005a86:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8005a8a:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8005a8e:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8005a92:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8005a96:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8005a9a:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8005a9e:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8005aa2:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8005aa6:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8005aaa:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8005aae:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8005ab2:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8005ab6:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8005aba:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8005abe:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8005ac2:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8005ac6:	f8c7 b000 	str.w	fp, [r7]
 8005aca:	f8c7 a004 	str.w	sl, [r7, #4]
 8005ace:	f8c7 9008 	str.w	r9, [r7, #8]
 8005ad2:	f8c7 800c 	str.w	r8, [r7, #12]
 8005ad6:	f8c7 e010 	str.w	lr, [r7, #16]
 8005ada:	f8c7 c020 	str.w	ip, [r7, #32]
 8005ade:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005ae2:	f8c7 e024 	str.w	lr, [r7, #36]	@ 0x24
 8005ae6:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8005aea:	f8c7 8018 	str.w	r8, [r7, #24]
 8005aee:	61fe      	str	r6, [r7, #28]
 8005af0:	63bd      	str	r5, [r7, #56]	@ 0x38
 8005af2:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8005af4:	6338      	str	r0, [r7, #48]	@ 0x30
 8005af6:	6379      	str	r1, [r7, #52]	@ 0x34
 8005af8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afc:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005b00:	f8c7 9054 	str.w	r9, [r7, #84]	@ 0x54
 8005b04:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005b08:	f8c7 a050 	str.w	sl, [r7, #80]	@ 0x50
 8005b0c:	f8d7 b000 	ldr.w	fp, [r7]
 8005b10:	f8c7 b04c 	str.w	fp, [r7, #76]	@ 0x4c
#if !ASCON_INLINE_PERM
  ROUND5(x0, x1, x2, x3, x4, RCb);
 8005b14:	f8d7 c038 	ldr.w	ip, [r7, #56]	@ 0x38
 8005b18:	f8c7 c010 	str.w	ip, [r7, #16]
 8005b1c:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 8005b20:	f8c7 e00c 	str.w	lr, [r7, #12]
 8005b24:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 8005b28:	f8c7 8008 	str.w	r8, [r7, #8]
 8005b2c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8005b2e:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8005b30:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8005b32:	6a38      	ldr	r0, [r7, #32]
 8005b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005b3e:	f8c7 c004 	str.w	ip, [r7, #4]
 8005b42:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005b46:	f8c7 e010 	str.w	lr, [r7, #16]
 8005b4a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8005b4e:	f8c7 800c 	str.w	r8, [r7, #12]
 8005b52:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005b56:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005b5a:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8005b5e:	f085 054b 	eor.w	r5, r5, #75	@ 0x4b
 8005b62:	ea88 0905 	eor.w	r9, r8, r5
 8005b66:	ea8c 0a02 	eor.w	sl, ip, r2
 8005b6a:	ea80 0b02 	eor.w	fp, r0, r2
 8005b6e:	ea6f 0202 	mvn.w	r2, r2
 8005b72:	ea40 0202 	orr.w	r2, r0, r2
 8005b76:	ea82 0209 	eor.w	r2, r2, r9
 8005b7a:	ea80 0008 	eor.w	r0, r0, r8
 8005b7e:	ea40 0009 	orr.w	r0, r0, r9
 8005b82:	ea80 000a 	eor.w	r0, r0, sl
 8005b86:	ea85 050a 	eor.w	r5, r5, sl
 8005b8a:	ea45 0508 	orr.w	r5, r5, r8
 8005b8e:	ea85 050b 	eor.w	r5, r5, fp
 8005b92:	ea28 080a 	bic.w	r8, r8, sl
 8005b96:	ea88 080b 	eor.w	r8, r8, fp
 8005b9a:	ea4c 0c0b 	orr.w	ip, ip, fp
 8005b9e:	ea8c 0c09 	eor.w	ip, ip, r9
 8005ba2:	ea86 0904 	eor.w	r9, r6, r4
 8005ba6:	ea8e 0a03 	eor.w	sl, lr, r3
 8005baa:	ea81 0b03 	eor.w	fp, r1, r3
 8005bae:	ea6f 0303 	mvn.w	r3, r3
 8005bb2:	ea41 0303 	orr.w	r3, r1, r3
 8005bb6:	ea83 0309 	eor.w	r3, r3, r9
 8005bba:	ea81 0106 	eor.w	r1, r1, r6
 8005bbe:	ea41 0109 	orr.w	r1, r1, r9
 8005bc2:	ea81 010a 	eor.w	r1, r1, sl
 8005bc6:	ea84 040a 	eor.w	r4, r4, sl
 8005bca:	ea44 0406 	orr.w	r4, r4, r6
 8005bce:	ea84 040b 	eor.w	r4, r4, fp
 8005bd2:	ea26 060a 	bic.w	r6, r6, sl
 8005bd6:	ea86 060b 	eor.w	r6, r6, fp
 8005bda:	ea4e 0e0b 	orr.w	lr, lr, fp
 8005bde:	ea8e 0e09 	eor.w	lr, lr, r9
 8005be2:	ea85 49d5 	eor.w	r9, r5, r5, lsr #19
 8005be6:	ea84 4ad4 	eor.w	sl, r4, r4, lsr #19
 8005bea:	ea89 3944 	eor.w	r9, r9, r4, lsl #13
 8005bee:	ea8a 3a45 	eor.w	sl, sl, r5, lsl #13
 8005bf2:	ea89 1904 	eor.w	r9, r9, r4, lsl #4
 8005bf6:	ea8a 1a05 	eor.w	sl, sl, r5, lsl #4
 8005bfa:	ea89 7515 	eor.w	r5, r9, r5, lsr #28
 8005bfe:	ea8a 7414 	eor.w	r4, sl, r4, lsr #28
 8005c02:	ea80 09c0 	eor.w	r9, r0, r0, lsl #3
 8005c06:	ea81 0ac1 	eor.w	sl, r1, r1, lsl #3
 8005c0a:	ea89 7951 	eor.w	r9, r9, r1, lsr #29
 8005c0e:	ea8a 7a50 	eor.w	sl, sl, r0, lsr #29
 8005c12:	ea89 19d1 	eor.w	r9, r9, r1, lsr #7
 8005c16:	ea8a 1ad0 	eor.w	sl, sl, r0, lsr #7
 8005c1a:	ea89 6040 	eor.w	r0, r9, r0, lsl #25
 8005c1e:	ea8a 6141 	eor.w	r1, sl, r1, lsl #25
 8005c22:	ea82 0952 	eor.w	r9, r2, r2, lsr #1
 8005c26:	ea83 0a53 	eor.w	sl, r3, r3, lsr #1
 8005c2a:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
 8005c2e:	ea8a 7ac2 	eor.w	sl, sl, r2, lsl #31
 8005c32:	ea89 6983 	eor.w	r9, r9, r3, lsl #26
 8005c36:	ea8a 6a82 	eor.w	sl, sl, r2, lsl #26
 8005c3a:	ea89 1292 	eor.w	r2, r9, r2, lsr #6
 8005c3e:	ea8a 1393 	eor.w	r3, sl, r3, lsr #6
 8005c42:	ea8c 299c 	eor.w	r9, ip, ip, lsr #10
 8005c46:	ea8e 2a9e 	eor.w	sl, lr, lr, lsr #10
 8005c4a:	ea89 598e 	eor.w	r9, r9, lr, lsl #22
 8005c4e:	ea8a 5a8c 	eor.w	sl, sl, ip, lsl #22
 8005c52:	ea89 39ce 	eor.w	r9, r9, lr, lsl #15
 8005c56:	ea8a 3acc 	eor.w	sl, sl, ip, lsl #15
 8005c5a:	ea89 4c5c 	eor.w	ip, r9, ip, lsr #17
 8005c5e:	ea8a 4e5e 	eor.w	lr, sl, lr, lsr #17
 8005c62:	ea88 19d8 	eor.w	r9, r8, r8, lsr #7
 8005c66:	ea86 1ad6 	eor.w	sl, r6, r6, lsr #7
 8005c6a:	ea89 6946 	eor.w	r9, r9, r6, lsl #25
 8005c6e:	ea8a 6a48 	eor.w	sl, sl, r8, lsl #25
 8005c72:	ea89 2956 	eor.w	r9, r9, r6, lsr #9
 8005c76:	ea8a 2a58 	eor.w	sl, sl, r8, lsr #9
 8005c7a:	ea89 58c8 	eor.w	r8, r9, r8, lsl #23
 8005c7e:	ea8a 56c6 	eor.w	r6, sl, r6, lsl #23
 8005c82:	f8c7 b000 	str.w	fp, [r7]
 8005c86:	f8c7 a004 	str.w	sl, [r7, #4]
 8005c8a:	f8c7 9008 	str.w	r9, [r7, #8]
 8005c8e:	f8c7 800c 	str.w	r8, [r7, #12]
 8005c92:	f8c7 e010 	str.w	lr, [r7, #16]
 8005c96:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8005c9a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005c9e:	f8c7 e03c 	str.w	lr, [r7, #60]	@ 0x3c
 8005ca2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8005ca6:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
 8005caa:	637e      	str	r6, [r7, #52]	@ 0x34
 8005cac:	62bd      	str	r5, [r7, #40]	@ 0x28
 8005cae:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8005cb0:	6238      	str	r0, [r7, #32]
 8005cb2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005cb4:	61ba      	str	r2, [r7, #24]
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8005cbc:	f8c7 9048 	str.w	r9, [r7, #72]	@ 0x48
 8005cc0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005cc4:	f8c7 a044 	str.w	sl, [r7, #68]	@ 0x44
 8005cc8:	f8d7 b000 	ldr.w	fp, [r7]
 8005ccc:	f8c7 b040 	str.w	fp, [r7, #64]	@ 0x40
  STORESTATE(s, x2, x3, x4, x0, x1);
 8005cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	e9c1 2300 	strd	r2, r3, [r1]
 8005cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005cee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005cf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005cfc:	6979      	ldr	r1, [r7, #20]
 8005cfe:	e9c1 2308 	strd	r2, r3, [r1, #32]
#else /* ASCON_INLINE_PERM */
  STORESTATE(s, x0, x1, x2, x3, x4);
  ROUND(s, RCb);
#endif
}
 8005d02:	bf00      	nop
 8005d04:	378c      	adds	r7, #140	@ 0x8c
 8005d06:	46bd      	mov	sp, r7
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d0c <_ZL1PP13ascon_state_ti>:

void P12(ascon_state_t* s);
//void P8(ascon_state_t* s);
void P6(ascon_state_t* s);

forceinline void P(ascon_state_t* s, int nr) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  if (nr == 12) P12(s);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d102      	bne.n	8005d22 <_ZL1PP13ascon_state_ti+0x16>
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f80a 	bl	8005d36 <_Z3P12P13ascon_state_t>
 // if (nr == 8) P8(s);
  if (nr == 6) P6(s);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d102      	bne.n	8005d2e <_ZL1PP13ascon_state_ti+0x22>
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f80f 	bl	8005d4c <_Z2P6P13ascon_state_t>
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_Z3P12P13ascon_state_t>:
#endif


#if !ASCON_INLINE_PERM && ASCON_UNROLL_LOOPS

void P12(ascon_state_t* s) { P12ROUNDS(s); }
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fd ffd0 	bl	8003ce4 <_ZL9P12ROUNDSP13ascon_state_t>
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_Z2P6P13ascon_state_t>:
#endif

#if (defined(ASCON_AEAD_RATE) && ASCON_AEAD_RATE == 8) && \
    !ASCON_INLINE_PERM && ASCON_UNROLL_LOOPS

void P6(ascon_state_t* s) { P6ROUNDS(s); }
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fa69 	bl	800522c <_ZL8P6ROUNDSP13ascon_state_t>
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <_Z13ascon_loadkeyP11ascon_key_tPKh>:
#define forceinline
#endif

#ifdef ASCON_AEAD_RATE

forceinline void ascon_loadkey(ascon_key_t* key, const uint8_t* k) {
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
#if CRYPTO_KEYBYTES == 16
  key->x[0] = LOAD(k, 8);
 8005d6c:	2108      	movs	r1, #8
 8005d6e:	6838      	ldr	r0, [r7, #0]
 8005d70:	f7fd fe37 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	e9c1 2300 	strd	r2, r3, [r1]
  key->x[1] = LOAD(k + 8, 8);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	2108      	movs	r1, #8
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fd fe2c 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	e9c1 2302 	strd	r2, r3, [r1, #8]
#else /* CRYPTO_KEYBYTES == 20 */
  key->x[0] = KEYROT(0, LOADBYTES(k, 4));
  key->x[1] = LOADBYTES(k + 4, 8);
  key->x[2] = LOADBYTES(k + 12, 8);
#endif
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <_Z14ascon_initaeadP13ascon_state_tPK11ascon_key_tPKh>:

forceinline void ascon_initaead(ascon_state_t* s, const ascon_key_t* key,
                                const uint8_t* npub) {
 8005da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
#if CRYPTO_KEYBYTES == 16
  if (ASCON_AEAD_RATE == 8) s->x[0] = ASCON_128_IV;
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	a323      	add	r3, pc, #140	@ (adr r3, 8005e40 <_Z14ascon_initaeadP13ascon_state_tPK11ascon_key_tPKh+0xa0>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	e9c1 2300 	strd	r2, r3, [r1]
  if (ASCON_AEAD_RATE == 16) s->x[0] = ASCON_128A_IV;
  s->x[1] = key->x[0];
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  s->x[2] = key->x[1];
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	e9c1 2304 	strd	r2, r3, [r1, #16]
#else /* CRYPTO_KEYBYTES == 20 */
  s->x[0] = key->x[0] ^ ASCON_80PQ_IV;
  s->x[1] = key->x[1];
  s->x[2] = key->x[2];
#endif
  s->x[3] = LOAD(npub, 8);
 8005dd2:	2108      	movs	r1, #8
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fd fe04 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  s->x[4] = LOAD(npub + 8, 8);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3308      	adds	r3, #8
 8005de8:	2108      	movs	r1, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fd fdf9 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	e9c1 2308 	strd	r2, r3, [r1, #32]

  P(s, 12);
 8005dfa:	210c      	movs	r1, #12
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ff85 	bl	8005d0c <_ZL1PP13ascon_state_ti>
#if CRYPTO_KEYBYTES == 16
  s->x[3] ^= key->x[0];
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	ea80 0802 	eor.w	r8, r0, r2
 8005e12:	ea81 0903 	eor.w	r9, r1, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e9c3 8906 	strd	r8, r9, [r3, #24]
  s->x[4] ^= key->x[1];
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005e28:	ea80 0402 	eor.w	r4, r0, r2
 8005e2c:	ea81 0503 	eor.w	r5, r1, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e9c3 4508 	strd	r4, r5, [r3, #32]
  s->x[2] ^= key->x[0];
  s->x[3] ^= key->x[1];
  s->x[4] ^= key->x[2];
#endif

}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e40:	00000000 	.word	0x00000000
 8005e44:	80400c06 	.word	0x80400c06

08005e48 <_Z11ascon_adataP13ascon_state_tPKhy>:

forceinline void ascon_adata(ascon_state_t* s, const uint8_t* ad,
                             uint64_t adlen) {
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b08a      	sub	sp, #40	@ 0x28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	61f8      	str	r0, [r7, #28]
 8005e52:	61b9      	str	r1, [r7, #24]
 8005e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const int nr = (ASCON_AEAD_RATE == 8) ? 6 : 8;
 8005e58:	2306      	movs	r3, #6
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (adlen) {
 8005e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d052      	beq.n	8005f0a <_Z11ascon_adataP13ascon_state_tPKhy+0xc2>
    /* full associated data blocks */
    while (adlen >= ASCON_AEAD_RATE) {
 8005e64:	e024      	b.n	8005eb0 <_Z11ascon_adataP13ascon_state_tPKhy+0x68>
      s->x[0] ^= LOAD(ad, 8);
 8005e66:	2108      	movs	r1, #8
 8005e68:	69b8      	ldr	r0, [r7, #24]
 8005e6a:	f7fd fdba 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	ea80 0c02 	eor.w	ip, r0, r2
 8005e78:	f8c7 c008 	str.w	ip, [r7, #8]
 8005e7c:	404b      	eors	r3, r1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e86:	e9c3 1200 	strd	r1, r2, [r3]
      if (ASCON_AEAD_RATE == 16) s->x[1] ^= LOAD(ad + 8, 8);

      P(s, nr);
 8005e8a:	2106      	movs	r1, #6
 8005e8c:	69f8      	ldr	r0, [r7, #28]
 8005e8e:	f7ff ff3d 	bl	8005d0c <_ZL1PP13ascon_state_ti>
      ad += ASCON_AEAD_RATE;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3308      	adds	r3, #8
 8005e96:	61bb      	str	r3, [r7, #24]
      adlen -= ASCON_AEAD_RATE;
 8005e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e9c:	f1b2 0108 	subs.w	r1, r2, #8
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (adlen >= ASCON_AEAD_RATE) {
 8005eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eb4:	2a08      	cmp	r2, #8
 8005eb6:	f173 0300 	sbcs.w	r3, r3, #0
 8005eba:	d2d4      	bcs.n	8005e66 <_Z11ascon_adataP13ascon_state_tPKhy+0x1e>
    }
    /* final associated data block */
    uint64_t* px = &s->x[0];
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	623b      	str	r3, [r7, #32]
      s->x[0] ^= LOAD(ad, 8);
      px = &s->x[1];
      ad += 8;
      adlen -= 8;
    }
    *px ^= PAD(adlen);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fd62 	bl	800398c <_ZL3PADi>
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	ea80 0a02 	eor.w	sl, r0, r2
 8005ed2:	ea81 0b03 	eor.w	fp, r1, r3
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	e9c3 ab00 	strd	sl, fp, [r3]
    if (adlen) *px ^= LOADBYTES(ad, adlen);
 8005edc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <_Z11ascon_adataP13ascon_state_tPKhy+0xba>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	69b8      	ldr	r0, [r7, #24]
 8005eea:	f7fd fd7a 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	ea80 0802 	eor.w	r8, r0, r2
 8005ef8:	ea81 0903 	eor.w	r9, r1, r3
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	e9c3 8900 	strd	r8, r9, [r3]

    P(s, nr);
 8005f02:	2106      	movs	r1, #6
 8005f04:	69f8      	ldr	r0, [r7, #28]
 8005f06:	f7ff ff01 	bl	8005d0c <_ZL1PP13ascon_state_ti>
  }
  /* domain separation */
  s->x[4] ^= DSEP();
 8005f0a:	f7fd fd5f 	bl	80039cc <_ZL4DSEPv>
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f14:	ea80 0402 	eor.w	r4, r0, r2
 8005f18:	ea81 0503 	eor.w	r5, r1, r3
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	e9c3 4508 	strd	r4, r5, [r3, #32]

}
 8005f22:	bf00      	nop
 8005f24:	3728      	adds	r7, #40	@ 0x28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f2c <_Z13ascon_encryptP13ascon_state_tPhPKhy>:

forceinline void ascon_encrypt(ascon_state_t* s, uint8_t* c, const uint8_t* m,
                               uint64_t mlen) {
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b08a      	sub	sp, #40	@ 0x28
 8005f32:	af02      	add	r7, sp, #8
 8005f34:	6178      	str	r0, [r7, #20]
 8005f36:	6139      	str	r1, [r7, #16]
 8005f38:	60fa      	str	r2, [r7, #12]
  const int nr = (ASCON_AEAD_RATE == 8) ? 6 : 8;
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	61fb      	str	r3, [r7, #28]
  /* full plaintext blocks */
  while (mlen >= ASCON_AEAD_RATE) {
 8005f3e:	e02b      	b.n	8005f98 <_Z13ascon_encryptP13ascon_state_tPhPKhy+0x6c>
    s->x[0] ^= LOAD(m, 8);
 8005f40:	2108      	movs	r1, #8
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7fd fd4d 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	ea80 0a02 	eor.w	sl, r0, r2
 8005f52:	ea81 0b03 	eor.w	fp, r1, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	e9c3 ab00 	strd	sl, fp, [r3]
    STORE(c, s->x[0], 8);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	2108      	movs	r1, #8
 8005f64:	9100      	str	r1, [sp, #0]
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7fd fdfd 	bl	8003b66 <_ZL10STOREBYTESPhyi>
    if (ASCON_AEAD_RATE == 16) {
      s->x[1] ^= LOAD(m + 8, 8);
      STORE(c + 8, s->x[1], 8);
    }

    P(s, nr);
 8005f6c:	2106      	movs	r1, #6
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f7ff fecc 	bl	8005d0c <_ZL1PP13ascon_state_ti>
    m += ASCON_AEAD_RATE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3308      	adds	r3, #8
 8005f78:	60fb      	str	r3, [r7, #12]
    c += ASCON_AEAD_RATE;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	613b      	str	r3, [r7, #16]
    mlen -= ASCON_AEAD_RATE;
 8005f80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f84:	f1b2 0108 	subs.w	r1, r2, #8
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f94:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  while (mlen >= ASCON_AEAD_RATE) {
 8005f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f9c:	2a08      	cmp	r2, #8
 8005f9e:	f173 0300 	sbcs.w	r3, r3, #0
 8005fa2:	d2cd      	bcs.n	8005f40 <_Z13ascon_encryptP13ascon_state_tPhPKhy+0x14>
  }
  /* final plaintext block */
  uint64_t* px = &s->x[0];
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	61bb      	str	r3, [r7, #24]
    px = &s->x[1];
    m += 8;
    c += 8;
    mlen -= 8;
  }
  *px ^= PAD(mlen);
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fd fcee 	bl	800398c <_ZL3PADi>
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	ea80 0802 	eor.w	r8, r0, r2
 8005fba:	ea81 0903 	eor.w	r9, r1, r3
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	e9c3 8900 	strd	r8, r9, [r3]
  if (mlen) {
 8005fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d016      	beq.n	8005ffa <_Z13ascon_encryptP13ascon_state_tPhPKhy+0xce>
    *px ^= LOADBYTES(m, mlen);
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fce:	4619      	mov	r1, r3
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7fd fd06 	bl	80039e2 <_ZL9LOADBYTESPKhi>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	ea80 0402 	eor.w	r4, r0, r2
 8005fe0:	ea81 0503 	eor.w	r5, r1, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	e9c3 4500 	strd	r4, r5, [r3]
    STOREBYTES(c, *px, mlen);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	6938      	ldr	r0, [r7, #16]
 8005ff6:	f7fd fdb6 	bl	8003b66 <_ZL10STOREBYTESPhyi>
  }

}
 8005ffa:	bf00      	nop
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006004 <_Z11ascon_finalP13ascon_state_tPK11ascon_key_t>:
    *px ^= cx;
  }
 // printstate("pad ciphertext", s);
}

forceinline void ascon_final(ascon_state_t* s, const ascon_key_t* key) {
 8006004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
#if CRYPTO_KEYBYTES == 16
  if (ASCON_AEAD_RATE == 8) {
    s->x[1] ^= key->x[0];
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8006016:	e9c7 0100 	strd	r0, r1, [r7]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006020:	f8d7 c000 	ldr.w	ip, [r7]
 8006024:	ea8c 0a00 	eor.w	sl, ip, r0
 8006028:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800602c:	ea8c 0b01 	eor.w	fp, ip, r1
 8006030:	68f9      	ldr	r1, [r7, #12]
 8006032:	e9c1 ab02 	strd	sl, fp, [r1, #8]
    s->x[2] ^= key->x[1];
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	e9d1 ab04 	ldrd	sl, fp, [r1, #16]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8006042:	ea8a 0200 	eor.w	r2, sl, r0
 8006046:	ea8b 0301 	eor.w	r3, fp, r1
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  s->x[1] ^= KEYROT(key->x[0], key->x[1]);
  s->x[2] ^= KEYROT(key->x[1], key->x[2]);
  s->x[3] ^= KEYROT(key->x[2], 0);
#endif
 // printstate("final 1st key xor", s);
  P(s, 12);
 8006050:	210c      	movs	r1, #12
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fe5a 	bl	8005d0c <_ZL1PP13ascon_state_ti>
#if CRYPTO_KEYBYTES == 16
  s->x[3] ^= key->x[0];
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	ea80 0802 	eor.w	r8, r0, r2
 8006068:	ea81 0903 	eor.w	r9, r1, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	e9c3 8906 	strd	r8, r9, [r3, #24]
  s->x[4] ^= key->x[1];
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800607e:	ea80 0402 	eor.w	r4, r0, r2
 8006082:	ea81 0503 	eor.w	r5, r1, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	e9c3 4508 	strd	r4, r5, [r3, #32]
#else /* CRYPTO_KEYBYTES == 20 */
  s->x[3] ^= key->x[1];
  s->x[4] ^= key->x[2];
#endif
//  printstate("final 2nd key xor", s);
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006096 <_Z12ascon_gettagP13ascon_state_tPh>:

forceinline void ascon_gettag(ascon_state_t* s, uint8_t* t) {
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af02      	add	r7, sp, #8
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  STOREBYTES(t, s->x[3], 8);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80060a6:	2108      	movs	r1, #8
 80060a8:	9100      	str	r1, [sp, #0]
 80060aa:	6838      	ldr	r0, [r7, #0]
 80060ac:	f7fd fd5b 	bl	8003b66 <_ZL10STOREBYTESPhyi>
  STOREBYTES(t + 8, s->x[4], 8);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f103 0108 	add.w	r1, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060bc:	2008      	movs	r0, #8
 80060be:	9000      	str	r0, [sp, #0]
 80060c0:	4608      	mov	r0, r1
 80060c2:	f7fd fd50 	bl	8003b66 <_ZL10STOREBYTESPhyi>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <_Z18ascon_aead_encryptPhS_PKhyS1_yS1_S1_>:
  return NOTZERO(s->x[3], s->x[4]);
}

int ascon_aead_encrypt(uint8_t* t, uint8_t* c, const uint8_t* m, uint64_t mlen,
                       const uint8_t* ad, uint64_t adlen, const uint8_t* npub,
                       const uint8_t* k) {
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b094      	sub	sp, #80	@ 0x50
 80060d2:	af02      	add	r7, sp, #8
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
  ascon_state_t s;
  ascon_key_t key;
  ascon_loadkey(&key, k);
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fe3e 	bl	8005d62 <_Z13ascon_loadkeyP11ascon_key_tPKh>
  ascon_initaead(&s, &key, npub);
 80060e6:	f107 0110 	add.w	r1, r7, #16
 80060ea:	f107 0320 	add.w	r3, r7, #32
 80060ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe55 	bl	8005da0 <_Z14ascon_initaeadP13ascon_state_tPK11ascon_key_tPKh>
  ascon_adata(&s, ad, adlen);
 80060f6:	f107 0020 	add.w	r0, r7, #32
 80060fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80060fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006100:	f7ff fea2 	bl	8005e48 <_Z11ascon_adataP13ascon_state_tPKhy>
  ascon_encrypt(&s, c, m, mlen);
 8006104:	f107 0020 	add.w	r0, r7, #32
 8006108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800610c:	e9cd 2300 	strd	r2, r3, [sp]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	f7ff ff0a 	bl	8005f2c <_Z13ascon_encryptP13ascon_state_tPhPKhy>
  ascon_final(&s, &key);
 8006118:	f107 0210 	add.w	r2, r7, #16
 800611c:	f107 0320 	add.w	r3, r7, #32
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff ff6e 	bl	8006004 <_Z11ascon_finalP13ascon_state_tPK11ascon_key_t>
  ascon_gettag(&s, t);
 8006128:	f107 0320 	add.w	r3, r7, #32
 800612c:	68f9      	ldr	r1, [r7, #12]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ffb1 	bl	8006096 <_Z12ascon_gettagP13ascon_state_tPh>
  return 0;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3748      	adds	r7, #72	@ 0x48
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <_Z19crypto_aead_encryptPhPmS_mS_mS_S_S_>:

int crypto_aead_encrypt(uint8_t* c, uint32_t* clen,
		uint8_t* m, uint32_t mlen,
		uint8_t* ad,uint32_t adlen,
		 uint8_t* npub,
		uint8_t* k, uint8_t* tag) {
 800613e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006142:	b08c      	sub	sp, #48	@ 0x30
 8006144:	af08      	add	r7, sp, #32
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]

 // *clen = mlen + CRYPTO_ABYTES;
  return ascon_aead_encrypt(tag, c, m, mlen, ad, adlen, npub, k);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	461c      	mov	r4, r3
 8006154:	4615      	mov	r5, r2
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	2200      	movs	r2, #0
 800615a:	4698      	mov	r8, r3
 800615c:	4691      	mov	r9, r2
 800615e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006160:	9307      	str	r3, [sp, #28]
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	9306      	str	r3, [sp, #24]
 8006166:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800616a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616c:	9302      	str	r3, [sp, #8]
 800616e:	e9cd 4500 	strd	r4, r5, [sp]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006178:	f7ff ffa9 	bl	80060ce <_Z18ascon_aead_encryptPhS_PKhyS1_yS1_S1_>
 800617c:	4603      	mov	r3, r0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006188 <_ZN5Frame21coord2payload_absolutEffPh>:

	return ((dec_int&0x7FFF) | (!!deg_odd<<15));
}*/

void Frame::coord2payload_absolut(float lat, float lon, uint8_t *buf)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	if(buf == nullptr)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d037      	beq.n	800620a <_ZN5Frame21coord2payload_absolutEffPh+0x82>
		return;

	int32_t lat_i = std::round(lat * 93206.0f);
 800619a:	491e      	ldr	r1, [pc, #120]	@ (8006214 <_ZN5Frame21coord2payload_absolutEffPh+0x8c>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7fa f955 	bl	800044c <__aeabi_fmul>
 80061a2:	4603      	mov	r3, r0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fb fb0a 	bl	80017be <_ZSt5roundf>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa fb29 	bl	8000804 <__aeabi_f2iz>
 80061b2:	4603      	mov	r3, r0
 80061b4:	617b      	str	r3, [r7, #20]
	int32_t lon_i = std::round(lon * 46603.0f);
 80061b6:	4918      	ldr	r1, [pc, #96]	@ (8006218 <_ZN5Frame21coord2payload_absolutEffPh+0x90>)
 80061b8:	68b8      	ldr	r0, [r7, #8]
 80061ba:	f7fa f947 	bl	800044c <__aeabi_fmul>
 80061be:	4603      	mov	r3, r0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fb fafc 	bl	80017be <_ZSt5roundf>
 80061c6:	4603      	mov	r3, r0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fa fb1b 	bl	8000804 <__aeabi_f2iz>
 80061ce:	4603      	mov	r3, r0
 80061d0:	613b      	str	r3, [r7, #16]

	buf[0] = ((uint8_t*)&lat_i)[0];
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	781a      	ldrb	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	701a      	strb	r2, [r3, #0]
	buf[1] = ((uint8_t*)&lat_i)[1];
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3301      	adds	r3, #1
 80061e0:	7d7a      	ldrb	r2, [r7, #21]
 80061e2:	701a      	strb	r2, [r3, #0]
	buf[2] = ((uint8_t*)&lat_i)[2];
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3302      	adds	r3, #2
 80061e8:	7dba      	ldrb	r2, [r7, #22]
 80061ea:	701a      	strb	r2, [r3, #0]

	buf[3] = ((uint8_t*)&lon_i)[0];
 80061ec:	f107 0210 	add.w	r2, r7, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3303      	adds	r3, #3
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]
	buf[4] = ((uint8_t*)&lon_i)[1];
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	7c7a      	ldrb	r2, [r7, #17]
 80061fe:	701a      	strb	r2, [r3, #0]
	buf[5] = ((uint8_t*)&lon_i)[2];
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3305      	adds	r3, #5
 8006204:	7cba      	ldrb	r2, [r7, #18]
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e000      	b.n	800620c <_ZN5Frame21coord2payload_absolutEffPh+0x84>
		return;
 800620a:	bf00      	nop
}
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	47b60b00 	.word	0x47b60b00
 8006218:	47360b00 	.word	0x47360b00

0800621c <_ZN5Frame14parseFrameDataEPc>:



void Frame::parseFrameData(char *ch_str) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
    char *p = ch_str + 4;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	613b      	str	r3, [r7, #16]

    type = strtol(p, nullptr, 16);
 800622c:	2210      	movs	r2, #16
 800622e:	2100      	movs	r1, #0
 8006230:	6938      	ldr	r0, [r7, #16]
 8006232:	f007 fc43 	bl	800dabc <strtol>
 8006236:	4602      	mov	r2, r0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	611a      	str	r2, [r3, #16]
    p = strchr(p, SEPARATOR) + 1;
 800623c:	212c      	movs	r1, #44	@ 0x2c
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f007 fd87 	bl	800dd52 <strchr>
 8006244:	4603      	mov	r3, r0
 8006246:	3301      	adds	r3, #1
 8006248:	613b      	str	r3, [r7, #16]

    dest.manufacturer = strtol(p, nullptr, 16);
 800624a:	2210      	movs	r2, #16
 800624c:	2100      	movs	r1, #0
 800624e:	6938      	ldr	r0, [r7, #16]
 8006250:	f007 fc34 	bl	800dabc <strtol>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
    p = strchr(p, SEPARATOR) + 1;
 800625a:	212c      	movs	r1, #44	@ 0x2c
 800625c:	6938      	ldr	r0, [r7, #16]
 800625e:	f007 fd78 	bl	800dd52 <strchr>
 8006262:	4603      	mov	r3, r0
 8006264:	3301      	adds	r3, #1
 8006266:	613b      	str	r3, [r7, #16]

    dest.id = strtol(p, nullptr, 16);
 8006268:	2210      	movs	r2, #16
 800626a:	2100      	movs	r1, #0
 800626c:	6938      	ldr	r0, [r7, #16]
 800626e:	f007 fc25 	bl	800dabc <strtol>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60da      	str	r2, [r3, #12]
    p = strchr(p, SEPARATOR) + 1;
 8006278:	212c      	movs	r1, #44	@ 0x2c
 800627a:	6938      	ldr	r0, [r7, #16]
 800627c:	f007 fd69 	bl	800dd52 <strchr>
 8006280:	4603      	mov	r3, r0
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]

    forward = strtol(p, nullptr, 10);
 8006286:	220a      	movs	r2, #10
 8006288:	2100      	movs	r1, #0
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f007 fc16 	bl	800dabc <strtol>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2da      	uxtb	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	751a      	strb	r2, [r3, #20]
    p = strchr(p, SEPARATOR) + 1;
 80062a0:	212c      	movs	r1, #44	@ 0x2c
 80062a2:	6938      	ldr	r0, [r7, #16]
 80062a4:	f007 fd55 	bl	800dd52 <strchr>
 80062a8:	4603      	mov	r3, r0
 80062aa:	3301      	adds	r3, #1
 80062ac:	613b      	str	r3, [r7, #16]

    ack_requested = strtol(p, nullptr, 10);
 80062ae:	220a      	movs	r2, #10
 80062b0:	2100      	movs	r1, #0
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f007 fc02 	bl	800dabc <strtol>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
    p = strchr(p, SEPARATOR) + 1;
 80062be:	212c      	movs	r1, #44	@ 0x2c
 80062c0:	6938      	ldr	r0, [r7, #16]
 80062c2:	f007 fd46 	bl	800dd52 <strchr>
 80062c6:	4603      	mov	r3, r0
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]

    payload_length = strtol(p, nullptr, 16);
 80062cc:	2210      	movs	r2, #16
 80062ce:	2100      	movs	r1, #0
 80062d0:	6938      	ldr	r0, [r7, #16]
 80062d2:	f007 fbf3 	bl	800dabc <strtol>
 80062d6:	4602      	mov	r2, r0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	61da      	str	r2, [r3, #28]
    p = strchr(p, SEPARATOR) + 1;
 80062dc:	212c      	movs	r1, #44	@ 0x2c
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f007 fd37 	bl	800dd52 <strchr>
 80062e4:	4603      	mov	r3, r0
 80062e6:	3301      	adds	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]

    payload = new uint8_t[payload_length];
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f007 fa35 	bl	800d75e <_Znaj>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

    for (int i = 0; i < payload_length; ++i) {
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e025      	b.n	800634e <_ZN5Frame14parseFrameDataEPc+0x132>
        char hex_pair[3] = { p[i * 2], p[i * 2 + 1], '\0' };
 8006302:	f107 030c 	add.w	r3, r7, #12
 8006306:	2100      	movs	r1, #0
 8006308:	460a      	mov	r2, r1
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	460a      	mov	r2, r1
 800630e:	709a      	strb	r2, [r3, #2]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	461a      	mov	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	733b      	strb	r3, [r7, #12]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	3301      	adds	r3, #1
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	737b      	strb	r3, [r7, #13]
        payload[i] = static_cast<uint8_t>(strtol(hex_pair, nullptr, 16));
 800632c:	f107 030c 	add.w	r3, r7, #12
 8006330:	2210      	movs	r2, #16
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f007 fbc1 	bl	800dabc <strtol>
 800633a:	4601      	mov	r1, r0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	4413      	add	r3, r2
 8006344:	b2ca      	uxtb	r2, r1
 8006346:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < payload_length; ++i) {
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	3301      	adds	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	429a      	cmp	r2, r3
 8006356:	dbd4      	blt.n	8006302 <_ZN5Frame14parseFrameDataEPc+0xe6>
    }
    p += 2 * payload_length;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	461a      	mov	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

    // if (*p == SEPARATOR) {
    //     p++;
    //     signature = strtol(p, nullptr, 16);
    // }
}
 8006366:	bf00      	nop
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <_ZN5Frame12data_encryptEv>:

void Frame::data_encrypt(){
 800636e:	b590      	push	{r4, r7, lr}
 8006370:	b095      	sub	sp, #84	@ 0x54
 8006372:	af06      	add	r7, sp, #24
 8006374:	6078      	str	r0, [r7, #4]
	 uint8_t key[16] = {0};
 8006376:	2300      	movs	r3, #0
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800637a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	609a      	str	r2, [r3, #8]
	    uint8_t nonce[16] = {0};
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	f107 031c 	add.w	r3, r7, #28
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	609a      	str	r2, [r3, #8]
	    uint8_t ad[8] = {0};
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
	    uint32_t clen ;
	    nonce[0]= counter;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	763b      	strb	r3, [r7, #24]
	   ad[0] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <_ZN5Frame12data_encryptEv+0x58>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <_ZN5Frame12data_encryptEv+0x58>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <_ZN5Frame12data_encryptEv+0x58>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <_ZN5Frame12data_encryptEv+0x5c>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <_ZN5Frame12data_encryptEv+0x5e>
 80063ca:	2300      	movs	r3, #0
 80063cc:	01db      	lsls	r3, r3, #7
 80063ce:	b25a      	sxtb	r2, r3
				!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7d1b      	ldrb	r3, [r3, #20]
 80063d4:	019b      	lsls	r3, r3, #6
	   ad[0] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	b25a      	sxtb	r2, r3
				!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	b2db      	uxtb	r3, r3
	   ad[0] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80063ee:	743b      	strb	r3, [r7, #16]
	    ad[1] = src.manufacturer  & 0xFF;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	747b      	strb	r3, [r7, #17]
	    ad[2] = (src.id >> 8) & 0xFF;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	121b      	asrs	r3, r3, #8
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	74bb      	strb	r3, [r7, #18]
	    ad[3] = src.id & 0xFF;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	74fb      	strb	r3, [r7, #19]
	     ad[4] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	019b      	lsls	r3, r3, #6
 8006410:	b25a      	sxtb	r2, r3
		 			!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <_ZN5Frame12data_encryptEv+0xb4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <_ZN5Frame12data_encryptEv+0xb8>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <_ZN5Frame12data_encryptEv+0xba>
 8006426:	2300      	movs	r3, #0
 8006428:	015b      	lsls	r3, r3, #5
	     ad[4] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 800642a:	b25b      	sxtb	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b25b      	sxtb	r3, r3
					!!signature<<MAC_FRM_EXTHEADER_SIGNATURE_BIT;
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6a52      	ldr	r2, [r2, #36]	@ 0x24
		 			!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8006434:	2a00      	cmp	r2, #0
 8006436:	d001      	beq.n	800643c <_ZN5Frame12data_encryptEv+0xce>
 8006438:	2210      	movs	r2, #16
 800643a:	e000      	b.n	800643e <_ZN5Frame12data_encryptEv+0xd0>
 800643c:	2200      	movs	r2, #0
 800643e:	4313      	orrs	r3, r2
 8006440:	b25b      	sxtb	r3, r3
 8006442:	b2db      	uxtb	r3, r3
	     ad[4] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8006444:	753b      	strb	r3, [r7, #20]
	    ad[5] = dest.manufacturer  & 0xFF;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	757b      	strb	r3, [r7, #21]
	    ad[6] = (dest.id >> 8) & 0xFF;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	121b      	asrs	r3, r3, #8
 8006454:	b2db      	uxtb	r3, r3
 8006456:	75bb      	strb	r3, [r7, #22]
	    ad[7] = dest.id & 0xFF;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	75fb      	strb	r3, [r7, #23]

	    crypto_aead_encrypt(en_payload, &clen, payload, payload_length , ad, sizeof(ad), nonce,key, tag);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	461c      	mov	r4, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006472:	f107 010c 	add.w	r1, r7, #12
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	f107 0318 	add.w	r3, r7, #24
 8006482:	9302      	str	r3, [sp, #8]
 8006484:	2308      	movs	r3, #8
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f107 0310 	add.w	r3, r7, #16
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	4623      	mov	r3, r4
 8006490:	f7ff fe55 	bl	800613e <_Z19crypto_aead_encryptPhPmS_mS_mS_S_S_>
	    delete[] payload;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <_ZN5Frame12data_encryptEv+0x138>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f007 f949 	bl	800d738 <_ZdaPv>
	    signature = (static_cast<uint32_t>(tag[3]) << 24) |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	3303      	adds	r3, #3
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	061a      	lsls	r2, r3, #24
	               (static_cast<uint32_t>(tag[2]) << 16) |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	3302      	adds	r3, #2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	041b      	lsls	r3, r3, #16
	    signature = (static_cast<uint32_t>(tag[3]) << 24) |
 80064ba:	431a      	orrs	r2, r3
	               (static_cast<uint32_t>(tag[1]) << 8)  |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	3301      	adds	r3, #1
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
	               (static_cast<uint32_t>(tag[2]) << 16) |
 80064c6:	4313      	orrs	r3, r2
	               (static_cast<uint32_t>(tag[0]));
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80064cc:	7812      	ldrb	r2, [r2, #0]
	               (static_cast<uint32_t>(tag[1]) << 8)  |
 80064ce:	431a      	orrs	r2, r3
	    signature = (static_cast<uint32_t>(tag[3]) << 24) |
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80064d4:	bf00      	nop
 80064d6:	373c      	adds	r7, #60	@ 0x3c
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}

080064dc <_ZN5Frame9serializeERPh>:



int Frame::serialize(uint8_t*& buffer)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	if(src.id <= 0 || src.id >= 0xFFFF || src.manufacturer <= 0 || src.manufacturer>=0xFE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dd0d      	ble.n	800650a <_ZN5Frame9serializeERPh+0x2e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80064f6:	4293      	cmp	r3, r2
 80064f8:	dc07      	bgt.n	800650a <_ZN5Frame9serializeERPh+0x2e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dd03      	ble.n	800650a <_ZN5Frame9serializeERPh+0x2e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2bfd      	cmp	r3, #253	@ 0xfd
 8006508:	dd02      	ble.n	8006510 <_ZN5Frame9serializeERPh+0x34>
		return -2;
 800650a:	f06f 0301 	mvn.w	r3, #1
 800650e:	e137      	b.n	8006780 <_ZN5Frame9serializeERPh+0x2a4>

	int blength = MAC_FRM_MIN_HEADER_LENGTH + payload_length;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	3304      	adds	r3, #4
 8006516:	617b      	str	r3, [r7, #20]

	/* extended header? */
	if(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <_ZN5Frame9serializeERPh+0x5c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d107      	bne.n	8006538 <_ZN5Frame9serializeERPh+0x5c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <_ZN5Frame9serializeERPh+0x5c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <_ZN5Frame9serializeERPh+0x62>
		blength++;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	3301      	adds	r3, #1
 800653c:	617b      	str	r3, [r7, #20]

	/* none broadcast frame */
	if(dest.id != 0 || dest.manufacturer != 0)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <_ZN5Frame9serializeERPh+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <_ZN5Frame9serializeERPh+0x78>
		blength += MAC_FRM_ADDR_LENGTH;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3303      	adds	r3, #3
 8006552:	617b      	str	r3, [r7, #20]

	/* signature */
	if(signature != 0)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <_ZN5Frame9serializeERPh+0x86>
		blength += MAC_FRM_SIGNATURE_LENGTH;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	3304      	adds	r3, #4
 8006560:	617b      	str	r3, [r7, #20]

	/* frame to long */
	if(blength > 255)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2bff      	cmp	r3, #255	@ 0xff
 8006566:	dd02      	ble.n	800656e <_ZN5Frame9serializeERPh+0x92>
		return -1;
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	e108      	b.n	8006780 <_ZN5Frame9serializeERPh+0x2a4>

	/* get memory */
	buffer = new uint8_t[blength];
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4618      	mov	r0, r3
 8006572:	f007 f8f4 	bl	800d75e <_Znaj>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	601a      	str	r2, [r3, #0]
	int idx = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]


	/* header */
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <_ZN5Frame9serializeERPh+0xc6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d107      	bne.n	80065a2 <_ZN5Frame9serializeERPh+0xc6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <_ZN5Frame9serializeERPh+0xc6>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <_ZN5Frame9serializeERPh+0xca>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <_ZN5Frame9serializeERPh+0xcc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	01db      	lsls	r3, r3, #7
 80065aa:	b25a      	sxtb	r2, r3
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7d1b      	ldrb	r3, [r3, #20]
 80065b0:	019b      	lsls	r3, r3, #6
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80065b2:	b25b      	sxtb	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b25a      	sxtb	r2, r3
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b258      	sxtb	r0, r3
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	6139      	str	r1, [r7, #16]
 80065d2:	4413      	add	r3, r2
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 80065d4:	b2c2      	uxtb	r2, r0
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 80065d6:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = src.manufacturer & 0x000000FF;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	6139      	str	r1, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	b2c2      	uxtb	r2, r0
 80065ea:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = src.id & 0x000000FF;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6858      	ldr	r0, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1c59      	adds	r1, r3, #1
 80065f8:	6139      	str	r1, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	b2c2      	uxtb	r2, r0
 80065fe:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = (src.id>>8) & 0x000000FF;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	1218      	asrs	r0, r3, #8
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	6139      	str	r1, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	b2c2      	uxtb	r2, r0
 8006614:	701a      	strb	r2, [r3, #0]

	/* extended header */
	if(buffer[0] & 1<<7)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b25b      	sxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	da23      	bge.n	800666a <_ZN5Frame9serializeERPh+0x18e>
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	019b      	lsls	r3, r3, #6
 8006628:	b25a      	sxtb	r2, r3
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <_ZN5Frame9serializeERPh+0x15e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <_ZN5Frame9serializeERPh+0x162>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <_ZN5Frame9serializeERPh+0x164>
 800663e:	2300      	movs	r3, #0
 8006640:	015b      	lsls	r3, r3, #5
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8006642:	b25b      	sxtb	r3, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	b25b      	sxtb	r3, r3
				!!signature<<MAC_FRM_EXTHEADER_SIGNATURE_BIT;
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 800664c:	2a00      	cmp	r2, #0
 800664e:	d001      	beq.n	8006654 <_ZN5Frame9serializeERPh+0x178>
 8006650:	2210      	movs	r2, #16
 8006652:	e000      	b.n	8006656 <_ZN5Frame9serializeERPh+0x17a>
 8006654:	2200      	movs	r2, #0
 8006656:	4313      	orrs	r3, r2
 8006658:	b258      	sxtb	r0, r3
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	6139      	str	r1, [r7, #16]
 8006664:	4413      	add	r3, r2
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8006666:	b2c2      	uxtb	r2, r0
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8006668:	701a      	strb	r2, [r3, #0]

	/* extheader and unicast -> add destination addr */
	if((buffer[0] & 1<<7) && (buffer[4] & 1<<5))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b25b      	sxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	da26      	bge.n	80066c4 <_ZN5Frame9serializeERPh+0x1e8>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01e      	beq.n	80066c4 <_ZN5Frame9serializeERPh+0x1e8>
	{
		buffer[idx++] = dest.manufacturer & 0x000000FF;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6898      	ldr	r0, [r3, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1c59      	adds	r1, r3, #1
 8006692:	6139      	str	r1, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	b2c2      	uxtb	r2, r0
 8006698:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = dest.id & 0x000000FF;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68d8      	ldr	r0, [r3, #12]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1c59      	adds	r1, r3, #1
 80066a6:	6139      	str	r1, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	b2c2      	uxtb	r2, r0
 80066ac:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = (dest.id>>8) & 0x000000FF;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	1218      	asrs	r0, r3, #8
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	6139      	str	r1, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	b2c2      	uxtb	r2, r0
 80066c2:	701a      	strb	r2, [r3, #0]
	}


	/* extheader and signature -> add signature */
	if((buffer[0] & 1<<7) && (buffer[4] & 1<<4))
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da32      	bge.n	8006736 <_ZN5Frame9serializeERPh+0x25a>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3304      	adds	r3, #4
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d02a      	beq.n	8006736 <_ZN5Frame9serializeERPh+0x25a>
	{
		buffer[idx++] = signature & 0x000000FF;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	6139      	str	r1, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	b2c2      	uxtb	r2, r0
 80066f2:	701a      	strb	r2, [r3, #0]
        buffer[idx++] = (signature>>8) & 0x000000FF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	0a18      	lsrs	r0, r3, #8
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	6139      	str	r1, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	b2c2      	uxtb	r2, r0
 8006708:	701a      	strb	r2, [r3, #0]
        buffer[idx++] = (signature>>16) & 0x000000FF;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	0c18      	lsrs	r0, r3, #16
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	6139      	str	r1, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	b2c2      	uxtb	r2, r0
 800671e:	701a      	strb	r2, [r3, #0]
        buffer[idx++] = (signature>>24) & 0x000000FF;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	0e18      	lsrs	r0, r3, #24
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	6139      	str	r1, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	b2c2      	uxtb	r2, r0
 8006734:	701a      	strb	r2, [r3, #0]

	}


	/* fill payload */
	for(int i=0; i<payload_length && idx<blength; i++){
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e00e      	b.n	800675a <_ZN5Frame9serializeERPh+0x27e>
		buffer[idx++] = en_payload[i];}
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	441a      	add	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1c58      	adds	r0, r3, #1
 800674c:	6138      	str	r0, [r7, #16]
 800674e:	440b      	add	r3, r1
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<payload_length && idx<blength; i++){
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3301      	adds	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	da03      	bge.n	800676c <_ZN5Frame9serializeERPh+0x290>
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	dbe7      	blt.n	800673c <_ZN5Frame9serializeERPh+0x260>
        delete[] en_payload;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <_ZN5Frame9serializeERPh+0x2a2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	4618      	mov	r0, r3
 800677a:	f006 ffdd 	bl	800d738 <_ZdaPv>
	return blength;
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <_ZN5FrameC1Ev>:
		payload = new uint8_t[payload_length];
		memcpy(payload, &data[payload_start], payload_length);
	}
}

Frame::Frame()
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4618      	mov	r0, r3
 8006794:	f7fb f81f 	bl	80017d6 <_ZN7MacAddrC1Ev>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3308      	adds	r3, #8
 800679c:	4618      	mov	r0, r3
 800679e:	f7fb f81a 	bl	80017d6 <_ZN7MacAddrC1Ev>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	611a      	str	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	751a      	strb	r2, [r3, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	619a      	str	r2, [r3, #24]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80067c6:	2010      	movs	r0, #16
 80067c8:	f006 ffc9 	bl	800d75e <_Znaj>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	4618      	mov	r0, r3
 80067da:	f006 ffc0 	bl	800d75e <_Znaj>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f006 ffb7 	bl	800d75e <_Znaj>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	639a      	str	r2, [r3, #56]	@ 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	63da      	str	r2, [r3, #60]	@ 0x3c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40
{
	src = fmac.myAddr;
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <_ZN5FrameC1Ev+0xa4>)
 8006812:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800681c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000021c 	.word	0x2000021c

08006830 <_ZNK5FrameeqERKS_>:

bool Frame::operator== (const Frame& frm) const
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	if(src != frm.src)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7fb fb58 	bl	8001ef6 <_ZNK7MacAddrneERKS_>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <_ZNK5FrameeqERKS_+0x20>
		return false;
 800684c:	2300      	movs	r3, #0
 800684e:	e037      	b.n	80068c0 <_ZNK5FrameeqERKS_+0x90>

	if(dest != frm.dest)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f103 0208 	add.w	r2, r3, #8
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fb fb4a 	bl	8001ef6 <_ZNK7MacAddrneERKS_>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <_ZNK5FrameeqERKS_+0x3c>
		return false;
 8006868:	2300      	movs	r3, #0
 800686a:	e029      	b.n	80068c0 <_ZNK5FrameeqERKS_+0x90>

	if(type != frm.type)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <_ZNK5FrameeqERKS_+0x4c>
		return false;
 8006878:	2300      	movs	r3, #0
 800687a:	e021      	b.n	80068c0 <_ZNK5FrameeqERKS_+0x90>

	if(payload_length != frm.payload_length)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <_ZNK5FrameeqERKS_+0x5c>
		return false;
 8006888:	2300      	movs	r3, #0
 800688a:	e019      	b.n	80068c0 <_ZNK5FrameeqERKS_+0x90>

	for(int i=0; i<payload_length; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e010      	b.n	80068b4 <_ZNK5FrameeqERKS_+0x84>
		if(payload[i] != frm.payload[i])
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6a19      	ldr	r1, [r3, #32]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	440b      	add	r3, r1
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <_ZNK5FrameeqERKS_+0x7e>
			return false;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e008      	b.n	80068c0 <_ZNK5FrameeqERKS_+0x90>
	for(int i=0; i<payload_length; i++)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	dbe9      	blt.n	8006892 <_ZNK5FrameeqERKS_+0x62>

	return true;
 80068be:	2301      	movs	r3, #1
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_Z8random_ui>:
		srand(dwSeed);
	}
}

int random_u(int howbig)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	if (howbig == 0)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <_Z8random_ui+0x12>
	{
		return 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e009      	b.n	80068ee <_Z8random_ui+0x26>
	}

	return rand() % howbig;
 80068da:	f007 f837 	bl	800d94c <rand>
 80068de:	4603      	mov	r3, r0
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	fb93 f2f2 	sdiv	r2, r3, r2
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	fb01 f202 	mul.w	r2, r1, r2
 80068ec:	1a9b      	subs	r3, r3, r2
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <_Z6randomii>:

int random(int howsmall, int howbig)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
	if (howsmall >= howbig)
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	db01      	blt.n	800690c <_Z6randomii+0x16>
		return howsmall;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	e009      	b.n	8006920 <_Z6randomii+0x2a>

	int diff = howbig - howsmall;
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	60fb      	str	r3, [r7, #12]

	return random_u(diff) + howsmall;
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff ffd7 	bl	80068c8 <_Z8random_ui>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4413      	add	r3, r2
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <_ZN16Serial_InterfaceC1Ev>:
	void flarm_cmd_expires(char *ch_str);
	void flarm_cmd_power(char *ch_str);
#endif

//public:
	Serial_Interface() {};
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr>:
/*
 * Handle redirected App Stuff
 */

void Serial_Interface::handle_acked(bool ack, MacAddr &addr)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b096      	sub	sp, #88	@ 0x58
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	460b      	mov	r3, r1
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	72fb      	strb	r3, [r7, #11]
	if(myserial == NULL)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d019      	beq.n	8006992 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x4a>
		return;

	char buf[64];
	snprintf(buf, sizeof(buf), "%s,%X,%X\n", ack?FANET_CMD_ACK:FANET_CMD_NACK, addr.manufacturer, addr.id);
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x20>
 8006964:	490d      	ldr	r1, [pc, #52]	@ (800699c <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x54>)
 8006966:	e000      	b.n	800696a <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x22>
 8006968:	490d      	ldr	r1, [pc, #52]	@ (80069a0 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x58>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6852      	ldr	r2, [r2, #4]
 8006972:	f107 0010 	add.w	r0, r7, #16
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	460b      	mov	r3, r1
 800697c:	4a09      	ldr	r2, [pc, #36]	@ (80069a4 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x5c>)
 800697e:	2140      	movs	r1, #64	@ 0x40
 8006980:	f007 f968 	bl	800dc54 <sniprintf>
	print(buf);
 8006984:	f107 0310 	add.w	r3, r7, #16
 8006988:	4619      	mov	r1, r3
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f878 	bl	8006a80 <_ZN16Serial_Interface5printEPc>
 8006990:	e000      	b.n	8006994 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x4c>
		return;
 8006992:	bf00      	nop
}
 8006994:	3750      	adds	r7, #80	@ 0x50
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	0800ee2c 	.word	0x0800ee2c
 80069a0:	0800ee38 	.word	0x0800ee38
 80069a4:	0800ee44 	.word	0x0800ee44

080069a8 <_ZN16Serial_Interface12handle_frameEP5Frame>:

void Serial_Interface::handle_frame(Frame *frm)
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b0ad      	sub	sp, #180	@ 0xb4
 80069ac:	af06      	add	r7, sp, #24
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	if(myserial == NULL || frm == NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d055      	beq.n	8006a66 <_ZN16Serial_Interface12handle_frameEP5Frame+0xbe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d052      	beq.n	8006a66 <_ZN16Serial_Interface12handle_frameEP5Frame+0xbe>

	/* simply print frame */
	/* src_manufacturer,src_id,broadcast,signature,type,payloadlength,payload */

	char buf[128];
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681c      	ldr	r4, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685d      	ldr	r5, [r3, #4]
			FANET_CMD_START CMD_RX_FRAME, frm->src.manufacturer, frm->src.id, frm->dest==MacAddr(), (unsigned int)frm->signature,
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f103 0608 	add.w	r6, r3, #8
 80069ce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fa feff 	bl	80017d6 <_ZN7MacAddrC1Ev>
 80069d8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80069dc:	4619      	mov	r1, r3
 80069de:	4630      	mov	r0, r6
 80069e0:	f7fb fa70 	bl	8001ec4 <_ZNK7MacAddreqERKS_>
 80069e4:	4603      	mov	r3, r0
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 80069e6:	461e      	mov	r6, r3
			FANET_CMD_START CMD_RX_FRAME, frm->src.manufacturer, frm->src.id, frm->dest==MacAddr(), (unsigned int)frm->signature,
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	6912      	ldr	r2, [r2, #16]
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	69c9      	ldr	r1, [r1, #28]
 80069f4:	f107 000c 	add.w	r0, r7, #12
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	9204      	str	r2, [sp, #16]
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	9602      	str	r6, [sp, #8]
 8006a00:	9501      	str	r5, [sp, #4]
 8006a02:	9400      	str	r4, [sp, #0]
 8006a04:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <_ZN16Serial_Interface12handle_frameEP5Frame+0xc8>)
 8006a06:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <_ZN16Serial_Interface12handle_frameEP5Frame+0xcc>)
 8006a08:	2180      	movs	r1, #128	@ 0x80
 8006a0a:	f007 f923 	bl	800dc54 <sniprintf>
			frm->type, frm->payload_length);
	print(buf);
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f833 	bl	8006a80 <_ZN16Serial_Interface5printEPc>

	for(int i=0; i<frm->payload_length; i++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a20:	e016      	b.n	8006a50 <_ZN16Serial_Interface12handle_frameEP5Frame+0xa8>
	{
		snprintf(buf, sizeof(buf), "%02X", frm->payload[i]);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a2a:	4413      	add	r3, r2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f107 000c 	add.w	r0, r7, #12
 8006a32:	4a11      	ldr	r2, [pc, #68]	@ (8006a78 <_ZN16Serial_Interface12handle_frameEP5Frame+0xd0>)
 8006a34:	2180      	movs	r1, #128	@ 0x80
 8006a36:	f007 f90d 	bl	800dc54 <sniprintf>
		print(buf);
 8006a3a:	f107 030c 	add.w	r3, r7, #12
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f81d 	bl	8006a80 <_ZN16Serial_Interface5printEPc>
	for(int i=0; i<frm->payload_length; i++)
 8006a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	dbe2      	blt.n	8006a22 <_ZN16Serial_Interface12handle_frameEP5Frame+0x7a>
	}
	print((char*) "\n");
 8006a5c:	4907      	ldr	r1, [pc, #28]	@ (8006a7c <_ZN16Serial_Interface12handle_frameEP5Frame+0xd4>)
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f80e 	bl	8006a80 <_ZN16Serial_Interface5printEPc>
 8006a64:	e000      	b.n	8006a68 <_ZN16Serial_Interface12handle_frameEP5Frame+0xc0>
		return;
 8006a66:	bf00      	nop
}
 8006a68:	379c      	adds	r7, #156	@ 0x9c
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	0800ee50 	.word	0x0800ee50
 8006a74:	0800ee58 	.word	0x0800ee58
 8006a78:	0800ee70 	.word	0x0800ee70
 8006a7c:	0800ee78 	.word	0x0800ee78

08006a80 <_ZN16Serial_Interface5printEPc>:
	while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)"\n", 1) == HAL_BUSY);
	while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
}

void Serial_Interface::print(char *str)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	if(myserial == NULL || str == NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d026      	beq.n	8006ae0 <_ZN16Serial_Interface5printEPc+0x60>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <_ZN16Serial_Interface5printEPc+0x60>
		return;

	while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)str, strlen(str)) == HAL_BUSY);
 8006a98:	bf00      	nop
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681c      	ldr	r4, [r3, #0]
 8006aa0:	6838      	ldr	r0, [r7, #0]
 8006aa2:	f7f9 fb6d 	bl	8000180 <strlen>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f002 fce6 	bl	8009480 <HAL_UART_Transmit_IT>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1ea      	bne.n	8006a9a <_ZN16Serial_Interface5printEPc+0x1a>
	while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 8006ac4:	bf00      	nop
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f3      	bne.n	8006ac6 <_ZN16Serial_Interface5printEPc+0x46>
 8006ade:	e000      	b.n	8006ae2 <_ZN16Serial_Interface5printEPc+0x62>
		return;
 8006ae0:	bf00      	nop
}
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd90      	pop	{r4, r7, pc}

08006ae8 <_Z41__static_initialization_and_destruction_0ii>:

Serial_Interface serial_int = Serial_Interface();
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d102      	bne.n	8006b08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006b02:	4803      	ldr	r0, [pc, #12]	@ (8006b10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006b04:	f7ff ff10 	bl	8006928 <_ZN16Serial_InterfaceC1Ev>
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	200003a4 	.word	0x200003a4

08006b14 <_GLOBAL__sub_I__ZN16Serial_Interface15fanet_cmd_stateEPc>:
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f7ff ffe3 	bl	8006ae8 <_Z41__static_initialization_and_destruction_0ii>
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <sx1272_get_airlimit>:
#endif

float sx1272_get_airlimit(void) //dummy placeholder
{
	return 1;
}
 8006b24:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006b28:	4770      	bx	lr

08006b2a <sx1272_isArmed>:


bool sx1272_isArmed(void) //dummy placeholder
{
	return true;
}
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	4770      	bx	lr

08006b2e <sx1272_sendFrame>:

int sx1272_sendFrame(uint8_t *data, int length, uint8_t cr) //dummy placeholder
{
return 0;
}
 8006b2e:	2000      	movs	r0, #0
 8006b30:	4770      	bx	lr
	...

08006b34 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8006b34:	480d      	ldr	r0, [pc, #52]	@ (8006b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b38:	f000 f9b7 	bl	8006eaa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b3c:	480c      	ldr	r0, [pc, #48]	@ (8006b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b3e:	490d      	ldr	r1, [pc, #52]	@ (8006b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b40:	4a0d      	ldr	r2, [pc, #52]	@ (8006b78 <LoopForever+0xe>)
  movs r3, #0
 8006b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b44:	e002      	b.n	8006b4c <LoopCopyDataInit>

08006b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b4a:	3304      	adds	r3, #4

08006b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b50:	d3f9      	bcc.n	8006b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b52:	4a0a      	ldr	r2, [pc, #40]	@ (8006b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b54:	4c0a      	ldr	r4, [pc, #40]	@ (8006b80 <LoopForever+0x16>)
  movs r3, #0
 8006b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b58:	e001      	b.n	8006b5e <LoopFillZerobss>

08006b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b5c:	3204      	adds	r2, #4

08006b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b60:	d3fb      	bcc.n	8006b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006b62:	f007 f9a3 	bl	800deac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b66:	f7fa f882 	bl	8000c6e <main>

08006b6a <LoopForever>:

LoopForever:
    b LoopForever
 8006b6a:	e7fe      	b.n	8006b6a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8006b6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006b78:	0800f560 	.word	0x0800f560
  ldr r2, =_sbss
 8006b7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006b80:	20000af8 	.word	0x20000af8

08006b84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b84:	e7fe      	b.n	8006b84 <ADC_IRQHandler>

08006b86 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8006b86:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8006b88:	f7fa fa02 	bl	8000f90 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8006b8c:	f000 f808 	bl	8006ba0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8006b90:	bd08      	pop	{r3, pc}

08006b92 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8006b92:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	f006 fa18 	bl	800cfcc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8006b9c:	bd08      	pop	{r3, pc}
	...

08006ba0 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b08b      	sub	sp, #44	@ 0x2c
 8006ba4:	af0a      	add	r7, sp, #40	@ 0x28
  //UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
  //UTIL_TIMER_Start(&timerLed);
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8006ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c58 <SubghzApp_Init+0xb8>)
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c5c <SubghzApp_Init+0xbc>)
 8006baa:	601a      	str	r2, [r3, #0]
  RadioEvents.TxTimeout = OnTxTimeout;
 8006bac:	4b2a      	ldr	r3, [pc, #168]	@ (8006c58 <SubghzApp_Init+0xb8>)
 8006bae:	4a2c      	ldr	r2, [pc, #176]	@ (8006c60 <SubghzApp_Init+0xc0>)
 8006bb0:	605a      	str	r2, [r3, #4]

  Radio.Init(&RadioEvents);
 8006bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006c64 <SubghzApp_Init+0xc4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4828      	ldr	r0, [pc, #160]	@ (8006c58 <SubghzApp_Init+0xb8>)
 8006bb8:	4798      	blx	r3

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8006bba:	4b2a      	ldr	r3, [pc, #168]	@ (8006c64 <SubghzApp_Init+0xc4>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	482a      	ldr	r0, [pc, #168]	@ (8006c68 <SubghzApp_Init+0xc8>)
 8006bc0:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c6c <SubghzApp_Init+0xcc>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f006 f8b5 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8006bce:	4b28      	ldr	r3, [pc, #160]	@ (8006c70 <SubghzApp_Init+0xd0>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	2002      	movs	r0, #2
 8006bd6:	f006 f8af 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8006bda:	23fa      	movs	r3, #250	@ 0xfa
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <SubghzApp_Init+0xd4>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	2002      	movs	r0, #2
 8006be6:	f006 f8a7 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8006bea:	2307      	movs	r3, #7
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4b22      	ldr	r3, [pc, #136]	@ (8006c78 <SubghzApp_Init+0xd8>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	2002      	movs	r0, #2
 8006bf6:	f006 f89f 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <SubghzApp_Init+0xc4>)
 8006bfc:	69dc      	ldr	r4, [r3, #28]
 8006bfe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006c02:	9308      	str	r3, [sp, #32]
 8006c04:	2300      	movs	r3, #0
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9306      	str	r3, [sp, #24]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	2301      	movs	r3, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	2300      	movs	r3, #0
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	2308      	movs	r3, #8
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	2307      	movs	r3, #7
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2301      	movs	r3, #1
 8006c26:	2200      	movs	r2, #0
 8006c28:	210e      	movs	r1, #14
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <SubghzApp_Init+0xc4>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c32:	21ff      	movs	r1, #255	@ 0xff
 8006c34:	2001      	movs	r0, #1
 8006c36:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8006c38:	22ff      	movs	r2, #255	@ 0xff
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	480f      	ldr	r0, [pc, #60]	@ (8006c7c <SubghzApp_Init+0xdc>)
 8006c3e:	f007 f880 	bl	800dd42 <memset>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 8006c42:	4a0f      	ldr	r2, [pc, #60]	@ (8006c80 <SubghzApp_Init+0xe0>)
 8006c44:	2100      	movs	r1, #0
 8006c46:	2001      	movs	r0, #1
 8006c48:	f006 fa56 	bl	800d0f8 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
   // while(1){
  PingPong_Process();
 8006c4c:	f000 f832 	bl	8006cb4 <_ZL16PingPong_Processv>
}
 8006c50:	bf00      	nop
 8006c52:	3704      	adds	r7, #4
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd90      	pop	{r4, r7, pc}
 8006c58:	200003ac 	.word	0x200003ac
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c9d 	.word	0x08006c9d
 8006c64:	0800f1b4 	.word	0x0800f1b4
 8006c68:	33bca100 	.word	0x33bca100
 8006c6c:	0800ee84 	.word	0x0800ee84
 8006c70:	0800ee98 	.word	0x0800ee98
 8006c74:	0800eeac 	.word	0x0800eeac
 8006c78:	0800eec0 	.word	0x0800eec0
 8006c7c:	200003c8 	.word	0x200003c8
 8006c80:	08006cb5 	.word	0x08006cb5

08006c84 <_ZL8OnTxDonev>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <_ZL8OnTxDonev+0x14>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f006 f852 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  //State = TX;
  /* Run PingPong process in background*/
  //UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnTxDone */
}
 8006c94:	bf00      	nop
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	0800eed0 	.word	0x0800eed0

08006c9c <_ZL11OnTxTimeoutv>:

static void OnTxTimeout(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 8006ca0:	4b03      	ldr	r3, [pc, #12]	@ (8006cb0 <_ZL11OnTxTimeoutv+0x14>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	f006 f846 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  //State = TX_TIMEOUT;
  /* Run PingPong process in background*/
  //UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnTxTimeout */
}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	0800eedc 	.word	0x0800eedc

08006cb4 <_ZL16PingPong_Processv>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 8006cb4:	b5b0      	push	{r4, r5, r7, lr}
 8006cb6:	b09e      	sub	sp, #120	@ 0x78
 8006cb8:	af00      	add	r7, sp, #0
	Frame frm;
 8006cba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fd62 	bl	8006788 <_ZN5FrameC1Ev>
	uint8_t ch_str[] = "#FNT 0,e0,7eb6,1,1,20,010203040506070809";
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d38 <_ZL16PingPong_Processv+0x84>)
 8006cc6:	1d3c      	adds	r4, r7, #4
 8006cc8:	461d      	mov	r5, r3
 8006cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cd6:	c403      	stmia	r4!, {r0, r1}
 8006cd8:	7022      	strb	r2, [r4, #0]
	frm.src.id= 0x2212;
 8006cda:	f242 2312 	movw	r3, #8722	@ 0x2212
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
	frm.src.manufacturer = 0x12;
 8006ce0:	2312      	movs	r3, #18
 8006ce2:	633b      	str	r3, [r7, #48]	@ 0x30
	while(1){

		  frm.parseFrameData(reinterpret_cast<char*>(ch_str));
 8006ce4:	1d3a      	adds	r2, r7, #4
 8006ce6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fa95 	bl	800621c <_ZN5Frame14parseFrameDataEPc>
		  frm.data_encrypt();
 8006cf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fb39 	bl	800636e <_ZN5Frame12data_encryptEv>
		  uint8_t *buffer = nullptr;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	603b      	str	r3, [r7, #0]

		  int length = frm.serialize(buffer);
 8006d00:	463a      	mov	r2, r7
 8006d02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fbe7 	bl	80064dc <_ZN5Frame9serializeERPh>
 8006d0e:	6778      	str	r0, [r7, #116]	@ 0x74

  memcpy(BufferTx, buffer, length);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d14:	4619      	mov	r1, r3
 8006d16:	4809      	ldr	r0, [pc, #36]	@ (8006d3c <_ZL16PingPong_Processv+0x88>)
 8006d18:	f007 f8ef 	bl	800defa <memcpy>
  Radio.Send(BufferTx, length);
 8006d1c:	4b08      	ldr	r3, [pc, #32]	@ (8006d40 <_ZL16PingPong_Processv+0x8c>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	4611      	mov	r1, r2
 8006d26:	4805      	ldr	r0, [pc, #20]	@ (8006d3c <_ZL16PingPong_Processv+0x88>)
 8006d28:	4798      	blx	r3
  HAL_Delay(500);
 8006d2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006d2e:	f7fa f96f 	bl	8001010 <HAL_Delay>
  //frm.counter++;
	}
 8006d32:	bf00      	nop
 8006d34:	e7d6      	b.n	8006ce4 <_ZL16PingPong_Processv+0x30>
 8006d36:	bf00      	nop
 8006d38:	0800eeec 	.word	0x0800eeec
 8006d3c:	200003c8 	.word	0x200003c8
 8006d40:	0800f1b4 	.word	0x0800f1b4

08006d44 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006d44:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8006d46:	f000 f815 	bl	8006d74 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006d4a:	bd08      	pop	{r3, pc}

08006d4c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006d4c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8006d4e:	f000 f853 	bl	8006df8 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8006d52:	bd08      	pop	{r3, pc}

08006d54 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8006d54:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8006d56:	f000 f89d 	bl	8006e94 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8006d5a:	bd08      	pop	{r3, pc}

08006d5c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006d5c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8006d5e:	f000 f89b 	bl	8006e98 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006d62:	bd08      	pop	{r3, pc}

08006d64 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8006d64:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8006d66:	f000 f899 	bl	8006e9c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006d6a:	bd08      	pop	{r3, pc}

08006d6c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8006d6c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8006d6e:	f000 f897 	bl	8006ea0 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8006d72:	bd08      	pop	{r3, pc}

08006d74 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	9401      	str	r4, [sp, #4]
 8006d7e:	9402      	str	r4, [sp, #8]
 8006d80:	9403      	str	r4, [sp, #12]
 8006d82:	9404      	str	r4, [sp, #16]
 8006d84:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d8c:	f042 0204 	orr.w	r2, r2, #4
 8006d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006d9a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8006d9c:	2710      	movs	r7, #16
 8006d9e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8006da0:	2301      	movs	r3, #1
 8006da2:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da4:	2303      	movs	r3, #3
 8006da6:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8006da8:	4d12      	ldr	r5, [pc, #72]	@ (8006df4 <BSP_RADIO_Init+0x80>)
 8006daa:	a901      	add	r1, sp, #4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 fbbd 	bl	800752c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8006db2:	f04f 0820 	mov.w	r8, #32
 8006db6:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8006dba:	a901      	add	r1, sp, #4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 fbb5 	bl	800752c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8006dc2:	2608      	movs	r6, #8
 8006dc4:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8006dc6:	a901      	add	r1, sp, #4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 fbaf 	bl	800752c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fcfa 	bl	80077cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 fcf5 	bl	80077cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8006de2:	4622      	mov	r2, r4
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fcf0 	bl	80077cc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8006dec:	4620      	mov	r0, r4
 8006dee:	b006      	add	sp, #24
 8006df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df4:	48000800 	.word	0x48000800

08006df8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8006df8:	b510      	push	{r4, lr}
  switch (Config)
 8006dfa:	2803      	cmp	r0, #3
 8006dfc:	d813      	bhi.n	8006e26 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8006dfe:	e8df f000 	tbb	[pc, r0]
 8006e02:	1402      	.short	0x1402
 8006e04:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8006e06:	4c22      	ldr	r4, [pc, #136]	@ (8006e90 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2108      	movs	r1, #8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fcdd 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2110      	movs	r1, #16
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 fcd8 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2120      	movs	r1, #32
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fcd3 	bl	80077cc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8006e26:	2000      	movs	r0, #0
 8006e28:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8006e2a:	4c19      	ldr	r4, [pc, #100]	@ (8006e90 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	2108      	movs	r1, #8
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fccb 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8006e36:	2201      	movs	r2, #1
 8006e38:	2110      	movs	r1, #16
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fcc6 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8006e40:	2200      	movs	r2, #0
 8006e42:	2120      	movs	r1, #32
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fcc1 	bl	80077cc <HAL_GPIO_WritePin>
      break;
 8006e4a:	e7ec      	b.n	8006e26 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8006e4c:	4c10      	ldr	r4, [pc, #64]	@ (8006e90 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	2108      	movs	r1, #8
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 fcba 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8006e58:	2201      	movs	r2, #1
 8006e5a:	2110      	movs	r1, #16
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fcb5 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8006e62:	2201      	movs	r2, #1
 8006e64:	2120      	movs	r1, #32
 8006e66:	4620      	mov	r0, r4
 8006e68:	f000 fcb0 	bl	80077cc <HAL_GPIO_WritePin>
      break;
 8006e6c:	e7db      	b.n	8006e26 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8006e6e:	4c08      	ldr	r4, [pc, #32]	@ (8006e90 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	2108      	movs	r1, #8
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fca9 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2110      	movs	r1, #16
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fca4 	bl	80077cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8006e84:	2201      	movs	r2, #1
 8006e86:	2120      	movs	r1, #32
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fc9f 	bl	80077cc <HAL_GPIO_WritePin>
      break;
 8006e8e:	e7ca      	b.n	8006e26 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8006e90:	48000800 	.word	0x48000800

08006e94 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8006e94:	2000      	movs	r0, #0
 8006e96:	4770      	bx	lr

08006e98 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8006e98:	2001      	movs	r0, #1
 8006e9a:	4770      	bx	lr

08006e9c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	4770      	bx	lr

08006ea0 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8006ea0:	b908      	cbnz	r0, 8006ea6 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8006ea2:	200f      	movs	r0, #15
 8006ea4:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8006ea6:	2016      	movs	r0, #22
  }

  return ret;
}
 8006ea8:	4770      	bx	lr

08006eaa <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8006eaa:	4770      	bx	lr

08006eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006eac:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eae:	2003      	movs	r0, #3
 8006eb0:	f000 f88c 	bl	8006fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006eb4:	f000 fe1a 	bl	8007aec <HAL_RCC_GetHCLKFreq>
 8006eb8:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <HAL_Init+0x28>)
 8006eba:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ebc:	200f      	movs	r0, #15
 8006ebe:	f7fa f899 	bl	8000ff4 <HAL_InitTick>
 8006ec2:	b110      	cbz	r0, 8006eca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8006ec4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	4604      	mov	r4, r0
    HAL_MspInit();
 8006ecc:	f7f9 ffe2 	bl	8000e94 <HAL_MspInit>
 8006ed0:	e7f9      	b.n	8006ec6 <HAL_Init+0x1a>
 8006ed2:	bf00      	nop
 8006ed4:	20000000 	.word	0x20000000

08006ed8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8006ed8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006edc:	6913      	ldr	r3, [r2, #16]
 8006ede:	f023 0302 	bic.w	r3, r3, #2
 8006ee2:	6113      	str	r3, [r2, #16]
}
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8006ee6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006eea:	6913      	ldr	r3, [r2, #16]
 8006eec:	f043 0302 	orr.w	r3, r3, #2
 8006ef0:	6113      	str	r3, [r2, #16]
}
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006ef4:	4a02      	ldr	r2, [pc, #8]	@ (8006f00 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8006ef6:	6853      	ldr	r3, [r2, #4]
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8006efe:	4770      	bx	lr
 8006f00:	e0042000 	.word	0xe0042000

08006f04 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006f04:	4a02      	ldr	r2, [pc, #8]	@ (8006f10 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8006f06:	6853      	ldr	r3, [r2, #4]
 8006f08:	f023 0302 	bic.w	r3, r3, #2
 8006f0c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8006f0e:	4770      	bx	lr
 8006f10:	e0042000 	.word	0xe0042000

08006f14 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006f14:	4a02      	ldr	r2, [pc, #8]	@ (8006f20 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8006f16:	6853      	ldr	r3, [r2, #4]
 8006f18:	f023 0304 	bic.w	r3, r3, #4
 8006f1c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8006f1e:	4770      	bx	lr
 8006f20:	e0042000 	.word	0xe0042000

08006f24 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006f24:	2800      	cmp	r0, #0
 8006f26:	db07      	blt.n	8006f38 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f28:	f000 021f 	and.w	r2, r0, #31
 8006f2c:	0940      	lsrs	r0, r0, #5
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4093      	lsls	r3, r2
 8006f32:	4a02      	ldr	r2, [pc, #8]	@ (8006f3c <__NVIC_EnableIRQ+0x18>)
 8006f34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	e000e100 	.word	0xe000e100

08006f40 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006f40:	2800      	cmp	r0, #0
 8006f42:	db0c      	blt.n	8006f5e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f44:	f000 021f 	and.w	r2, r0, #31
 8006f48:	0940      	lsrs	r0, r0, #5
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4093      	lsls	r3, r2
 8006f4e:	3020      	adds	r0, #32
 8006f50:	4a03      	ldr	r2, [pc, #12]	@ (8006f60 <__NVIC_DisableIRQ+0x20>)
 8006f52:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f5a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006f5e:	4770      	bx	lr
 8006f60:	e000e100 	.word	0xe000e100

08006f64 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db08      	blt.n	8006f7a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f68:	0109      	lsls	r1, r1, #4
 8006f6a:	b2c9      	uxtb	r1, r1
 8006f6c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006f70:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006f74:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8006f78:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f7a:	f000 000f 	and.w	r0, r0, #15
 8006f7e:	0109      	lsls	r1, r1, #4
 8006f80:	b2c9      	uxtb	r1, r1
 8006f82:	4b01      	ldr	r3, [pc, #4]	@ (8006f88 <__NVIC_SetPriority+0x24>)
 8006f84:	5419      	strb	r1, [r3, r0]
  }
}
 8006f86:	4770      	bx	lr
 8006f88:	e000ed14 	.word	0xe000ed14

08006f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f8c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f8e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f92:	f1c0 0c07 	rsb	ip, r0, #7
 8006f96:	f1bc 0f04 	cmp.w	ip, #4
 8006f9a:	bf28      	it	cs
 8006f9c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fa0:	1d03      	adds	r3, r0, #4
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d90f      	bls.n	8006fc6 <NVIC_EncodePriority+0x3a>
 8006fa6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa8:	f04f 3eff 	mov.w	lr, #4294967295
 8006fac:	fa0e f00c 	lsl.w	r0, lr, ip
 8006fb0:	ea21 0100 	bic.w	r1, r1, r0
 8006fb4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fb6:	fa0e fe03 	lsl.w	lr, lr, r3
 8006fba:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8006fbe:	ea41 0002 	orr.w	r0, r1, r2
 8006fc2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e7ee      	b.n	8006fa8 <NVIC_EncodePriority+0x1c>
	...

08006fcc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fcc:	4a07      	ldr	r2, [pc, #28]	@ (8006fec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006fce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fd8:	0200      	lsls	r0, r0, #8
 8006fda:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fde:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006fe8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006fea:	4770      	bx	lr
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <HAL_NVIC_SetPriority+0x1c>)
 8006ff6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ff8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8006ffc:	f7ff ffc6 	bl	8006f8c <NVIC_EncodePriority>
 8007000:	4601      	mov	r1, r0
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff ffae 	bl	8006f64 <__NVIC_SetPriority>
}
 8007008:	bd10      	pop	{r4, pc}
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007010:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007012:	f7ff ff87 	bl	8006f24 <__NVIC_EnableIRQ>
}
 8007016:	bd08      	pop	{r3, pc}

08007018 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007018:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800701a:	f7ff ff91 	bl	8006f40 <__NVIC_DisableIRQ>
}
 800701e:	bd08      	pop	{r3, pc}

08007020 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007020:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007022:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8007024:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8007028:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800702c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800702e:	b124      	cbz	r4, 800703a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007030:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8007032:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8007036:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800703a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800703c:	f004 0c1c 	and.w	ip, r4, #28
 8007040:	2401      	movs	r4, #1
 8007042:	fa04 f40c 	lsl.w	r4, r4, ip
 8007046:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 800704a:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800704e:	6804      	ldr	r4, [r0, #0]
 8007050:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007052:	6883      	ldr	r3, [r0, #8]
 8007054:	2b10      	cmp	r3, #16
 8007056:	d005      	beq.n	8007064 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007058:	6803      	ldr	r3, [r0, #0]
 800705a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	60da      	str	r2, [r3, #12]
  }
}
 8007060:	bc10      	pop	{r4}
 8007062:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8007064:	6803      	ldr	r3, [r0, #0]
 8007066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007068:	6803      	ldr	r3, [r0, #0]
 800706a:	60d9      	str	r1, [r3, #12]
 800706c:	e7f8      	b.n	8007060 <DMA_SetConfig+0x40>
	...

08007070 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	4a14      	ldr	r2, [pc, #80]	@ (80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d816      	bhi.n	80070a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007078:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800707a:	f022 0203 	bic.w	r2, r2, #3
 800707e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007082:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8007086:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007088:	b2db      	uxtb	r3, r3
 800708a:	3b08      	subs	r3, #8
 800708c:	4a0e      	ldr	r2, [pc, #56]	@ (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007094:	4a0d      	ldr	r2, [pc, #52]	@ (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8007096:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2201      	movs	r2, #1
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80070a4:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80070a6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80070a8:	f022 0103 	bic.w	r1, r2, #3
 80070ac:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80070ae:	440a      	add	r2, r1
 80070b0:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	3b08      	subs	r3, #8
 80070b6:	4a04      	ldr	r2, [pc, #16]	@ (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	3307      	adds	r3, #7
 80070c0:	e7e8      	b.n	8007094 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80070c2:	bf00      	nop
 80070c4:	40020407 	.word	0x40020407
 80070c8:	cccccccd 	.word	0xcccccccd
 80070cc:	40020880 	.word	0x40020880
 80070d0:	4002081c 	.word	0x4002081c

080070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070d4:	6843      	ldr	r3, [r0, #4]
 80070d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070da:	4a07      	ldr	r2, [pc, #28]	@ (80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80070dc:	441a      	add	r2, r3
 80070de:	0092      	lsls	r2, r2, #2
 80070e0:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070e2:	4a06      	ldr	r2, [pc, #24]	@ (80070fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80070e4:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80070e6:	3b01      	subs	r3, #1
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	2201      	movs	r2, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	1000823f 	.word	0x1000823f
 80070fc:	40020940 	.word	0x40020940

08007100 <HAL_DMA_Init>:
  if (hdma == NULL)
 8007100:	2800      	cmp	r0, #0
 8007102:	d060      	beq.n	80071c6 <HAL_DMA_Init+0xc6>
{
 8007104:	b510      	push	{r4, lr}
 8007106:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007108:	6802      	ldr	r2, [r0, #0]
 800710a:	4b30      	ldr	r3, [pc, #192]	@ (80071cc <HAL_DMA_Init+0xcc>)
 800710c:	429a      	cmp	r2, r3
 800710e:	d842      	bhi.n	8007196 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007110:	4b2f      	ldr	r3, [pc, #188]	@ (80071d0 <HAL_DMA_Init+0xd0>)
 8007112:	4413      	add	r3, r2
 8007114:	492f      	ldr	r1, [pc, #188]	@ (80071d4 <HAL_DMA_Init+0xd4>)
 8007116:	fba1 1303 	umull	r1, r3, r1, r3
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007120:	4b2d      	ldr	r3, [pc, #180]	@ (80071d8 <HAL_DMA_Init+0xd8>)
 8007122:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8007124:	2302      	movs	r3, #2
 8007126:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007136:	6821      	ldr	r1, [r4, #0]
 8007138:	680a      	ldr	r2, [r1, #0]
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	68e0      	ldr	r0, [r4, #12]
 800713e:	4303      	orrs	r3, r0
 8007140:	6920      	ldr	r0, [r4, #16]
 8007142:	4303      	orrs	r3, r0
 8007144:	6960      	ldr	r0, [r4, #20]
 8007146:	4303      	orrs	r3, r0
 8007148:	69a0      	ldr	r0, [r4, #24]
 800714a:	4303      	orrs	r3, r0
 800714c:	69e0      	ldr	r0, [r4, #28]
 800714e:	4303      	orrs	r3, r0
 8007150:	6a20      	ldr	r0, [r4, #32]
 8007152:	4303      	orrs	r3, r0
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007158:	4620      	mov	r0, r4
 800715a:	f7ff ff89 	bl	8007070 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007164:	d022      	beq.n	80071ac <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800716a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800716e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007170:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007172:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007174:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	2b03      	cmp	r3, #3
 800717c:	d919      	bls.n	80071b2 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8007182:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007184:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007186:	2000      	movs	r0, #0
 8007188:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800718a:	2301      	movs	r3, #1
 800718c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8007190:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8007194:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007196:	4b11      	ldr	r3, [pc, #68]	@ (80071dc <HAL_DMA_Init+0xdc>)
 8007198:	4413      	add	r3, r2
 800719a:	490e      	ldr	r1, [pc, #56]	@ (80071d4 <HAL_DMA_Init+0xd4>)
 800719c:	fba1 1303 	umull	r1, r3, r1, r3
 80071a0:	091b      	lsrs	r3, r3, #4
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80071a6:	4b0e      	ldr	r3, [pc, #56]	@ (80071e0 <HAL_DMA_Init+0xe0>)
 80071a8:	6403      	str	r3, [r0, #64]	@ 0x40
 80071aa:	e7bb      	b.n	8007124 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80071ac:	2300      	movs	r3, #0
 80071ae:	6063      	str	r3, [r4, #4]
 80071b0:	e7d9      	b.n	8007166 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff ff8e 	bl	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80071b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071c0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	e7df      	b.n	8007186 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80071c6:	2001      	movs	r0, #1
}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40020407 	.word	0x40020407
 80071d0:	bffdfff8 	.word	0xbffdfff8
 80071d4:	cccccccd 	.word	0xcccccccd
 80071d8:	40020000 	.word	0x40020000
 80071dc:	bffdfbf8 	.word	0xbffdfbf8
 80071e0:	40020400 	.word	0x40020400

080071e4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d04b      	beq.n	8007280 <HAL_DMA_DeInit+0x9c>
{
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80071ec:	6802      	ldr	r2, [r0, #0]
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80071f6:	6802      	ldr	r2, [r0, #0]
 80071f8:	4b22      	ldr	r3, [pc, #136]	@ (8007284 <HAL_DMA_DeInit+0xa0>)
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d82c      	bhi.n	8007258 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071fe:	4b22      	ldr	r3, [pc, #136]	@ (8007288 <HAL_DMA_DeInit+0xa4>)
 8007200:	4413      	add	r3, r2
 8007202:	4922      	ldr	r1, [pc, #136]	@ (800728c <HAL_DMA_DeInit+0xa8>)
 8007204:	fba1 1303 	umull	r1, r3, r1, r3
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800720e:	4b20      	ldr	r3, [pc, #128]	@ (8007290 <HAL_DMA_DeInit+0xac>)
 8007210:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8007212:	2500      	movs	r5, #0
 8007214:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007216:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007218:	f003 021c 	and.w	r2, r3, #28
 800721c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800721e:	2301      	movs	r3, #1
 8007220:	4093      	lsls	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007224:	4620      	mov	r0, r4
 8007226:	f7ff ff23 	bl	8007070 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800722a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800722c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800722e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007230:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007232:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	3b01      	subs	r3, #1
 8007238:	2b03      	cmp	r3, #3
 800723a:	d918      	bls.n	800726e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 800723c:	2000      	movs	r0, #0
 800723e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8007240:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8007242:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8007244:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007246:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007248:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800724a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800724c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800724e:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8007252:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8007256:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <HAL_DMA_DeInit+0xb0>)
 800725a:	4413      	add	r3, r2
 800725c:	490b      	ldr	r1, [pc, #44]	@ (800728c <HAL_DMA_DeInit+0xa8>)
 800725e:	fba1 1303 	umull	r1, r3, r1, r3
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007268:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_DMA_DeInit+0xb4>)
 800726a:	6403      	str	r3, [r0, #64]	@ 0x40
 800726c:	e7d1      	b.n	8007212 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800726e:	4620      	mov	r0, r4
 8007270:	f7ff ff30 	bl	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007274:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007276:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800727a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800727c:	605a      	str	r2, [r3, #4]
 800727e:	e7dd      	b.n	800723c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8007280:	2001      	movs	r0, #1
}
 8007282:	4770      	bx	lr
 8007284:	40020407 	.word	0x40020407
 8007288:	bffdfff8 	.word	0xbffdfff8
 800728c:	cccccccd 	.word	0xcccccccd
 8007290:	40020000 	.word	0x40020000
 8007294:	bffdfbf8 	.word	0xbffdfbf8
 8007298:	40020400 	.word	0x40020400

0800729c <HAL_DMA_Start_IT>:
{
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80072a0:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80072a4:	2801      	cmp	r0, #1
 80072a6:	d043      	beq.n	8007330 <HAL_DMA_Start_IT+0x94>
 80072a8:	2001      	movs	r0, #1
 80072aa:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80072ae:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80072b2:	b2c0      	uxtb	r0, r0
 80072b4:	2801      	cmp	r0, #1
 80072b6:	d006      	beq.n	80072c6 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80072b8:	2380      	movs	r3, #128	@ 0x80
 80072ba:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80072bc:	2300      	movs	r3, #0
 80072be:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80072c2:	2001      	movs	r0, #1
}
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80072c6:	2002      	movs	r0, #2
 80072c8:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072cc:	2000      	movs	r0, #0
 80072ce:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80072d0:	6825      	ldr	r5, [r4, #0]
 80072d2:	6828      	ldr	r0, [r5, #0]
 80072d4:	f020 0001 	bic.w	r0, r0, #1
 80072d8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072da:	4620      	mov	r0, r4
 80072dc:	f7ff fea0 	bl	8007020 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80072e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80072e2:	b1d3      	cbz	r3, 800731a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	f043 030e 	orr.w	r3, r3, #14
 80072ec:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80072ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80072f6:	d003      	beq.n	8007300 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072fe:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8007300:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007302:	b11b      	cbz	r3, 800730c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800730a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2000      	movs	r0, #0
 8007318:	e7d4      	b.n	80072c4 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	f023 0304 	bic.w	r3, r3, #4
 8007322:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	6813      	ldr	r3, [r2, #0]
 8007328:	f043 030a 	orr.w	r3, r3, #10
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e7de      	b.n	80072ee <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8007330:	2002      	movs	r0, #2
 8007332:	e7c7      	b.n	80072c4 <HAL_DMA_Start_IT+0x28>

08007334 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8007334:	4603      	mov	r3, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d034      	beq.n	80073a4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800733a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	2a02      	cmp	r2, #2
 8007342:	d006      	beq.n	8007352 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007344:	2204      	movs	r2, #4
 8007346:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8007348:	2200      	movs	r2, #0
 800734a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800734e:	2001      	movs	r0, #1
 8007350:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007352:	6801      	ldr	r1, [r0, #0]
 8007354:	680a      	ldr	r2, [r1, #0]
 8007356:	f022 020e 	bic.w	r2, r2, #14
 800735a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800735c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800735e:	680a      	ldr	r2, [r1, #0]
 8007360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007364:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8007366:	6801      	ldr	r1, [r0, #0]
 8007368:	680a      	ldr	r2, [r1, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007370:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007372:	f002 011c 	and.w	r1, r2, #28
 8007376:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8007378:	2201      	movs	r2, #1
 800737a:	408a      	lsls	r2, r1
 800737c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800737e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007380:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007382:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8007384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007386:	b132      	cbz	r2, 8007396 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007388:	6811      	ldr	r1, [r2, #0]
 800738a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800738e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007390:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007392:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8007394:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800739c:	2000      	movs	r0, #0
 800739e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 80073a2:	4770      	bx	lr
    return HAL_ERROR;
 80073a4:	2001      	movs	r0, #1
}
 80073a6:	4770      	bx	lr

080073a8 <HAL_DMA_Abort_IT>:
{
 80073a8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80073aa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d003      	beq.n	80073bc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b4:	2304      	movs	r3, #4
 80073b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
}
 80073ba:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	f023 030e 	bic.w	r3, r3, #14
 80073c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80073c6:	6802      	ldr	r2, [r0, #0]
 80073c8:	6813      	ldr	r3, [r2, #0]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073d0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80073da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80073dc:	f003 021c 	and.w	r2, r3, #28
 80073e0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80073e2:	2301      	movs	r3, #1
 80073e4:	4093      	lsls	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073e8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80073ea:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80073ec:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80073ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80073f0:	b133      	cbz	r3, 8007400 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073fa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80073fc:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80073fe:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007400:	2301      	movs	r3, #1
 8007402:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8007406:	2300      	movs	r3, #0
 8007408:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 800740c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800740e:	b113      	cbz	r3, 8007416 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8007410:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2000      	movs	r0, #0
 8007414:	e7d1      	b.n	80073ba <HAL_DMA_Abort_IT+0x12>
 8007416:	2000      	movs	r0, #0
 8007418:	e7cf      	b.n	80073ba <HAL_DMA_Abort_IT+0x12>
	...

0800741c <HAL_DMA_IRQHandler>:
{
 800741c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800741e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007420:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007422:	6804      	ldr	r4, [r0, #0]
 8007424:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007426:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007428:	f003 031c 	and.w	r3, r3, #28
 800742c:	2204      	movs	r2, #4
 800742e:	409a      	lsls	r2, r3
 8007430:	420a      	tst	r2, r1
 8007432:	d015      	beq.n	8007460 <HAL_DMA_IRQHandler+0x44>
 8007434:	f015 0f04 	tst.w	r5, #4
 8007438:	d012      	beq.n	8007460 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f013 0f20 	tst.w	r3, #32
 8007440:	d103      	bne.n	800744a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800744a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800744c:	f003 021c 	and.w	r2, r3, #28
 8007450:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007452:	2304      	movs	r3, #4
 8007454:	4093      	lsls	r3, r2
 8007456:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8007458:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800745a:	b103      	cbz	r3, 800745e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800745c:	4798      	blx	r3
}
 800745e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007460:	2202      	movs	r2, #2
 8007462:	409a      	lsls	r2, r3
 8007464:	420a      	tst	r2, r1
 8007466:	d028      	beq.n	80074ba <HAL_DMA_IRQHandler+0x9e>
 8007468:	f015 0f02 	tst.w	r5, #2
 800746c:	d025      	beq.n	80074ba <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f013 0f20 	tst.w	r3, #32
 8007474:	d106      	bne.n	8007484 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f023 030a 	bic.w	r3, r3, #10
 800747c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800747e:	2301      	movs	r3, #1
 8007480:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007484:	6802      	ldr	r2, [r0, #0]
 8007486:	4b1c      	ldr	r3, [pc, #112]	@ (80074f8 <HAL_DMA_IRQHandler+0xdc>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d90e      	bls.n	80074aa <HAL_DMA_IRQHandler+0x8e>
 800748c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800748e:	f003 021c 	and.w	r2, r3, #28
 8007492:	2302      	movs	r3, #2
 8007494:	4093      	lsls	r3, r2
 8007496:	4a19      	ldr	r2, [pc, #100]	@ (80074fc <HAL_DMA_IRQHandler+0xe0>)
 8007498:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800749a:	2300      	movs	r3, #0
 800749c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 80074a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0db      	beq.n	800745e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80074a6:	4798      	blx	r3
 80074a8:	e7d9      	b.n	800745e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80074aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80074ac:	f003 021c 	and.w	r2, r3, #28
 80074b0:	2302      	movs	r3, #2
 80074b2:	4093      	lsls	r3, r2
 80074b4:	4a12      	ldr	r2, [pc, #72]	@ (8007500 <HAL_DMA_IRQHandler+0xe4>)
 80074b6:	6053      	str	r3, [r2, #4]
 80074b8:	e7ef      	b.n	800749a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80074ba:	2208      	movs	r2, #8
 80074bc:	fa02 f303 	lsl.w	r3, r2, r3
 80074c0:	420b      	tst	r3, r1
 80074c2:	d0cc      	beq.n	800745e <HAL_DMA_IRQHandler+0x42>
 80074c4:	f015 0f08 	tst.w	r5, #8
 80074c8:	d0c9      	beq.n	800745e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f023 030e 	bic.w	r3, r3, #14
 80074d0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80074d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80074d4:	f003 031c 	and.w	r3, r3, #28
 80074d8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80074da:	2201      	movs	r2, #1
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074e2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80074e4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80074e8:	2300      	movs	r3, #0
 80074ea:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 80074ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0b4      	beq.n	800745e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80074f4:	4798      	blx	r3
  return;
 80074f6:	e7b2      	b.n	800745e <HAL_DMA_IRQHandler+0x42>
 80074f8:	40020080 	.word	0x40020080
 80074fc:	40020400 	.word	0x40020400
 8007500:	40020000 	.word	0x40020000

08007504 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8007504:	b178      	cbz	r0, 8007526 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8007506:	6803      	ldr	r3, [r0, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800750a:	f011 0f10 	tst.w	r1, #16
 800750e:	d004      	beq.n	800751a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8007510:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8007514:	d004      	beq.n	8007520 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8007516:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800751a:	601a      	str	r2, [r3, #0]
  return status;
 800751c:	2000      	movs	r0, #0
 800751e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8007520:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007524:	e7f9      	b.n	800751a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8007526:	2001      	movs	r0, #1
}
 8007528:	4770      	bx	lr
	...

0800752c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800752c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800752e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007530:	e069      	b.n	8007606 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007532:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007534:	005e      	lsls	r6, r3, #1
 8007536:	2403      	movs	r4, #3
 8007538:	40b4      	lsls	r4, r6
 800753a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800753e:	68cc      	ldr	r4, [r1, #12]
 8007540:	40b4      	lsls	r4, r6
 8007542:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8007544:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007546:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007548:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800754c:	684c      	ldr	r4, [r1, #4]
 800754e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8007552:	409c      	lsls	r4, r3
 8007554:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8007556:	6044      	str	r4, [r0, #4]
 8007558:	e066      	b.n	8007628 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800755a:	08dd      	lsrs	r5, r3, #3
 800755c:	3508      	adds	r5, #8
 800755e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007562:	f003 0c07 	and.w	ip, r3, #7
 8007566:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800756a:	f04f 0e0f 	mov.w	lr, #15
 800756e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007572:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007576:	690c      	ldr	r4, [r1, #16]
 8007578:	fa04 f40c 	lsl.w	r4, r4, ip
 800757c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8007580:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8007584:	e067      	b.n	8007656 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007586:	2402      	movs	r4, #2
 8007588:	e000      	b.n	800758c <HAL_GPIO_Init+0x60>
 800758a:	2400      	movs	r4, #0
 800758c:	fa04 f40e 	lsl.w	r4, r4, lr
 8007590:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007592:	f10c 0c02 	add.w	ip, ip, #2
 8007596:	4d4b      	ldr	r5, [pc, #300]	@ (80076c4 <HAL_GPIO_Init+0x198>)
 8007598:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800759c:	4c4a      	ldr	r4, [pc, #296]	@ (80076c8 <HAL_GPIO_Init+0x19c>)
 800759e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80075a0:	43d4      	mvns	r4, r2
 80075a2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80075a6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80075aa:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 80075ae:	d001      	beq.n	80075b4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80075b0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80075b4:	4d44      	ldr	r5, [pc, #272]	@ (80076c8 <HAL_GPIO_Init+0x19c>)
 80075b6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80075b8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80075ba:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075be:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80075c2:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 80075c6:	d001      	beq.n	80075cc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80075c8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80075cc:	4d3e      	ldr	r5, [pc, #248]	@ (80076c8 <HAL_GPIO_Init+0x19c>)
 80075ce:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80075d0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80075d4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075d8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80075dc:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 80075e0:	d001      	beq.n	80075e6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80075e2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80075e6:	4d38      	ldr	r5, [pc, #224]	@ (80076c8 <HAL_GPIO_Init+0x19c>)
 80075e8:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80075ec:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80075f0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075f2:	684e      	ldr	r6, [r1, #4]
 80075f4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80075f8:	d001      	beq.n	80075fe <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80075fa:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80075fe:	4a32      	ldr	r2, [pc, #200]	@ (80076c8 <HAL_GPIO_Init+0x19c>)
 8007600:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007604:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007606:	680a      	ldr	r2, [r1, #0]
 8007608:	fa32 f403 	lsrs.w	r4, r2, r3
 800760c:	d058      	beq.n	80076c0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800760e:	f04f 0c01 	mov.w	ip, #1
 8007612:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8007616:	ea1c 0202 	ands.w	r2, ip, r2
 800761a:	d0f3      	beq.n	8007604 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800761c:	684c      	ldr	r4, [r1, #4]
 800761e:	f004 0403 	and.w	r4, r4, #3
 8007622:	3c01      	subs	r4, #1
 8007624:	2c01      	cmp	r4, #1
 8007626:	d984      	bls.n	8007532 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007628:	684c      	ldr	r4, [r1, #4]
 800762a:	f004 0403 	and.w	r4, r4, #3
 800762e:	2c03      	cmp	r4, #3
 8007630:	d00c      	beq.n	800764c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8007632:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007634:	005d      	lsls	r5, r3, #1
 8007636:	f04f 0c03 	mov.w	ip, #3
 800763a:	fa0c fc05 	lsl.w	ip, ip, r5
 800763e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007642:	688c      	ldr	r4, [r1, #8]
 8007644:	40ac      	lsls	r4, r5
 8007646:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800764a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800764c:	684c      	ldr	r4, [r1, #4]
 800764e:	f004 0403 	and.w	r4, r4, #3
 8007652:	2c02      	cmp	r4, #2
 8007654:	d081      	beq.n	800755a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8007656:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007658:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800765c:	f04f 0c03 	mov.w	ip, #3
 8007660:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007664:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007668:	684c      	ldr	r4, [r1, #4]
 800766a:	f004 0403 	and.w	r4, r4, #3
 800766e:	fa04 f40e 	lsl.w	r4, r4, lr
 8007672:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8007676:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007678:	684c      	ldr	r4, [r1, #4]
 800767a:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800767e:	d0c1      	beq.n	8007604 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8007680:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007684:	f10c 0502 	add.w	r5, ip, #2
 8007688:	4c0e      	ldr	r4, [pc, #56]	@ (80076c4 <HAL_GPIO_Init+0x198>)
 800768a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800768e:	f003 0e03 	and.w	lr, r3, #3
 8007692:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007696:	2407      	movs	r4, #7
 8007698:	fa04 f40e 	lsl.w	r4, r4, lr
 800769c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076a0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80076a4:	f43f af71 	beq.w	800758a <HAL_GPIO_Init+0x5e>
 80076a8:	4c08      	ldr	r4, [pc, #32]	@ (80076cc <HAL_GPIO_Init+0x1a0>)
 80076aa:	42a0      	cmp	r0, r4
 80076ac:	d006      	beq.n	80076bc <HAL_GPIO_Init+0x190>
 80076ae:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80076b2:	42a0      	cmp	r0, r4
 80076b4:	f43f af67 	beq.w	8007586 <HAL_GPIO_Init+0x5a>
 80076b8:	2407      	movs	r4, #7
 80076ba:	e767      	b.n	800758c <HAL_GPIO_Init+0x60>
 80076bc:	2401      	movs	r4, #1
 80076be:	e765      	b.n	800758c <HAL_GPIO_Init+0x60>
  }
}
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	58000800 	.word	0x58000800
 80076cc:	48000400 	.word	0x48000400

080076d0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80076d0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80076d2:	fa31 f203 	lsrs.w	r2, r1, r3
 80076d6:	d071      	beq.n	80077bc <HAL_GPIO_DeInit+0xec>
{
 80076d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076da:	e02e      	b.n	800773a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80076dc:	2502      	movs	r5, #2
 80076de:	e000      	b.n	80076e2 <HAL_GPIO_DeInit+0x12>
 80076e0:	2500      	movs	r5, #0
 80076e2:	fa05 f50c 	lsl.w	r5, r5, ip
 80076e6:	42a5      	cmp	r5, r4
 80076e8:	d049      	beq.n	800777e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80076ea:	6804      	ldr	r4, [r0, #0]
 80076ec:	005d      	lsls	r5, r3, #1
 80076ee:	f04f 0c03 	mov.w	ip, #3
 80076f2:	fa0c fc05 	lsl.w	ip, ip, r5
 80076f6:	ea44 040c 	orr.w	r4, r4, ip
 80076fa:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80076fc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8007700:	f10e 0e08 	add.w	lr, lr, #8
 8007704:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8007708:	f003 0607 	and.w	r6, r3, #7
 800770c:	00b6      	lsls	r6, r6, #2
 800770e:	250f      	movs	r5, #15
 8007710:	40b5      	lsls	r5, r6
 8007712:	ea24 0405 	bic.w	r4, r4, r5
 8007716:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800771a:	6884      	ldr	r4, [r0, #8]
 800771c:	ea24 040c 	bic.w	r4, r4, ip
 8007720:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007722:	6844      	ldr	r4, [r0, #4]
 8007724:	ea24 0202 	bic.w	r2, r4, r2
 8007728:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800772a:	68c2      	ldr	r2, [r0, #12]
 800772c:	ea22 020c 	bic.w	r2, r2, ip
 8007730:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8007732:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8007734:	fa31 f203 	lsrs.w	r2, r1, r3
 8007738:	d03f      	beq.n	80077ba <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800773a:	2201      	movs	r2, #1
 800773c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800773e:	ea12 0701 	ands.w	r7, r2, r1
 8007742:	d0f6      	beq.n	8007732 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007744:	089e      	lsrs	r6, r3, #2
 8007746:	1cb5      	adds	r5, r6, #2
 8007748:	4c1d      	ldr	r4, [pc, #116]	@ (80077c0 <HAL_GPIO_DeInit+0xf0>)
 800774a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800774e:	f003 0c03 	and.w	ip, r3, #3
 8007752:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007756:	f04f 0e07 	mov.w	lr, #7
 800775a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800775e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007762:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8007766:	d0bb      	beq.n	80076e0 <HAL_GPIO_DeInit+0x10>
 8007768:	4d16      	ldr	r5, [pc, #88]	@ (80077c4 <HAL_GPIO_DeInit+0xf4>)
 800776a:	42a8      	cmp	r0, r5
 800776c:	d005      	beq.n	800777a <HAL_GPIO_DeInit+0xaa>
 800776e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007772:	42a8      	cmp	r0, r5
 8007774:	d0b2      	beq.n	80076dc <HAL_GPIO_DeInit+0xc>
 8007776:	2507      	movs	r5, #7
 8007778:	e7b3      	b.n	80076e2 <HAL_GPIO_DeInit+0x12>
 800777a:	2501      	movs	r5, #1
 800777c:	e7b1      	b.n	80076e2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800777e:	4c12      	ldr	r4, [pc, #72]	@ (80077c8 <HAL_GPIO_DeInit+0xf8>)
 8007780:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8007784:	ea25 0507 	bic.w	r5, r5, r7
 8007788:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800778c:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8007790:	ea25 0507 	bic.w	r5, r5, r7
 8007794:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8007798:	6825      	ldr	r5, [r4, #0]
 800779a:	ea25 0507 	bic.w	r5, r5, r7
 800779e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80077a0:	6865      	ldr	r5, [r4, #4]
 80077a2:	ea25 0507 	bic.w	r5, r5, r7
 80077a6:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80077a8:	4d05      	ldr	r5, [pc, #20]	@ (80077c0 <HAL_GPIO_DeInit+0xf0>)
 80077aa:	3602      	adds	r6, #2
 80077ac:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80077b0:	ea24 040e 	bic.w	r4, r4, lr
 80077b4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80077b8:	e797      	b.n	80076ea <HAL_GPIO_DeInit+0x1a>
  }
}
 80077ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	48000400 	.word	0x48000400
 80077c8:	58000800 	.word	0x58000800

080077cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077cc:	b10a      	cbz	r2, 80077d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077ce:	6181      	str	r1, [r0, #24]
 80077d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077d2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077d8:	4a02      	ldr	r2, [pc, #8]	@ (80077e4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80077da:	6813      	ldr	r3, [r2, #0]
 80077dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e0:	6013      	str	r3, [r2, #0]
}
 80077e2:	4770      	bx	lr
 80077e4:	58000400 	.word	0x58000400

080077e8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80077e8:	b510      	push	{r4, lr}
 80077ea:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80077ec:	b9a0      	cbnz	r0, 8007818 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80077ee:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <HAL_PWR_EnterSLEEPMode+0x44>)
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80077f6:	d10a      	bne.n	800780e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007830 <HAL_PWR_EnterSLEEPMode+0x48>)
 80077fa:	6913      	ldr	r3, [r2, #16]
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007802:	2c01      	cmp	r4, #1
 8007804:	d010      	beq.n	8007828 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007806:	bf40      	sev
    __WFE();
 8007808:	bf20      	wfe
    __WFE();
 800780a:	bf20      	wfe
  }
}
 800780c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800780e:	f000 f821 	bl	8007854 <HAL_PWREx_DisableLowPowerRunMode>
 8007812:	2800      	cmp	r0, #0
 8007814:	d0f0      	beq.n	80077f8 <HAL_PWR_EnterSLEEPMode+0x10>
 8007816:	e7f9      	b.n	800780c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007818:	4b04      	ldr	r3, [pc, #16]	@ (800782c <HAL_PWR_EnterSLEEPMode+0x44>)
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007820:	d1ea      	bne.n	80077f8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8007822:	f000 f80f 	bl	8007844 <HAL_PWREx_EnableLowPowerRunMode>
 8007826:	e7e7      	b.n	80077f8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8007828:	bf30      	wfi
 800782a:	e7ef      	b.n	800780c <HAL_PWR_EnterSLEEPMode+0x24>
 800782c:	58000400 	.word	0x58000400
 8007830:	e000ed00 	.word	0xe000ed00

08007834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8007834:	4b02      	ldr	r3, [pc, #8]	@ (8007840 <HAL_PWREx_GetVoltageRange+0xc>)
 8007836:	6818      	ldr	r0, [r3, #0]
}
 8007838:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	58000400 	.word	0x58000400

08007844 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007844:	4a02      	ldr	r2, [pc, #8]	@ (8007850 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8007846:	6813      	ldr	r3, [r2, #0]
 8007848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800784c:	6013      	str	r3, [r2, #0]
}
 800784e:	4770      	bx	lr
 8007850:	58000400 	.word	0x58000400

08007854 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007854:	4a0f      	ldr	r2, [pc, #60]	@ (8007894 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007856:	6813      	ldr	r3, [r2, #0]
 8007858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800785e:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2232      	movs	r2, #50	@ 0x32
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	4a0c      	ldr	r2, [pc, #48]	@ (800789c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007870:	e000      	b.n	8007874 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8007872:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007874:	4a07      	ldr	r2, [pc, #28]	@ (8007894 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007876:	6952      	ldr	r2, [r2, #20]
 8007878:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800787c:	d001      	beq.n	8007882 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f7      	bne.n	8007872 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007882:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800788a:	d101      	bne.n	8007890 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800788c:	2000      	movs	r0, #0
 800788e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8007890:	2003      	movs	r0, #3
}
 8007892:	4770      	bx	lr
 8007894:	58000400 	.word	0x58000400
 8007898:	20000000 	.word	0x20000000
 800789c:	431bde83 	.word	0x431bde83

080078a0 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80078a0:	4a0c      	ldr	r2, [pc, #48]	@ (80078d4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	f023 0307 	bic.w	r3, r3, #7
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80078ae:	4a0a      	ldr	r2, [pc, #40]	@ (80078d8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80078b0:	6913      	ldr	r3, [r2, #16]
 80078b2:	f043 0304 	orr.w	r3, r3, #4
 80078b6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80078b8:	2801      	cmp	r0, #1
 80078ba:	d008      	beq.n	80078ce <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80078bc:	bf40      	sev
    __WFE();
 80078be:	bf20      	wfe
    __WFE();
 80078c0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80078c2:	4a05      	ldr	r2, [pc, #20]	@ (80078d8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80078c4:	6913      	ldr	r3, [r2, #16]
 80078c6:	f023 0304 	bic.w	r3, r3, #4
 80078ca:	6113      	str	r3, [r2, #16]
}
 80078cc:	4770      	bx	lr
    __WFI();
 80078ce:	bf30      	wfi
 80078d0:	e7f7      	b.n	80078c2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80078d2:	bf00      	nop
 80078d4:	58000400 	.word	0x58000400
 80078d8:	e000ed00 	.word	0xe000ed00

080078dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80078dc:	b530      	push	{r4, r5, lr}
 80078de:	b089      	sub	sp, #36	@ 0x24
 80078e0:	4604      	mov	r4, r0
 80078e2:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80078e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007990 <RCC_SetFlashLatency+0xb4>)
 80078e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078ea:	9006      	str	r0, [sp, #24]
 80078ec:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80078f0:	f103 0208 	add.w	r2, r3, #8
 80078f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078f8:	9004      	str	r0, [sp, #16]
 80078fa:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80078fe:	ad01      	add	r5, sp, #4
 8007900:	3310      	adds	r3, #16
 8007902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007906:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800790a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800790e:	d007      	beq.n	8007920 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007910:	2300      	movs	r3, #0
 8007912:	e014      	b.n	800793e <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8007914:	aa08      	add	r2, sp, #32
 8007916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800791a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800791e:	e01e      	b.n	800795e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007920:	2300      	movs	r3, #0
 8007922:	2b02      	cmp	r3, #2
 8007924:	d808      	bhi.n	8007938 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007926:	aa08      	add	r2, sp, #32
 8007928:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800792c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8007930:	42a2      	cmp	r2, r4
 8007932:	d2ef      	bcs.n	8007914 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007934:	3301      	adds	r3, #1
 8007936:	e7f4      	b.n	8007922 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007938:	2500      	movs	r5, #0
 800793a:	e010      	b.n	800795e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800793c:	3301      	adds	r3, #1
 800793e:	2b02      	cmp	r3, #2
 8007940:	d80c      	bhi.n	800795c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007942:	aa08      	add	r2, sp, #32
 8007944:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007948:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800794c:	42a2      	cmp	r2, r4
 800794e:	d3f5      	bcc.n	800793c <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007950:	aa08      	add	r2, sp, #32
 8007952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007956:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800795a:	e000      	b.n	800795e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800795c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800795e:	4a0d      	ldr	r2, [pc, #52]	@ (8007994 <RCC_SetFlashLatency+0xb8>)
 8007960:	6813      	ldr	r3, [r2, #0]
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	432b      	orrs	r3, r5
 8007968:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800796a:	f7f9 fb45 	bl	8000ff8 <HAL_GetTick>
 800796e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007970:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <RCC_SetFlashLatency+0xb8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	42ab      	cmp	r3, r5
 800797a:	d006      	beq.n	800798a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800797c:	f7f9 fb3c 	bl	8000ff8 <HAL_GetTick>
 8007980:	1b00      	subs	r0, r0, r4
 8007982:	2802      	cmp	r0, #2
 8007984:	d9f4      	bls.n	8007970 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8007986:	2003      	movs	r0, #3
 8007988:	e000      	b.n	800798c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800798a:	2000      	movs	r0, #0
}
 800798c:	b009      	add	sp, #36	@ 0x24
 800798e:	bd30      	pop	{r4, r5, pc}
 8007990:	0800ef18 	.word	0x0800ef18
 8007994:	58004000 	.word	0x58004000

08007998 <RCC_SetFlashLatencyFromMSIRange>:
{
 8007998:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800799a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800799e:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80079a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80079a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	4a08      	ldr	r2, [pc, #32]	@ (80079d4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80079b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b6:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80079ba:	f7ff ff3b 	bl	8007834 <HAL_PWREx_GetVoltageRange>
 80079be:	4601      	mov	r1, r0
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80079c2:	fba3 3404 	umull	r3, r4, r3, r4
 80079c6:	0ca0      	lsrs	r0, r4, #18
 80079c8:	f7ff ff88 	bl	80078dc <RCC_SetFlashLatency>
}
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	0800f07c 	.word	0x0800f07c
 80079d4:	0800f0dc 	.word	0x0800f0dc
 80079d8:	431bde83 	.word	0x431bde83

080079dc <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80079dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079e0:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80079e8:	f011 010c 	ands.w	r1, r1, #12
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCC_GetSysClockFreq+0x28>
 80079ee:	290c      	cmp	r1, #12
 80079f0:	d006      	beq.n	8007a00 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079f2:	2904      	cmp	r1, #4
 80079f4:	d047      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079f6:	2908      	cmp	r1, #8
 80079f8:	d03b      	beq.n	8007a72 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80079fa:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80079fc:	4610      	mov	r0, r2
 80079fe:	e026      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d1f6      	bne.n	80079f2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f013 0308 	ands.w	r3, r3, #8
 8007a0e:	d00d      	beq.n	8007a2c <HAL_RCC_GetSysClockFreq+0x50>
 8007a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f013 0308 	ands.w	r3, r3, #8
 8007a1a:	d124      	bne.n	8007a66 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a20:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007a24:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a2a:	e00e      	b.n	8007a4a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	f012 0f08 	tst.w	r2, #8
 8007a36:	d112      	bne.n	8007a5e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a40:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a44:	4a26      	ldr	r2, [pc, #152]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a4a:	b1d1      	cbz	r1, 8007a82 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8007a4c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a58:	2b0c      	cmp	r3, #12
 8007a5a:	d01a      	beq.n	8007a92 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8007a5c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	e7ee      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x68>
 8007a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a6a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007a6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a70:	e7d8      	b.n	8007a24 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8007a7e:	4819      	ldr	r0, [pc, #100]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a80:	e7e5      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8007a82:	4610      	mov	r0, r2
 8007a84:	e7e3      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8007a86:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8007a88:	4817      	ldr	r0, [pc, #92]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007a8a:	e7e0      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8007a8c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8007a8e:	4816      	ldr	r0, [pc, #88]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007a90:	e7dd      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_RCC_GetSysClockFreq+0xd8>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d108      	bne.n	8007ab6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007aae:	d115      	bne.n	8007adc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007aba:	68cb      	ldr	r3, [r1, #12]
 8007abc:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007ac0:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007ac4:	68cb      	ldr	r3, [r1, #12]
 8007ac6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007aca:	3301      	adds	r3, #1
 8007acc:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007ad0:	68c8      	ldr	r0, [r1, #12]
 8007ad2:	0f40      	lsrs	r0, r0, #29
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8007ada:	e7bf      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8007adc:	4a02      	ldr	r2, [pc, #8]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ade:	e7ea      	b.n	8007ab6 <HAL_RCC_GetSysClockFreq+0xda>
 8007ae0:	0800f07c 	.word	0x0800f07c
 8007ae4:	01e84800 	.word	0x01e84800
 8007ae8:	00f42400 	.word	0x00f42400

08007aec <HAL_RCC_GetHCLKFreq>:
{
 8007aec:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007aee:	f7ff ff75 	bl	80079dc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007afc:	4a02      	ldr	r2, [pc, #8]	@ (8007b08 <HAL_RCC_GetHCLKFreq+0x1c>)
 8007afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007b02:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b06:	bd08      	pop	{r3, pc}
 8007b08:	0800f0dc 	.word	0x0800f0dc

08007b0c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	f000 8311 	beq.w	8008134 <HAL_RCC_OscConfig+0x628>
{
 8007b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b14:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b1a:	689d      	ldr	r5, [r3, #8]
 8007b1c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007b20:	68de      	ldr	r6, [r3, #12]
 8007b22:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b26:	6803      	ldr	r3, [r0, #0]
 8007b28:	f013 0f20 	tst.w	r3, #32
 8007b2c:	d02a      	beq.n	8007b84 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	d065      	beq.n	8007bfe <HAL_RCC_OscConfig+0xf2>
 8007b32:	2d0c      	cmp	r5, #12
 8007b34:	d061      	beq.n	8007bfa <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b36:	6a23      	ldr	r3, [r4, #32]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80bf 	beq.w	8007cbc <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007b3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b4a:	f7f9 fa55 	bl	8000ff8 <HAL_GetTick>
 8007b4e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f013 0f02 	tst.w	r3, #2
 8007b5a:	f000 80a7 	beq.w	8007cac <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007b70:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007b72:	430a      	orrs	r2, r1
 8007b74:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007b7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007b82:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f013 0f01 	tst.w	r3, #1
 8007b8a:	f000 80b5 	beq.w	8007cf8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007b8e:	2d08      	cmp	r5, #8
 8007b90:	f000 80ae 	beq.w	8007cf0 <HAL_RCC_OscConfig+0x1e4>
 8007b94:	2d0c      	cmp	r5, #12
 8007b96:	f000 80a8 	beq.w	8007cea <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007ba4:	68a1      	ldr	r1, [r4, #8]
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb0:	f000 80c4 	beq.w	8007d3c <HAL_RCC_OscConfig+0x230>
 8007bb4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007bb8:	f000 80c5 	beq.w	8007d46 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007bc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8007bce:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80c2 	beq.w	8007d5c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8007bd8:	f7f9 fa0e 	bl	8000ff8 <HAL_GetTick>
 8007bdc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007be8:	f040 8086 	bne.w	8007cf8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bec:	f7f9 fa04 	bl	8000ff8 <HAL_GetTick>
 8007bf0:	1bc0      	subs	r0, r0, r7
 8007bf2:	2864      	cmp	r0, #100	@ 0x64
 8007bf4:	d9f3      	bls.n	8007bde <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	e2a9      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007bfa:	2e01      	cmp	r6, #1
 8007bfc:	d19b      	bne.n	8007b36 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007bfe:	6a23      	ldr	r3, [r4, #32]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8299 	beq.w	8008138 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c06:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f013 0f08 	tst.w	r3, #8
 8007c12:	d029      	beq.n	8007c68 <HAL_RCC_OscConfig+0x15c>
 8007c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	d92a      	bls.n	8007c78 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c22:	f7ff feb9 	bl	8007998 <RCC_SetFlashLatencyFromMSIRange>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8288 	bne.w	800813c <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	f042 0208 	orr.w	r2, r2, #8
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007c3e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007c40:	430a      	orrs	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007c4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c50:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007c52:	f7ff ff4b 	bl	8007aec <HAL_RCC_GetHCLKFreq>
 8007c56:	4bba      	ldr	r3, [pc, #744]	@ (8007f40 <HAL_RCC_OscConfig+0x434>)
 8007c58:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007c5a:	4bba      	ldr	r3, [pc, #744]	@ (8007f44 <HAL_RCC_OscConfig+0x438>)
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	f7f9 f9c9 	bl	8000ff4 <HAL_InitTick>
        if (status != HAL_OK)
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d08e      	beq.n	8007b84 <HAL_RCC_OscConfig+0x78>
 8007c66:	e272      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c70:	091b      	lsrs	r3, r3, #4
 8007c72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c76:	e7d2      	b.n	8007c1e <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	f042 0208 	orr.w	r2, r2, #8
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007c8a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007c98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c9c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007ca0:	f7ff fe7a 	bl	8007998 <RCC_SetFlashLatencyFromMSIRange>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d0d4      	beq.n	8007c52 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8007ca8:	2001      	movs	r0, #1
 8007caa:	e250      	b.n	800814e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cac:	f7f9 f9a4 	bl	8000ff8 <HAL_GetTick>
 8007cb0:	1bc0      	subs	r0, r0, r7
 8007cb2:	2802      	cmp	r0, #2
 8007cb4:	f67f af4c 	bls.w	8007b50 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8007cb8:	2003      	movs	r0, #3
 8007cba:	e248      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007cc8:	f7f9 f996 	bl	8000ff8 <HAL_GetTick>
 8007ccc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f013 0f02 	tst.w	r3, #2
 8007cd8:	f43f af54 	beq.w	8007b84 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cdc:	f7f9 f98c 	bl	8000ff8 <HAL_GetTick>
 8007ce0:	1bc0      	subs	r0, r0, r7
 8007ce2:	2802      	cmp	r0, #2
 8007ce4:	d9f3      	bls.n	8007cce <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8007ce6:	2003      	movs	r0, #3
 8007ce8:	e231      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007cea:	2e03      	cmp	r6, #3
 8007cec:	f47f af55 	bne.w	8007b9a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007cf0:	6863      	ldr	r3, [r4, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8224 	beq.w	8008140 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f013 0f02 	tst.w	r3, #2
 8007cfe:	d056      	beq.n	8007dae <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007d00:	2d04      	cmp	r5, #4
 8007d02:	d03d      	beq.n	8007d80 <HAL_RCC_OscConfig+0x274>
 8007d04:	2d0c      	cmp	r5, #12
 8007d06:	d039      	beq.n	8007d7c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 808a 	beq.w	8007e24 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d14:	6813      	ldr	r3, [r2, #0]
 8007d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007d1c:	f7f9 f96c 	bl	8000ff8 <HAL_GetTick>
 8007d20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007d2c:	d136      	bne.n	8007d9c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d2e:	f7f9 f963 	bl	8000ff8 <HAL_GetTick>
 8007d32:	1b80      	subs	r0, r0, r6
 8007d34:	2802      	cmp	r0, #2
 8007d36:	d9f4      	bls.n	8007d22 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8007d38:	2003      	movs	r0, #3
 8007d3a:	e208      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	e744      	b.n	8007bd0 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007d50:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d58:	601a      	str	r2, [r3, #0]
}
 8007d5a:	e739      	b.n	8007bd0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8007d5c:	f7f9 f94c 	bl	8000ff8 <HAL_GetTick>
 8007d60:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007d6c:	d0c4      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d6e:	f7f9 f943 	bl	8000ff8 <HAL_GetTick>
 8007d72:	1bc0      	subs	r0, r0, r7
 8007d74:	2864      	cmp	r0, #100	@ 0x64
 8007d76:	d9f4      	bls.n	8007d62 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8007d78:	2003      	movs	r0, #3
 8007d7a:	e1e8      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007d7c:	2e02      	cmp	r6, #2
 8007d7e:	d1c3      	bne.n	8007d08 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 81de 	beq.w	8008144 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d88:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d8e:	6853      	ldr	r3, [r2, #4]
 8007d90:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007d94:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007d98:	6053      	str	r3, [r2, #4]
}
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007d9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007da2:	6853      	ldr	r3, [r2, #4]
 8007da4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007da8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007dac:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	f013 0f08 	tst.w	r3, #8
 8007db4:	d07e      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007db6:	69a3      	ldr	r3, [r4, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d062      	beq.n	8007e82 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8007dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007dc4:	69e1      	ldr	r1, [r4, #28]
 8007dc6:	f003 0210 	and.w	r2, r3, #16
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	d011      	beq.n	8007df2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007dce:	f003 0203 	and.w	r2, r3, #3
 8007dd2:	2a02      	cmp	r2, #2
 8007dd4:	f000 81b8 	beq.w	8008148 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007dd8:	f013 0f01 	tst.w	r3, #1
 8007ddc:	d138      	bne.n	8007e50 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007de2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	69e1      	ldr	r1, [r4, #28]
 8007dec:	430b      	orrs	r3, r1
 8007dee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007df2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007df6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007dfa:	f043 0301 	orr.w	r3, r3, #1
 8007dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007e02:	f7f9 f8f9 	bl	8000ff8 <HAL_GetTick>
 8007e06:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e10:	f013 0f02 	tst.w	r3, #2
 8007e14:	d14e      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e16:	f7f9 f8ef 	bl	8000ff8 <HAL_GetTick>
 8007e1a:	1b80      	subs	r0, r0, r6
 8007e1c:	2811      	cmp	r0, #17
 8007e1e:	d9f3      	bls.n	8007e08 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8007e20:	2003      	movs	r0, #3
 8007e22:	e194      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007e30:	f7f9 f8e2 	bl	8000ff8 <HAL_GetTick>
 8007e34:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007e40:	d0b5      	beq.n	8007dae <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e42:	f7f9 f8d9 	bl	8000ff8 <HAL_GetTick>
 8007e46:	1b80      	subs	r0, r0, r6
 8007e48:	2802      	cmp	r0, #2
 8007e4a:	d9f4      	bls.n	8007e36 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8007e4c:	2003      	movs	r0, #3
 8007e4e:	e17e      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007e50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e54:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8007e60:	f7f9 f8ca 	bl	8000ff8 <HAL_GetTick>
 8007e64:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e6e:	f013 0f02 	tst.w	r3, #2
 8007e72:	d0b4      	beq.n	8007dde <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e74:	f7f9 f8c0 	bl	8000ff8 <HAL_GetTick>
 8007e78:	1b80      	subs	r0, r0, r6
 8007e7a:	2811      	cmp	r0, #17
 8007e7c:	d9f3      	bls.n	8007e66 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8007e7e:	2003      	movs	r0, #3
 8007e80:	e165      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e86:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007e92:	f7f9 f8b1 	bl	8000ff8 <HAL_GetTick>
 8007e96:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ea0:	f013 0f02 	tst.w	r3, #2
 8007ea4:	d006      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea6:	f7f9 f8a7 	bl	8000ff8 <HAL_GetTick>
 8007eaa:	1b80      	subs	r0, r0, r6
 8007eac:	2811      	cmp	r0, #17
 8007eae:	d9f3      	bls.n	8007e98 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8007eb0:	2003      	movs	r0, #3
 8007eb2:	e14c      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	f013 0f04 	tst.w	r3, #4
 8007eba:	f000 80b8 	beq.w	800802e <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007ebe:	4b22      	ldr	r3, [pc, #136]	@ (8007f48 <HAL_RCC_OscConfig+0x43c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007ec6:	d110      	bne.n	8007eea <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8007ec8:	f7ff fc86 	bl	80077d8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8007ecc:	f7f9 f894 	bl	8000ff8 <HAL_GetTick>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f48 <HAL_RCC_OscConfig+0x43c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007eda:	d106      	bne.n	8007eea <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007edc:	f7f9 f88c 	bl	8000ff8 <HAL_GetTick>
 8007ee0:	1b80      	subs	r0, r0, r6
 8007ee2:	2802      	cmp	r0, #2
 8007ee4:	d9f5      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8007ee6:	2003      	movs	r0, #3
 8007ee8:	e131      	b.n	800814e <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007eea:	68e3      	ldr	r3, [r4, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d068      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007ef0:	2b85      	cmp	r3, #133	@ 0x85
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007efc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007f00:	f043 0304 	orr.w	r3, r3, #4
 8007f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8007f08:	f7f9 f876 	bl	8000ff8 <HAL_GetTick>
 8007f0c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f12:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	f013 0f02 	tst.w	r3, #2
 8007f2a:	d10f      	bne.n	8007f4c <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f2c:	f7f9 f864 	bl	8000ff8 <HAL_GetTick>
 8007f30:	1b80      	subs	r0, r0, r6
 8007f32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f36:	4298      	cmp	r0, r3
 8007f38:	d9f1      	bls.n	8007f1e <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8007f3a:	2003      	movs	r0, #3
 8007f3c:	e107      	b.n	800814e <HAL_RCC_OscConfig+0x642>
 8007f3e:	bf00      	nop
 8007f40:	20000000 	.word	0x20000000
 8007f44:	20000004 	.word	0x20000004
 8007f48:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007f4c:	68e3      	ldr	r3, [r4, #12]
 8007f4e:	2b81      	cmp	r3, #129	@ 0x81
 8007f50:	d001      	beq.n	8007f56 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007f52:	2b85      	cmp	r3, #133	@ 0x85
 8007f54:	d11a      	bne.n	8007f8c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8007f56:	f7f9 f84f 	bl	8000ff8 <HAL_GetTick>
 8007f5a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f60:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f74:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007f78:	d159      	bne.n	800802e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f7a:	f7f9 f83d 	bl	8000ff8 <HAL_GetTick>
 8007f7e:	1b80      	subs	r0, r0, r6
 8007f80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f84:	4298      	cmp	r0, r3
 8007f86:	d9f1      	bls.n	8007f6c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8007f88:	2003      	movs	r0, #3
 8007f8a:	e0e0      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8007f8c:	f7f9 f834 	bl	8000ff8 <HAL_GetTick>
 8007f90:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f96:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007faa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007fae:	d03e      	beq.n	800802e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb0:	f7f9 f822 	bl	8000ff8 <HAL_GetTick>
 8007fb4:	1b80      	subs	r0, r0, r6
 8007fb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007fba:	4298      	cmp	r0, r3
 8007fbc:	d9f1      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8007fbe:	2003      	movs	r0, #3
 8007fc0:	e0c5      	b.n	800814e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8007fc2:	f7f9 f819 	bl	8000ff8 <HAL_GetTick>
 8007fc6:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007fe4:	d008      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe6:	f7f9 f807 	bl	8000ff8 <HAL_GetTick>
 8007fea:	1b80      	subs	r0, r0, r6
 8007fec:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ff0:	4298      	cmp	r0, r3
 8007ff2:	d9f1      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8007ff4:	2003      	movs	r0, #3
 8007ff6:	e0aa      	b.n	800814e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8007ff8:	f7f8 fffe 	bl	8000ff8 <HAL_GetTick>
 8007ffc:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007ffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008002:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800800e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008016:	f013 0f02 	tst.w	r3, #2
 800801a:	d008      	beq.n	800802e <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801c:	f7f8 ffec 	bl	8000ff8 <HAL_GetTick>
 8008020:	1b80      	subs	r0, r0, r6
 8008022:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008026:	4298      	cmp	r0, r3
 8008028:	d9f1      	bls.n	800800e <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800802a:	2003      	movs	r0, #3
 800802c:	e08f      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800802e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 808b 	beq.w	800814c <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008036:	2d0c      	cmp	r5, #12
 8008038:	d060      	beq.n	80080fc <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800803a:	2b02      	cmp	r3, #2
 800803c:	d016      	beq.n	800806c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800803e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008042:	6813      	ldr	r3, [r2, #0]
 8008044:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008048:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800804a:	f7f8 ffd5 	bl	8000ff8 <HAL_GetTick>
 800804e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800805a:	d148      	bne.n	80080ee <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800805c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008060:	68d1      	ldr	r1, [r2, #12]
 8008062:	4b41      	ldr	r3, [pc, #260]	@ (8008168 <HAL_RCC_OscConfig+0x65c>)
 8008064:	400b      	ands	r3, r1
 8008066:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8008068:	2000      	movs	r0, #0
 800806a:	e070      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800806c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008070:	6813      	ldr	r3, [r2, #0]
 8008072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008076:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008078:	f7f8 ffbe 	bl	8000ff8 <HAL_GetTick>
 800807c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800807e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008088:	d12a      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800808a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800808e:	68d3      	ldr	r3, [r2, #12]
 8008090:	4936      	ldr	r1, [pc, #216]	@ (800816c <HAL_RCC_OscConfig+0x660>)
 8008092:	4019      	ands	r1, r3
 8008094:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008096:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008098:	4303      	orrs	r3, r0
 800809a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800809c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80080a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80080a2:	4303      	orrs	r3, r0
 80080a4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80080a6:	4303      	orrs	r3, r0
 80080a8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80080aa:	4303      	orrs	r3, r0
 80080ac:	4319      	orrs	r1, r3
 80080ae:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80080b0:	6813      	ldr	r3, [r2, #0]
 80080b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080b8:	68d3      	ldr	r3, [r2, #12]
 80080ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080be:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80080c0:	f7f8 ff9a 	bl	8000ff8 <HAL_GetTick>
 80080c4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80080c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80080d0:	d13e      	bne.n	8008150 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d2:	f7f8 ff91 	bl	8000ff8 <HAL_GetTick>
 80080d6:	1b00      	subs	r0, r0, r4
 80080d8:	280a      	cmp	r0, #10
 80080da:	d9f4      	bls.n	80080c6 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 80080dc:	2003      	movs	r0, #3
 80080de:	e036      	b.n	800814e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080e0:	f7f8 ff8a 	bl	8000ff8 <HAL_GetTick>
 80080e4:	1b40      	subs	r0, r0, r5
 80080e6:	280a      	cmp	r0, #10
 80080e8:	d9c9      	bls.n	800807e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80080ea:	2003      	movs	r0, #3
 80080ec:	e02f      	b.n	800814e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ee:	f7f8 ff83 	bl	8000ff8 <HAL_GetTick>
 80080f2:	1b00      	subs	r0, r0, r4
 80080f4:	280a      	cmp	r0, #10
 80080f6:	d9ab      	bls.n	8008050 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80080f8:	2003      	movs	r0, #3
 80080fa:	e028      	b.n	800814e <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d029      	beq.n	8008154 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008104:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008106:	f003 0103 	and.w	r1, r3, #3
 800810a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800810c:	4291      	cmp	r1, r2
 800810e:	d123      	bne.n	8008158 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008110:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008116:	428a      	cmp	r2, r1
 8008118:	d120      	bne.n	800815c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800811a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800811e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008120:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008124:	d11c      	bne.n	8008160 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008126:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800812a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800812c:	4293      	cmp	r3, r2
 800812e:	d119      	bne.n	8008164 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8008130:	2000      	movs	r0, #0
 8008132:	e00c      	b.n	800814e <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8008134:	2001      	movs	r0, #1
}
 8008136:	4770      	bx	lr
        return HAL_ERROR;
 8008138:	2001      	movs	r0, #1
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 800813c:	2001      	movs	r0, #1
 800813e:	e006      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8008140:	2001      	movs	r0, #1
 8008142:	e004      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8008144:	2001      	movs	r0, #1
 8008146:	e002      	b.n	800814e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8008148:	2001      	movs	r0, #1
 800814a:	e000      	b.n	800814e <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 800814c:	2000      	movs	r0, #0
}
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8008150:	2000      	movs	r0, #0
 8008152:	e7fc      	b.n	800814e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8008154:	2001      	movs	r0, #1
 8008156:	e7fa      	b.n	800814e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8008158:	2001      	movs	r0, #1
 800815a:	e7f8      	b.n	800814e <HAL_RCC_OscConfig+0x642>
 800815c:	2001      	movs	r0, #1
 800815e:	e7f6      	b.n	800814e <HAL_RCC_OscConfig+0x642>
 8008160:	2001      	movs	r0, #1
 8008162:	e7f4      	b.n	800814e <HAL_RCC_OscConfig+0x642>
 8008164:	2001      	movs	r0, #1
 8008166:	e7f2      	b.n	800814e <HAL_RCC_OscConfig+0x642>
 8008168:	eefefffc 	.word	0xeefefffc
 800816c:	11c1808c 	.word	0x11c1808c

08008170 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008170:	2800      	cmp	r0, #0
 8008172:	f000 8127 	beq.w	80083c4 <HAL_RCC_ClockConfig+0x254>
{
 8008176:	b570      	push	{r4, r5, r6, lr}
 8008178:	460c      	mov	r4, r1
 800817a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800817c:	4b93      	ldr	r3, [pc, #588]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	428b      	cmp	r3, r1
 8008186:	d32d      	bcc.n	80081e4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	f013 0f02 	tst.w	r3, #2
 800818e:	d13f      	bne.n	8008210 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	f013 0f20 	tst.w	r3, #32
 8008196:	d153      	bne.n	8008240 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800819e:	d16a      	bne.n	8008276 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	f013 0f04 	tst.w	r3, #4
 80081a6:	f040 8083 	bne.w	80082b0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	f013 0f08 	tst.w	r3, #8
 80081b0:	f040 8097 	bne.w	80082e2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	f013 0f01 	tst.w	r3, #1
 80081ba:	f000 80de 	beq.w	800837a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081be:	686b      	ldr	r3, [r5, #4]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	f000 80a8 	beq.w	8008316 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	f000 80ad 	beq.w	8008326 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 80b2 	bne.w	8008336 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80081d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	f012 0f02 	tst.w	r2, #2
 80081dc:	f040 80b1 	bne.w	8008342 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80081e0:	2001      	movs	r0, #1
 80081e2:	e0ee      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e4:	4a79      	ldr	r2, [pc, #484]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	f023 0307 	bic.w	r3, r3, #7
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80081f0:	f7f8 ff02 	bl	8000ff8 <HAL_GetTick>
 80081f4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f6:	4b75      	ldr	r3, [pc, #468]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	42a3      	cmp	r3, r4
 8008200:	d0c2      	beq.n	8008188 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008202:	f7f8 fef9 	bl	8000ff8 <HAL_GetTick>
 8008206:	1b80      	subs	r0, r0, r6
 8008208:	2802      	cmp	r0, #2
 800820a:	d9f4      	bls.n	80081f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800820c:	2003      	movs	r0, #3
 800820e:	e0d8      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008210:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008212:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008216:	688a      	ldr	r2, [r1, #8]
 8008218:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800821c:	4313      	orrs	r3, r2
 800821e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008220:	f7f8 feea 	bl	8000ff8 <HAL_GetTick>
 8008224:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008230:	d1ae      	bne.n	8008190 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008232:	f7f8 fee1 	bl	8000ff8 <HAL_GetTick>
 8008236:	1b80      	subs	r0, r0, r6
 8008238:	2802      	cmp	r0, #2
 800823a:	d9f4      	bls.n	8008226 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800823c:	2003      	movs	r0, #3
 800823e:	e0c0      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008240:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008246:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 800824a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8008254:	f7f8 fed0 	bl	8000ff8 <HAL_GetTick>
 8008258:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800825a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800825e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008262:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008266:	d197      	bne.n	8008198 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008268:	f7f8 fec6 	bl	8000ff8 <HAL_GetTick>
 800826c:	1b80      	subs	r0, r0, r6
 800826e:	2802      	cmp	r0, #2
 8008270:	d9f3      	bls.n	800825a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8008272:	2003      	movs	r0, #3
 8008274:	e0a5      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008276:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800827c:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8008280:	f023 030f 	bic.w	r3, r3, #15
 8008284:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8008288:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 800828c:	f7f8 feb4 	bl	8000ff8 <HAL_GetTick>
 8008290:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008296:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800829a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800829e:	f47f af7f 	bne.w	80081a0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082a2:	f7f8 fea9 	bl	8000ff8 <HAL_GetTick>
 80082a6:	1b80      	subs	r0, r0, r6
 80082a8:	2802      	cmp	r0, #2
 80082aa:	d9f2      	bls.n	8008292 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80082ac:	2003      	movs	r0, #3
 80082ae:	e088      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80082b0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80082b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082b6:	688a      	ldr	r2, [r1, #8]
 80082b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80082bc:	4313      	orrs	r3, r2
 80082be:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80082c0:	f7f8 fe9a 	bl	8000ff8 <HAL_GetTick>
 80082c4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80082c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80082d0:	f47f af6b 	bne.w	80081aa <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082d4:	f7f8 fe90 	bl	8000ff8 <HAL_GetTick>
 80082d8:	1b80      	subs	r0, r0, r6
 80082da:	2802      	cmp	r0, #2
 80082dc:	d9f3      	bls.n	80082c6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80082de:	2003      	movs	r0, #3
 80082e0:	e06f      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80082e2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80082e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082e8:	6893      	ldr	r3, [r2, #8]
 80082ea:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80082ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80082f2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80082f4:	f7f8 fe80 	bl	8000ff8 <HAL_GetTick>
 80082f8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80082fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8008304:	f47f af56 	bne.w	80081b4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008308:	f7f8 fe76 	bl	8000ff8 <HAL_GetTick>
 800830c:	1b80      	subs	r0, r0, r6
 800830e:	2802      	cmp	r0, #2
 8008310:	d9f3      	bls.n	80082fa <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8008312:	2003      	movs	r0, #3
 8008314:	e055      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008320:	d10f      	bne.n	8008342 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8008322:	2001      	movs	r0, #1
 8008324:	e04d      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008326:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8008330:	d107      	bne.n	8008342 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8008332:	2001      	movs	r0, #1
 8008334:	e045      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8008340:	d042      	beq.n	80083c8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008346:	688a      	ldr	r2, [r1, #8]
 8008348:	f022 0203 	bic.w	r2, r2, #3
 800834c:	4313      	orrs	r3, r2
 800834e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008350:	f7f8 fe52 	bl	8000ff8 <HAL_GetTick>
 8008354:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008360:	686a      	ldr	r2, [r5, #4]
 8008362:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008366:	d008      	beq.n	800837a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f7f8 fe46 	bl	8000ff8 <HAL_GetTick>
 800836c:	1b80      	subs	r0, r0, r6
 800836e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008372:	4298      	cmp	r0, r3
 8008374:	d9ef      	bls.n	8008356 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8008376:	2003      	movs	r0, #3
 8008378:	e023      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800837a:	4b14      	ldr	r3, [pc, #80]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	42a3      	cmp	r3, r4
 8008384:	d915      	bls.n	80083b2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008386:	4a11      	ldr	r2, [pc, #68]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 8008388:	6813      	ldr	r3, [r2, #0]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	4323      	orrs	r3, r4
 8008390:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008392:	f7f8 fe31 	bl	8000ff8 <HAL_GetTick>
 8008396:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008398:	4b0c      	ldr	r3, [pc, #48]	@ (80083cc <HAL_RCC_ClockConfig+0x25c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d006      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80083a4:	f7f8 fe28 	bl	8000ff8 <HAL_GetTick>
 80083a8:	1b40      	subs	r0, r0, r5
 80083aa:	2802      	cmp	r0, #2
 80083ac:	d9f4      	bls.n	8008398 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80083ae:	2003      	movs	r0, #3
 80083b0:	e007      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80083b2:	f7ff fb9b 	bl	8007aec <HAL_RCC_GetHCLKFreq>
 80083b6:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <HAL_RCC_ClockConfig+0x260>)
 80083b8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80083ba:	4b06      	ldr	r3, [pc, #24]	@ (80083d4 <HAL_RCC_ClockConfig+0x264>)
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f7f8 fe19 	bl	8000ff4 <HAL_InitTick>
}
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80083c4:	2001      	movs	r0, #1
}
 80083c6:	4770      	bx	lr
        return HAL_ERROR;
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7fa      	b.n	80083c2 <HAL_RCC_ClockConfig+0x252>
 80083cc:	58004000 	.word	0x58004000
 80083d0:	20000000 	.word	0x20000000
 80083d4:	20000004 	.word	0x20000004

080083d8 <HAL_RCC_GetPCLK1Freq>:
{
 80083d8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80083da:	f7ff fb87 	bl	8007aec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80083de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80083e8:	4a02      	ldr	r2, [pc, #8]	@ (80083f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80083ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80083ee:	40d8      	lsrs	r0, r3
 80083f0:	bd08      	pop	{r3, pc}
 80083f2:	bf00      	nop
 80083f4:	0800f0bc 	.word	0x0800f0bc

080083f8 <HAL_RCC_GetPCLK2Freq>:
{
 80083f8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80083fa:	f7ff fb77 	bl	8007aec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80083fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008408:	4a02      	ldr	r2, [pc, #8]	@ (8008414 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800840a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800840e:	40d8      	lsrs	r0, r3
 8008410:	bd08      	pop	{r3, pc}
 8008412:	bf00      	nop
 8008414:	0800f0bc 	.word	0x0800f0bc

08008418 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800841c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8008420:	0902      	lsrs	r2, r0, #4
 8008422:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8008426:	ea23 0302 	bic.w	r3, r3, r2
 800842a:	0100      	lsls	r0, r0, #4
 800842c:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8008430:	4303      	orrs	r3, r0
 8008432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008436:	4770      	bx	lr

08008438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800843c:	6803      	ldr	r3, [r0, #0]
 800843e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008442:	f040 80aa 	bne.w	800859a <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008446:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f013 0f01 	tst.w	r3, #1
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008450:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008452:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008456:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800845a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800845e:	b292      	uxth	r2, r2
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f013 0f02 	tst.w	r3, #2
 800846c:	d00a      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800846e:	68a2      	ldr	r2, [r4, #8]
 8008470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008474:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8008478:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800847c:	b292      	uxth	r2, r2
 800847e:	4313      	orrs	r3, r2
 8008480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	f013 0f20 	tst.w	r3, #32
 800848a:	d009      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800848c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800848e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008492:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008496:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80084a6:	d00c      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084a8:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80084aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80084b2:	0c02      	lsrs	r2, r0, #16
 80084b4:	0412      	lsls	r2, r2, #16
 80084b6:	ea23 0302 	bic.w	r3, r3, r2
 80084ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80084c8:	d00c      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084ca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80084cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084d0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80084d4:	0c02      	lsrs	r2, r0, #16
 80084d6:	0412      	lsls	r2, r2, #16
 80084d8:	ea23 0302 	bic.w	r3, r3, r2
 80084dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80084ea:	d00c      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80084ec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80084ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80084f6:	0c02      	lsrs	r2, r0, #16
 80084f8:	0412      	lsls	r2, r2, #16
 80084fa:	ea23 0302 	bic.w	r3, r3, r2
 80084fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800850c:	f040 809d 	bne.w	800864a <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008516:	f040 809c 	bne.w	8008652 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008520:	f040 809b 	bne.w	800865a <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	f013 0f10 	tst.w	r3, #16
 800852a:	d00e      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800852c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800852e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008532:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008536:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008540:	68e3      	ldr	r3, [r4, #12]
 8008542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008546:	f000 808c 	beq.w	8008662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008550:	d00f      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008558:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800855c:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008568:	b91b      	cbnz	r3, 8008572 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800856a:	68cb      	ldr	r3, [r1, #12]
 800856c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008570:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8008578:	d00d      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800857a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800857c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008580:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008584:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800858e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008594:	d06a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8008596:	4628      	mov	r0, r5
 8008598:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800859a:	f7ff f91d 	bl	80077d8 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800859e:	f7f8 fd2b 	bl	8000ff8 <HAL_GetTick>
 80085a2:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80085a4:	4b34      	ldr	r3, [pc, #208]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80085ac:	d106      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ae:	f7f8 fd23 	bl	8000ff8 <HAL_GetTick>
 80085b2:	1b40      	subs	r0, r0, r5
 80085b4:	2802      	cmp	r0, #2
 80085b6:	d9f5      	bls.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 80085b8:	2503      	movs	r5, #3
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80085bc:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80085be:	2d00      	cmp	r5, #0
 80085c0:	f47f af42 	bne.w	8008448 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80085c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80085d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d024      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80085d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085da:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80085de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80085e2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80085e6:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80085ea:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80085ee:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80085f2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80085f6:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80085fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80085fe:	f012 0f02 	tst.w	r2, #2
 8008602:	d10f      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8008604:	2d00      	cmp	r5, #0
 8008606:	f47f af1f 	bne.w	8008448 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800860a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800860c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008610:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8008614:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800861e:	e713      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8008620:	2200      	movs	r2, #0
 8008622:	e7ec      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8008624:	f7f8 fce8 	bl	8000ff8 <HAL_GetTick>
 8008628:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800862a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008632:	f013 0f02 	tst.w	r3, #2
 8008636:	d1e5      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008638:	f7f8 fcde 	bl	8000ff8 <HAL_GetTick>
 800863c:	1b80      	subs	r0, r0, r6
 800863e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008642:	4298      	cmp	r0, r3
 8008644:	d9f1      	bls.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 8008646:	2503      	movs	r5, #3
 8008648:	e7dc      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800864a:	6960      	ldr	r0, [r4, #20]
 800864c:	f7ff fee4 	bl	8008418 <LL_RCC_SetI2CClockSource>
 8008650:	e75e      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008652:	69a0      	ldr	r0, [r4, #24]
 8008654:	f7ff fee0 	bl	8008418 <LL_RCC_SetI2CClockSource>
 8008658:	e75f      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800865a:	69e0      	ldr	r0, [r4, #28]
 800865c:	f7ff fedc 	bl	8008418 <LL_RCC_SetI2CClockSource>
 8008660:	e760      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008662:	68cb      	ldr	r3, [r1, #12]
 8008664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008668:	60cb      	str	r3, [r1, #12]
 800866a:	e76e      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800866c:	68cb      	ldr	r3, [r1, #12]
 800866e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008672:	60cb      	str	r3, [r1, #12]
 8008674:	e78f      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008676:	bf00      	nop
 8008678:	58000400 	.word	0x58000400

0800867c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800867c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800867e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8008682:	2a01      	cmp	r2, #1
 8008684:	d035      	beq.n	80086f2 <HAL_RTC_DeactivateAlarm+0x76>
 8008686:	2201      	movs	r2, #1
 8008688:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800868c:	2202      	movs	r2, #2
 800868e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008692:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8008694:	20ca      	movs	r0, #202	@ 0xca
 8008696:	6250      	str	r0, [r2, #36]	@ 0x24
 8008698:	2053      	movs	r0, #83	@ 0x53
 800869a:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800869c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80086a0:	d018      	beq.n	80086d4 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80086a2:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <HAL_RTC_DeactivateAlarm+0x7c>)
 80086a4:	6991      	ldr	r1, [r2, #24]
 80086a6:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 80086aa:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80086ac:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80086ae:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80086b2:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80086b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80086b6:	f021 0102 	bic.w	r1, r1, #2
 80086ba:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80086bc:	2102      	movs	r1, #2
 80086be:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086c0:	4a0d      	ldr	r2, [pc, #52]	@ (80086f8 <HAL_RTC_DeactivateAlarm+0x7c>)
 80086c2:	21ff      	movs	r1, #255	@ 0xff
 80086c4:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086cc:	2000      	movs	r0, #0
 80086ce:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 80086d2:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80086d4:	6991      	ldr	r1, [r2, #24]
 80086d6:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 80086da:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80086dc:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80086de:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80086e2:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80086e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80086e6:	f021 0101 	bic.w	r1, r1, #1
 80086ea:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80086ec:	2101      	movs	r1, #1
 80086ee:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80086f0:	e7e6      	b.n	80086c0 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80086f2:	2002      	movs	r0, #2
}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40002800 	.word	0x40002800

080086fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008700:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8008702:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8008704:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008706:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008708:	f015 0f01 	tst.w	r5, #1
 800870c:	d106      	bne.n	800871c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800870e:	f015 0f02 	tst.w	r5, #2
 8008712:	d109      	bne.n	8008728 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008714:	2301      	movs	r3, #1
 8008716:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800871a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800871c:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800871e:	2201      	movs	r2, #1
 8008720:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008722:	f7f8 fe51 	bl	80013c8 <HAL_RTC_AlarmAEventCallback>
 8008726:	e7f2      	b.n	800870e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008728:	4b03      	ldr	r3, [pc, #12]	@ (8008738 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800872a:	2202      	movs	r2, #2
 800872c:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f9ee 	bl	8008b10 <HAL_RTCEx_AlarmBEventCallback>
 8008734:	e7ee      	b.n	8008714 <HAL_RTC_AlarmIRQHandler+0x18>
 8008736:	bf00      	nop
 8008738:	40002800 	.word	0x40002800

0800873c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800873c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800873e:	4a0b      	ldr	r2, [pc, #44]	@ (800876c <HAL_RTC_WaitForSynchro+0x30>)
 8008740:	68d3      	ldr	r3, [r2, #12]
 8008742:	f023 0320 	bic.w	r3, r3, #32
 8008746:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008748:	f7f8 fc56 	bl	8000ff8 <HAL_GetTick>
 800874c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800874e:	4b07      	ldr	r3, [pc, #28]	@ (800876c <HAL_RTC_WaitForSynchro+0x30>)
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f013 0f20 	tst.w	r3, #32
 8008756:	d107      	bne.n	8008768 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008758:	f7f8 fc4e 	bl	8000ff8 <HAL_GetTick>
 800875c:	1b00      	subs	r0, r0, r4
 800875e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008762:	d9f4      	bls.n	800874e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8008764:	2003      	movs	r0, #3
 8008766:	e000      	b.n	800876a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008768:	2000      	movs	r0, #0
}
 800876a:	bd10      	pop	{r4, pc}
 800876c:	40002800 	.word	0x40002800

08008770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008770:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008772:	4b11      	ldr	r3, [pc, #68]	@ (80087b8 <RTC_EnterInitMode+0x48>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800877a:	d002      	beq.n	8008782 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800877c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800877e:	4620      	mov	r0, r4
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008784:	4a0c      	ldr	r2, [pc, #48]	@ (80087b8 <RTC_EnterInitMode+0x48>)
 8008786:	68d3      	ldr	r3, [r2, #12]
 8008788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800878e:	f7f8 fc33 	bl	8000ff8 <HAL_GetTick>
 8008792:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8008794:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008796:	4b08      	ldr	r3, [pc, #32]	@ (80087b8 <RTC_EnterInitMode+0x48>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800879e:	d1ee      	bne.n	800877e <RTC_EnterInitMode+0xe>
 80087a0:	2c03      	cmp	r4, #3
 80087a2:	d0ec      	beq.n	800877e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80087a4:	f7f8 fc28 	bl	8000ff8 <HAL_GetTick>
 80087a8:	1b43      	subs	r3, r0, r5
 80087aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087ae:	d9f2      	bls.n	8008796 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087b0:	2403      	movs	r4, #3
 80087b2:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 80087b6:	e7ee      	b.n	8008796 <RTC_EnterInitMode+0x26>
 80087b8:	40002800 	.word	0x40002800

080087bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80087c0:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <RTC_ExitInitMode+0x48>)
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f013 0f20 	tst.w	r3, #32
 80087d0:	d106      	bne.n	80087e0 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087d2:	f7ff ffb3 	bl	800873c <HAL_RTC_WaitForSynchro>
 80087d6:	b198      	cbz	r0, 8008800 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087d8:	2003      	movs	r0, #3
 80087da:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80087de:	e00f      	b.n	8008800 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80087e0:	4a08      	ldr	r2, [pc, #32]	@ (8008804 <RTC_ExitInitMode+0x48>)
 80087e2:	6993      	ldr	r3, [r2, #24]
 80087e4:	f023 0320 	bic.w	r3, r3, #32
 80087e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087ea:	f7ff ffa7 	bl	800873c <HAL_RTC_WaitForSynchro>
 80087ee:	b110      	cbz	r0, 80087f6 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087f0:	2003      	movs	r0, #3
 80087f2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80087f6:	4a03      	ldr	r2, [pc, #12]	@ (8008804 <RTC_ExitInitMode+0x48>)
 80087f8:	6993      	ldr	r3, [r2, #24]
 80087fa:	f043 0320 	orr.w	r3, r3, #32
 80087fe:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8008800:	bd10      	pop	{r4, pc}
 8008802:	bf00      	nop
 8008804:	40002800 	.word	0x40002800

08008808 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8008808:	2800      	cmp	r0, #0
 800880a:	d055      	beq.n	80088b8 <HAL_RTC_Init+0xb0>
{
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008810:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8008814:	b163      	cbz	r3, 8008830 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008816:	2302      	movs	r3, #2
 8008818:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800881c:	4b27      	ldr	r3, [pc, #156]	@ (80088bc <HAL_RTC_Init+0xb4>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f013 0f10 	tst.w	r3, #16
 8008824:	d009      	beq.n	800883a <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8008826:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8008828:	2301      	movs	r3, #1
 800882a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800882e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8008830:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8008834:	f7f8 face 	bl	8000dd4 <HAL_RTC_MspInit>
 8008838:	e7ed      	b.n	8008816 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800883a:	4b20      	ldr	r3, [pc, #128]	@ (80088bc <HAL_RTC_Init+0xb4>)
 800883c:	22ca      	movs	r2, #202	@ 0xca
 800883e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008840:	2253      	movs	r2, #83	@ 0x53
 8008842:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8008844:	4620      	mov	r0, r4
 8008846:	f7ff ff93 	bl	8008770 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800884a:	b118      	cbz	r0, 8008854 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800884c:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <HAL_RTC_Init+0xb4>)
 800884e:	22ff      	movs	r2, #255	@ 0xff
 8008850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8008852:	e7ec      	b.n	800882e <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008854:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <HAL_RTC_Init+0xb4>)
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 800885c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008860:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008862:	6999      	ldr	r1, [r3, #24]
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	6920      	ldr	r0, [r4, #16]
 8008868:	4302      	orrs	r2, r0
 800886a:	69a0      	ldr	r0, [r4, #24]
 800886c:	4302      	orrs	r2, r0
 800886e:	430a      	orrs	r2, r1
 8008870:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008872:	68e2      	ldr	r2, [r4, #12]
 8008874:	68a1      	ldr	r1, [r4, #8]
 8008876:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800887a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8008882:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008884:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008886:	4301      	orrs	r1, r0
 8008888:	430a      	orrs	r2, r1
 800888a:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 800888c:	4620      	mov	r0, r4
 800888e:	f7ff ff95 	bl	80087bc <RTC_ExitInitMode>
        if (status == HAL_OK)
 8008892:	b118      	cbz	r0, 800889c <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008894:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <HAL_RTC_Init+0xb4>)
 8008896:	22ff      	movs	r2, #255	@ 0xff
 8008898:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800889a:	e7c8      	b.n	800882e <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 800889c:	4907      	ldr	r1, [pc, #28]	@ (80088bc <HAL_RTC_Init+0xb4>)
 800889e:	698b      	ldr	r3, [r1, #24]
 80088a0:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80088a4:	6a22      	ldr	r2, [r4, #32]
 80088a6:	69e5      	ldr	r5, [r4, #28]
 80088a8:	432a      	orrs	r2, r5
 80088aa:	6965      	ldr	r5, [r4, #20]
 80088ac:	432a      	orrs	r2, r5
 80088ae:	4313      	orrs	r3, r2
 80088b0:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088b2:	23ff      	movs	r3, #255	@ 0xff
 80088b4:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 80088b6:	e7b7      	b.n	8008828 <HAL_RTC_Init+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 80088b8:	2001      	movs	r0, #1
}
 80088ba:	4770      	bx	lr
 80088bc:	40002800 	.word	0x40002800

080088c0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80088c0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80088c2:	e002      	b.n	80088ca <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80088c4:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80088c6:	380a      	subs	r0, #10
 80088c8:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80088ca:	2809      	cmp	r0, #9
 80088cc:	d8fa      	bhi.n	80088c4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	b2db      	uxtb	r3, r3
}
 80088d2:	4318      	orrs	r0, r3
 80088d4:	4770      	bx	lr
	...

080088d8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80088d8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	f000 80b0 	beq.w	8008a42 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	4605      	mov	r5, r0
 80088e8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80088ea:	2301      	movs	r3, #1
 80088ec:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088f0:	2302      	movs	r3, #2
 80088f2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80088f6:	4b54      	ldr	r3, [pc, #336]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80088f8:	68de      	ldr	r6, [r3, #12]
 80088fa:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80088fe:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8008902:	d043      	beq.n	800898c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8008904:	bb12      	cbnz	r2, 800894c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800890c:	d101      	bne.n	8008912 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800890e:	2300      	movs	r3, #0
 8008910:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008912:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008916:	7820      	ldrb	r0, [r4, #0]
 8008918:	f7ff ffd2 	bl	80088c0 <RTC_ByteToBcd2>
 800891c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800891e:	7860      	ldrb	r0, [r4, #1]
 8008920:	f7ff ffce 	bl	80088c0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008924:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008928:	78a0      	ldrb	r0, [r4, #2]
 800892a:	f7ff ffc9 	bl	80088c0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800892e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008930:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008932:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008936:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800893a:	f7ff ffc1 	bl	80088c0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800893e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008942:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008944:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008946:	ea48 0000 	orr.w	r0, r8, r0
 800894a:	e020      	b.n	800898e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800894c:	6948      	ldr	r0, [r1, #20]
 800894e:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8008952:	d009      	beq.n	8008968 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008954:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8008958:	d006      	beq.n	8008968 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800895a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008962:	d101      	bne.n	8008968 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008964:	2300      	movs	r3, #0
 8008966:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008968:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800896a:	7863      	ldrb	r3, [r4, #1]
 800896c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800896e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008972:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008974:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008976:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008978:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800897c:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008980:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008984:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008986:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008988:	4318      	orrs	r0, r3
 800898a:	e000      	b.n	800898e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800898c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800898e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 8008990:	22ca      	movs	r2, #202	@ 0xca
 8008992:	625a      	str	r2, [r3, #36]	@ 0x24
 8008994:	2253      	movs	r2, #83	@ 0x53
 8008996:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008998:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800899a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899e:	d02a      	beq.n	80089f6 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80089a0:	4b29      	ldr	r3, [pc, #164]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 80089a8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80089aa:	2202      	movs	r2, #2
 80089ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80089ae:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80089b2:	d040      	beq.n	8008a36 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80089b4:	4b24      	ldr	r3, [pc, #144]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80089b6:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80089b8:	69a2      	ldr	r2, [r4, #24]
 80089ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80089bc:	6862      	ldr	r2, [r4, #4]
 80089be:	4b22      	ldr	r3, [pc, #136]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80089c0:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80089c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80089c4:	f042 0202 	orr.w	r2, r2, #2
 80089c8:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 80089d0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80089d2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a4c <HAL_RTC_SetAlarm_IT+0x174>)
 80089d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80089d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089e0:	4b19      	ldr	r3, [pc, #100]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80089e2:	22ff      	movs	r2, #255	@ 0xff
 80089e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80089ec:	2000      	movs	r0, #0
 80089ee:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 80089f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80089f6:	4b14      	ldr	r3, [pc, #80]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80089fe:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008a00:	2201      	movs	r2, #1
 8008a02:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8008a04:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8008a08:	d00f      	beq.n	8008a2a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 8008a0c:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008a0e:	69a2      	ldr	r2, [r4, #24]
 8008a10:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 8008a16:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008a18:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8008a26:	619a      	str	r2, [r3, #24]
 8008a28:	e7d3      	b.n	80089d2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008a2a:	69a3      	ldr	r3, [r4, #24]
 8008a2c:	69e2      	ldr	r2, [r4, #28]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	4a05      	ldr	r2, [pc, #20]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 8008a32:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a34:	e7ed      	b.n	8008a12 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008a36:	69a3      	ldr	r3, [r4, #24]
 8008a38:	69e2      	ldr	r2, [r4, #28]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	4a02      	ldr	r2, [pc, #8]	@ (8008a48 <HAL_RTC_SetAlarm_IT+0x170>)
 8008a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a40:	e7bc      	b.n	80089bc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8008a42:	2002      	movs	r0, #2
}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40002800 	.word	0x40002800
 8008a4c:	58000800 	.word	0x58000800

08008a50 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a50:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d017      	beq.n	8008a88 <HAL_RTCEx_EnableBypassShadow+0x38>
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a64:	4b09      	ldr	r3, [pc, #36]	@ (8008a8c <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8008a66:	22ca      	movs	r2, #202	@ 0xca
 8008a68:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a6a:	2253      	movs	r2, #83	@ 0x53
 8008a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	f042 0220 	orr.w	r2, r2, #32
 8008a74:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a76:	22ff      	movs	r2, #255	@ 0xff
 8008a78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a7a:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8008a84:	4618      	mov	r0, r3
 8008a86:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8008a88:	2002      	movs	r0, #2
}
 8008a8a:	4770      	bx	lr
 8008a8c:	40002800 	.word	0x40002800

08008a90 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a90:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d020      	beq.n	8008ada <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8008a98:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8008aa8:	22ca      	movs	r2, #202	@ 0xca
 8008aaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aac:	2253      	movs	r2, #83	@ 0x53
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008ab6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8008ae4 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8008aba:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008abe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008ac2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac6:	22ff      	movs	r2, #255	@ 0xff
 8008ac8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008aca:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8008ad4:	4618      	mov	r0, r3
}
 8008ad6:	bc10      	pop	{r4}
 8008ad8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8008ada:	2002      	movs	r0, #2
}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40002800 	.word	0x40002800
 8008ae4:	58000800 	.word	0x58000800

08008ae8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008aec:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8008aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008af4:	d103      	bne.n	8008afe <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8008afc:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8008afe:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8008b00:	2240      	movs	r2, #64	@ 0x40
 8008b02:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008b04:	f7f8 fc64 	bl	80013d0 <HAL_RTCEx_SSRUEventCallback>
 8008b08:	e7f5      	b.n	8008af6 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8008b0a:	bf00      	nop
 8008b0c:	40002800 	.word	0x40002800

08008b10 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008b10:	4770      	bx	lr

08008b12 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8008b12:	0089      	lsls	r1, r1, #2
 8008b14:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8008b18:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008b1c:	600a      	str	r2, [r1, #0]
}
 8008b1e:	4770      	bx	lr

08008b20 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8008b20:	0089      	lsls	r1, r1, #2
 8008b22:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8008b26:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008b2a:	6808      	ldr	r0, [r1, #0]
}
 8008b2c:	4770      	bx	lr
	...

08008b30 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <SUBGHZSPI_Init+0x20>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b38:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008b3a:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8008b3e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008b40:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008b44:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	4770      	bx	lr
 8008b50:	58010000 	.word	0x58010000

08008b54 <HAL_SUBGHZ_Init>:
{
 8008b54:	b530      	push	{r4, r5, lr}
 8008b56:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d05d      	beq.n	8008c18 <HAL_SUBGHZ_Init+0xc4>
 8008b5c:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8008b5e:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008b60:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8008b64:	b10b      	cbz	r3, 8008b6a <HAL_SUBGHZ_Init+0x16>
 8008b66:	2d03      	cmp	r5, #3
 8008b68:	d10b      	bne.n	8008b82 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7f8 f9d0 	bl	8000f14 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008b74:	4a29      	ldr	r2, [pc, #164]	@ (8008c1c <HAL_SUBGHZ_Init+0xc8>)
 8008b76:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008b7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008b82:	b185      	cbz	r5, 8008ba6 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008b84:	4b26      	ldr	r3, [pc, #152]	@ (8008c20 <HAL_SUBGHZ_Init+0xcc>)
 8008b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b8a:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8008b8c:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	f7ff ffce 	bl	8008b30 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008b94:	2301      	movs	r3, #1
 8008b96:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	71a3      	strb	r3, [r4, #6]
}
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	b003      	add	sp, #12
 8008ba4:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bae:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8008bb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008bba:	4b1a      	ldr	r3, [pc, #104]	@ (8008c24 <HAL_SUBGHZ_Init+0xd0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008bc2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8008bc6:	2264      	movs	r2, #100	@ 0x64
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	e014      	b.n	8008bfa <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008bd0:	2501      	movs	r5, #1
 8008bd2:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008bd4:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <HAL_SUBGHZ_Init+0xcc>)
 8008bd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008be8:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bee:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	d1d3      	bne.n	8008b9c <HAL_SUBGHZ_Init+0x48>
 8008bf4:	e7cb      	b.n	8008b8e <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0ec      	beq.n	8008bd4 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8008bfa:	9b01      	ldr	r3, [sp, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0e7      	beq.n	8008bd0 <HAL_SUBGHZ_Init+0x7c>
      count--;
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c0e:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_SUBGHZ_Init+0xa2>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e7ee      	b.n	8008bf6 <HAL_SUBGHZ_Init+0xa2>
    return status;
 8008c18:	2501      	movs	r5, #1
 8008c1a:	e7c1      	b.n	8008ba0 <HAL_SUBGHZ_Init+0x4c>
 8008c1c:	58000800 	.word	0x58000800
 8008c20:	58000400 	.word	0x58000400
 8008c24:	20000000 	.word	0x20000000

08008c28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008c28:	b082      	sub	sp, #8
 8008c2a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c98 <SUBGHZSPI_Transmit+0x70>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008c34:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8008c38:	2064      	movs	r0, #100	@ 0x64
 8008c3a:	fb00 f303 	mul.w	r3, r0, r3
 8008c3e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	b14b      	cbz	r3, 8008c58 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008c4a:	4b14      	ldr	r3, [pc, #80]	@ (8008c9c <SUBGHZSPI_Transmit+0x74>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f013 0f02 	tst.w	r3, #2
 8008c52:	d0f5      	beq.n	8008c40 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008c54:	2000      	movs	r0, #0
 8008c56:	e001      	b.n	8008c5c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008c58:	2001      	movs	r0, #1
 8008c5a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c9c <SUBGHZSPI_Transmit+0x74>)
 8008c5e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008c60:	4b0d      	ldr	r3, [pc, #52]	@ (8008c98 <SUBGHZSPI_Transmit+0x70>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008c68:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8008c6c:	2164      	movs	r1, #100	@ 0x64
 8008c6e:	fb01 f303 	mul.w	r3, r1, r3
 8008c72:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	b143      	cbz	r3, 8008c8a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008c7e:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <SUBGHZSPI_Transmit+0x74>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f013 0f01 	tst.w	r3, #1
 8008c86:	d0f5      	beq.n	8008c74 <SUBGHZSPI_Transmit+0x4c>
 8008c88:	e001      	b.n	8008c8e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008c8e:	4b03      	ldr	r3, [pc, #12]	@ (8008c9c <SUBGHZSPI_Transmit+0x74>)
 8008c90:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8008c92:	b002      	add	sp, #8
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000000 	.word	0x20000000
 8008c9c:	58010000 	.word	0x58010000

08008ca0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d18 <SUBGHZSPI_Receive+0x78>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008cac:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8008cb0:	2064      	movs	r0, #100	@ 0x64
 8008cb2:	fb00 f303 	mul.w	r3, r0, r3
 8008cb6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	b14b      	cbz	r3, 8008cd0 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008cc2:	4b16      	ldr	r3, [pc, #88]	@ (8008d1c <SUBGHZSPI_Receive+0x7c>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f013 0f02 	tst.w	r3, #2
 8008cca:	d0f5      	beq.n	8008cb8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e001      	b.n	8008cd4 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8008cd4:	4b11      	ldr	r3, [pc, #68]	@ (8008d1c <SUBGHZSPI_Receive+0x7c>)
 8008cd6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008cda:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <SUBGHZSPI_Receive+0x78>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008ce6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8008cea:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8008cee:	fb0c f303 	mul.w	r3, ip, r3
 8008cf2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	b143      	cbz	r3, 8008d0a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008cfe:	4b07      	ldr	r3, [pc, #28]	@ (8008d1c <SUBGHZSPI_Receive+0x7c>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f013 0f01 	tst.w	r3, #1
 8008d06:	d0f5      	beq.n	8008cf4 <SUBGHZSPI_Receive+0x54>
 8008d08:	e001      	b.n	8008d0e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008d0e:	4b03      	ldr	r3, [pc, #12]	@ (8008d1c <SUBGHZSPI_Receive+0x7c>)
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	700b      	strb	r3, [r1, #0]

  return status;
}
 8008d14:	b002      	add	sp, #8
 8008d16:	4770      	bx	lr
 8008d18:	20000000 	.word	0x20000000
 8008d1c:	58010000 	.word	0x58010000

08008d20 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d20:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008d22:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <SUBGHZ_WaitOnBusy+0x50>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008d2a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8008d2e:	2264      	movs	r2, #100	@ 0x64
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	e006      	b.n	8008d46 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008d38:	2302      	movs	r3, #2
 8008d3a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8008d3c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8008d3e:	b002      	add	sp, #8
 8008d40:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008d42:	4213      	tst	r3, r2
 8008d44:	d012      	beq.n	8008d6c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008d46:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <SUBGHZ_WaitOnBusy+0x54>)
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f013 0304 	ands.w	r3, r3, #4
 8008d4e:	d000      	beq.n	8008d52 <SUBGHZ_WaitOnBusy+0x32>
 8008d50:	2301      	movs	r3, #1
    if (count == 0U)
 8008d52:	9a01      	ldr	r2, [sp, #4]
 8008d54:	2a00      	cmp	r2, #0
 8008d56:	d0ef      	beq.n	8008d38 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8008d58:	9a01      	ldr	r2, [sp, #4]
 8008d5a:	3a01      	subs	r2, #1
 8008d5c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008d5e:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <SUBGHZ_WaitOnBusy+0x54>)
 8008d60:	6952      	ldr	r2, [r2, #20]
 8008d62:	f012 0202 	ands.w	r2, r2, #2
 8008d66:	d0ec      	beq.n	8008d42 <SUBGHZ_WaitOnBusy+0x22>
 8008d68:	2201      	movs	r2, #1
 8008d6a:	e7ea      	b.n	8008d42 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e7e6      	b.n	8008d3e <SUBGHZ_WaitOnBusy+0x1e>
 8008d70:	20000000 	.word	0x20000000
 8008d74:	58000400 	.word	0x58000400

08008d78 <SUBGHZ_CheckDeviceReady>:
{
 8008d78:	b500      	push	{lr}
 8008d7a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008d7c:	7903      	ldrb	r3, [r0, #4]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d004      	beq.n	8008d8c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008d82:	f7ff ffcd 	bl	8008d20 <SUBGHZ_WaitOnBusy>
}
 8008d86:	b003      	add	sp, #12
 8008d88:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <SUBGHZ_CheckDeviceReady+0x4c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008d94:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8008d98:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8008dc8 <SUBGHZ_CheckDeviceReady+0x50>)
 8008d9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008da0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f9      	bne.n	8008da8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008db4:	4a04      	ldr	r2, [pc, #16]	@ (8008dc8 <SUBGHZ_CheckDeviceReady+0x50>)
 8008db6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008dc2:	e7de      	b.n	8008d82 <SUBGHZ_CheckDeviceReady+0xa>
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	58000400 	.word	0x58000400

08008dcc <HAL_SUBGHZ_WriteRegisters>:
{
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008dd2:	7980      	ldrb	r0, [r0, #6]
 8008dd4:	fa5f f880 	uxtb.w	r8, r0
 8008dd8:	f1b8 0f01 	cmp.w	r8, #1
 8008ddc:	d13e      	bne.n	8008e5c <HAL_SUBGHZ_WriteRegisters+0x90>
 8008dde:	460c      	mov	r4, r1
 8008de0:	4617      	mov	r7, r2
 8008de2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8008de4:	796b      	ldrb	r3, [r5, #5]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d03b      	beq.n	8008e62 <HAL_SUBGHZ_WriteRegisters+0x96>
 8008dea:	2301      	movs	r3, #1
 8008dec:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008dee:	2302      	movs	r3, #2
 8008df0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008df2:	4628      	mov	r0, r5
 8008df4:	f7ff ffc0 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008df8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e68 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8008dfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008dfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008e06:	210d      	movs	r1, #13
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff ff0d 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008e0e:	0a21      	lsrs	r1, r4, #8
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7ff ff09 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008e16:	b2e1      	uxtb	r1, r4
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f7ff ff05 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008e1e:	2400      	movs	r4, #0
 8008e20:	e005      	b.n	8008e2e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008e22:	5d39      	ldrb	r1, [r7, r4]
 8008e24:	4628      	mov	r0, r5
 8008e26:	f7ff feff 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008e2a:	3401      	adds	r4, #1
 8008e2c:	b2a4      	uxth	r4, r4
 8008e2e:	42b4      	cmp	r4, r6
 8008e30:	d3f7      	bcc.n	8008e22 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008e32:	4a0d      	ldr	r2, [pc, #52]	@ (8008e68 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8008e34:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7ff ff6d 	bl	8008d20 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008e46:	68ab      	ldr	r3, [r5, #8]
 8008e48:	b90b      	cbnz	r3, 8008e4e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8008e4a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8008e52:	2300      	movs	r3, #0
 8008e54:	716b      	strb	r3, [r5, #5]
}
 8008e56:	4640      	mov	r0, r8
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8008e5c:	f04f 0802 	mov.w	r8, #2
 8008e60:	e7f9      	b.n	8008e56 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8008e62:	f04f 0802 	mov.w	r8, #2
 8008e66:	e7f6      	b.n	8008e56 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8008e68:	58000400 	.word	0x58000400

08008e6c <HAL_SUBGHZ_ReadRegisters>:
{
 8008e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e70:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008e72:	7980      	ldrb	r0, [r0, #6]
 8008e74:	fa5f f880 	uxtb.w	r8, r0
 8008e78:	f1b8 0f01 	cmp.w	r8, #1
 8008e7c:	d141      	bne.n	8008f02 <HAL_SUBGHZ_ReadRegisters+0x96>
 8008e7e:	460c      	mov	r4, r1
 8008e80:	4615      	mov	r5, r2
 8008e82:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8008e84:	7973      	ldrb	r3, [r6, #5]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d03e      	beq.n	8008f08 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff ff72 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008e94:	4a1e      	ldr	r2, [pc, #120]	@ (8008f10 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8008e96:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008e9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008ea2:	211d      	movs	r1, #29
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff febf 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008eaa:	0a21      	lsrs	r1, r4, #8
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff febb 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008eb2:	b2e1      	uxtb	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff feb7 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff feb3 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	e006      	b.n	8008ed4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff fee9 	bl	8008ca0 <SUBGHZSPI_Receive>
      pData++;
 8008ece:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	b2a4      	uxth	r4, r4
 8008ed4:	42bc      	cmp	r4, r7
 8008ed6:	d3f6      	bcc.n	8008ec6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8008f10 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8008eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ff1a 	bl	8008d20 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008eec:	68b3      	ldr	r3, [r6, #8]
 8008eee:	b90b      	cbnz	r3, 8008ef4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8008ef0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	7173      	strb	r3, [r6, #5]
}
 8008efc:	4640      	mov	r0, r8
 8008efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8008f02:	f04f 0802 	mov.w	r8, #2
 8008f06:	e7f9      	b.n	8008efc <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8008f08:	f04f 0802 	mov.w	r8, #2
 8008f0c:	e7f6      	b.n	8008efc <HAL_SUBGHZ_ReadRegisters+0x90>
 8008f0e:	bf00      	nop
 8008f10:	58000400 	.word	0x58000400

08008f14 <HAL_SUBGHZ_ExecSetCmd>:
{
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008f1a:	7980      	ldrb	r0, [r0, #6]
 8008f1c:	fa5f f980 	uxtb.w	r9, r0
 8008f20:	f1b9 0f01 	cmp.w	r9, #1
 8008f24:	d143      	bne.n	8008fae <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8008f26:	4688      	mov	r8, r1
 8008f28:	4617      	mov	r7, r2
 8008f2a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8008f2c:	796b      	ldrb	r3, [r5, #5]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d040      	beq.n	8008fb4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8008f32:	2301      	movs	r3, #1
 8008f34:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008f36:	4628      	mov	r0, r5
 8008f38:	f7ff ff1e 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008f3c:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8008f40:	d005      	beq.n	8008f4e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8008f42:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8008f46:	d002      	beq.n	8008f4e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	712b      	strb	r3, [r5, #4]
 8008f4c:	e001      	b.n	8008f52 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008f52:	4a1a      	ldr	r2, [pc, #104]	@ (8008fbc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8008f54:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008f58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008f60:	4641      	mov	r1, r8
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7ff fe60 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008f68:	2400      	movs	r4, #0
 8008f6a:	e005      	b.n	8008f78 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008f6c:	5d39      	ldrb	r1, [r7, r4]
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7ff fe5a 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008f74:	3401      	adds	r4, #1
 8008f76:	b2a4      	uxth	r4, r4
 8008f78:	42b4      	cmp	r4, r6
 8008f7a:	d3f7      	bcc.n	8008f6c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008fbc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8008f7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8008f8a:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8008f8e:	d10a      	bne.n	8008fa6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008f90:	68ab      	ldr	r3, [r5, #8]
 8008f92:	b90b      	cbnz	r3, 8008f98 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8008f94:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	716b      	strb	r3, [r5, #5]
}
 8008fa0:	4648      	mov	r0, r9
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7ff feba 	bl	8008d20 <SUBGHZ_WaitOnBusy>
 8008fac:	e7f0      	b.n	8008f90 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8008fae:	f04f 0902 	mov.w	r9, #2
 8008fb2:	e7f5      	b.n	8008fa0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8008fb4:	f04f 0902 	mov.w	r9, #2
 8008fb8:	e7f2      	b.n	8008fa0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8008fba:	bf00      	nop
 8008fbc:	58000400 	.word	0x58000400

08008fc0 <HAL_SUBGHZ_ExecGetCmd>:
{
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008fc6:	7980      	ldrb	r0, [r0, #6]
 8008fc8:	fa5f f880 	uxtb.w	r8, r0
 8008fcc:	f1b8 0f01 	cmp.w	r8, #1
 8008fd0:	d139      	bne.n	8009046 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8008fd8:	7973      	ldrb	r3, [r6, #5]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d036      	beq.n	800904c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff fec8 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8009054 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8008fea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008fee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff fe15 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008ffe:	2100      	movs	r1, #0
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff fe11 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009006:	2400      	movs	r4, #0
 8009008:	e006      	b.n	8009018 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800900a:	4629      	mov	r1, r5
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff fe47 	bl	8008ca0 <SUBGHZSPI_Receive>
      pData++;
 8009012:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8009014:	3401      	adds	r4, #1
 8009016:	b2a4      	uxth	r4, r4
 8009018:	42bc      	cmp	r4, r7
 800901a:	d3f6      	bcc.n	800900a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800901c:	4a0d      	ldr	r2, [pc, #52]	@ (8009054 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800901e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff fe78 	bl	8008d20 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009030:	68b3      	ldr	r3, [r6, #8]
 8009032:	b90b      	cbnz	r3, 8009038 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8009034:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009038:	2301      	movs	r3, #1
 800903a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800903c:	2300      	movs	r3, #0
 800903e:	7173      	strb	r3, [r6, #5]
}
 8009040:	4640      	mov	r0, r8
 8009042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8009046:	f04f 0802 	mov.w	r8, #2
 800904a:	e7f9      	b.n	8009040 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800904c:	f04f 0802 	mov.w	r8, #2
 8009050:	e7f6      	b.n	8009040 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8009052:	bf00      	nop
 8009054:	58000400 	.word	0x58000400

08009058 <HAL_SUBGHZ_IRQHandler>:
{
 8009058:	b530      	push	{r4, r5, lr}
 800905a:	b083      	sub	sp, #12
 800905c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800905e:	2300      	movs	r3, #0
 8009060:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009064:	2302      	movs	r3, #2
 8009066:	aa01      	add	r2, sp, #4
 8009068:	2112      	movs	r1, #18
 800906a:	f7ff ffa9 	bl	8008fc0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800906e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009072:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8009076:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800907a:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800907c:	2302      	movs	r3, #2
 800907e:	aa01      	add	r2, sp, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4628      	mov	r0, r5
 8009084:	f7ff ff46 	bl	8008f14 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009088:	f014 0f01 	tst.w	r4, #1
 800908c:	d123      	bne.n	80090d6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800908e:	f014 0f02 	tst.w	r4, #2
 8009092:	d124      	bne.n	80090de <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009094:	f014 0f04 	tst.w	r4, #4
 8009098:	d125      	bne.n	80090e6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800909a:	f014 0f08 	tst.w	r4, #8
 800909e:	d126      	bne.n	80090ee <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80090a0:	f014 0f10 	tst.w	r4, #16
 80090a4:	d127      	bne.n	80090f6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80090a6:	f014 0f20 	tst.w	r4, #32
 80090aa:	d128      	bne.n	80090fe <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80090ac:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80090b0:	d129      	bne.n	8009106 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80090b2:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80090b6:	d006      	beq.n	80090c6 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80090b8:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80090bc:	d027      	beq.n	800910e <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80090be:	2101      	movs	r1, #1
 80090c0:	4628      	mov	r0, r5
 80090c2:	f003 fca7 	bl	800ca14 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80090c6:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80090ca:	d125      	bne.n	8009118 <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80090cc:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 80090d0:	d126      	bne.n	8009120 <HAL_SUBGHZ_IRQHandler+0xc8>
}
 80090d2:	b003      	add	sp, #12
 80090d4:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80090d6:	4628      	mov	r0, r5
 80090d8:	f003 fc84 	bl	800c9e4 <HAL_SUBGHZ_TxCpltCallback>
 80090dc:	e7d7      	b.n	800908e <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80090de:	4628      	mov	r0, r5
 80090e0:	f003 fc88 	bl	800c9f4 <HAL_SUBGHZ_RxCpltCallback>
 80090e4:	e7d6      	b.n	8009094 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80090e6:	4628      	mov	r0, r5
 80090e8:	f003 fcb8 	bl	800ca5c <HAL_SUBGHZ_PreambleDetectedCallback>
 80090ec:	e7d5      	b.n	800909a <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80090ee:	4628      	mov	r0, r5
 80090f0:	f003 fcbc 	bl	800ca6c <HAL_SUBGHZ_SyncWordValidCallback>
 80090f4:	e7d4      	b.n	80090a0 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80090f6:	4628      	mov	r0, r5
 80090f8:	f003 fcc0 	bl	800ca7c <HAL_SUBGHZ_HeaderValidCallback>
 80090fc:	e7d3      	b.n	80090a6 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80090fe:	4628      	mov	r0, r5
 8009100:	f003 fca4 	bl	800ca4c <HAL_SUBGHZ_HeaderErrorCallback>
 8009104:	e7d2      	b.n	80090ac <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009106:	4628      	mov	r0, r5
 8009108:	f003 fc7c 	bl	800ca04 <HAL_SUBGHZ_CRCErrorCallback>
 800910c:	e7d1      	b.n	80090b2 <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800910e:	2100      	movs	r1, #0
 8009110:	4628      	mov	r0, r5
 8009112:	f003 fc7f 	bl	800ca14 <HAL_SUBGHZ_CADStatusCallback>
 8009116:	e7d6      	b.n	80090c6 <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009118:	4628      	mov	r0, r5
 800911a:	f003 fc8d 	bl	800ca38 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800911e:	e7d5      	b.n	80090cc <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009120:	4628      	mov	r0, r5
 8009122:	f003 fcb3 	bl	800ca8c <HAL_SUBGHZ_LrFhssHopCallback>
}
 8009126:	e7d4      	b.n	80090d2 <HAL_SUBGHZ_IRQHandler+0x7a>

08009128 <HAL_SUBGHZ_WriteBuffer>:
{
 8009128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800912e:	7980      	ldrb	r0, [r0, #6]
 8009130:	fa5f f880 	uxtb.w	r8, r0
 8009134:	f1b8 0f01 	cmp.w	r8, #1
 8009138:	d138      	bne.n	80091ac <HAL_SUBGHZ_WriteBuffer+0x84>
 800913a:	460c      	mov	r4, r1
 800913c:	4617      	mov	r7, r2
 800913e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8009140:	796b      	ldrb	r3, [r5, #5]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d035      	beq.n	80091b2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8009146:	2301      	movs	r3, #1
 8009148:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800914a:	4628      	mov	r0, r5
 800914c:	f7ff fe14 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009150:	4a19      	ldr	r2, [pc, #100]	@ (80091b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8009152:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009156:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800915a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800915e:	210e      	movs	r1, #14
 8009160:	4628      	mov	r0, r5
 8009162:	f7ff fd61 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f7ff fd5d 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800916e:	2400      	movs	r4, #0
 8009170:	e005      	b.n	800917e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009172:	5d39      	ldrb	r1, [r7, r4]
 8009174:	4628      	mov	r0, r5
 8009176:	f7ff fd57 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800917a:	3401      	adds	r4, #1
 800917c:	b2a4      	uxth	r4, r4
 800917e:	42b4      	cmp	r4, r6
 8009180:	d3f7      	bcc.n	8009172 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009182:	4a0d      	ldr	r2, [pc, #52]	@ (80091b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8009184:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800918c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009190:	4628      	mov	r0, r5
 8009192:	f7ff fdc5 	bl	8008d20 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009196:	68ab      	ldr	r3, [r5, #8]
 8009198:	b90b      	cbnz	r3, 800919e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800919a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800919e:	2301      	movs	r3, #1
 80091a0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80091a2:	2300      	movs	r3, #0
 80091a4:	716b      	strb	r3, [r5, #5]
}
 80091a6:	4640      	mov	r0, r8
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80091ac:	f04f 0802 	mov.w	r8, #2
 80091b0:	e7f9      	b.n	80091a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80091b2:	f04f 0802 	mov.w	r8, #2
 80091b6:	e7f6      	b.n	80091a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80091b8:	58000400 	.word	0x58000400

080091bc <HAL_SUBGHZ_ReadBuffer>:
{
 80091bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80091c2:	7980      	ldrb	r0, [r0, #6]
 80091c4:	fa5f f880 	uxtb.w	r8, r0
 80091c8:	f1b8 0f01 	cmp.w	r8, #1
 80091cc:	d13d      	bne.n	800924a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80091ce:	460c      	mov	r4, r1
 80091d0:	4615      	mov	r5, r2
 80091d2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80091d4:	7973      	ldrb	r3, [r6, #5]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d03a      	beq.n	8009250 <HAL_SUBGHZ_ReadBuffer+0x94>
 80091da:	2301      	movs	r3, #1
 80091dc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff fdca 	bl	8008d78 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80091e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009258 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80091e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80091ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80091f2:	211e      	movs	r1, #30
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff fd17 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80091fa:	4621      	mov	r1, r4
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff fd13 	bl	8008c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009202:	2100      	movs	r1, #0
 8009204:	4630      	mov	r0, r6
 8009206:	f7ff fd0f 	bl	8008c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800920a:	2400      	movs	r4, #0
 800920c:	e006      	b.n	800921c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800920e:	4629      	mov	r1, r5
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff fd45 	bl	8008ca0 <SUBGHZSPI_Receive>
      pData++;
 8009216:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8009218:	3401      	adds	r4, #1
 800921a:	b2a4      	uxth	r4, r4
 800921c:	42bc      	cmp	r4, r7
 800921e:	d3f6      	bcc.n	800920e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009220:	4a0d      	ldr	r2, [pc, #52]	@ (8009258 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8009222:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800922a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff fd76 	bl	8008d20 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009234:	68b3      	ldr	r3, [r6, #8]
 8009236:	b90b      	cbnz	r3, 800923c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8009238:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800923c:	2301      	movs	r3, #1
 800923e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8009240:	2300      	movs	r3, #0
 8009242:	7173      	strb	r3, [r6, #5]
}
 8009244:	4640      	mov	r0, r8
 8009246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800924a:	f04f 0802 	mov.w	r8, #2
 800924e:	e7f9      	b.n	8009244 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8009250:	f04f 0802 	mov.w	r8, #2
 8009254:	e7f6      	b.n	8009244 <HAL_SUBGHZ_ReadBuffer+0x88>
 8009256:	bf00      	nop
 8009258:	58000400 	.word	0x58000400

0800925c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800925c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	e852 3f00 	ldrex	r3, [r2]
 8009262:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	e842 3100 	strex	r1, r3, [r2]
 800926a:	2900      	cmp	r1, #0
 800926c:	d1f6      	bne.n	800925c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800926e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	f102 0308 	add.w	r3, r2, #8
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	3208      	adds	r2, #8
 800927e:	e842 3100 	strex	r1, r3, [r2]
 8009282:	2900      	cmp	r1, #0
 8009284:	d1f3      	bne.n	800926e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009286:	2320      	movs	r3, #32
 8009288:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 800928c:	4770      	bx	lr

0800928e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800928e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	e852 3f00 	ldrex	r3, [r2]
 8009294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	e842 3100 	strex	r1, r3, [r2]
 800929c:	2900      	cmp	r1, #0
 800929e:	d1f6      	bne.n	800928e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	f102 0308 	add.w	r3, r2, #8
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	3208      	adds	r2, #8
 80092b4:	e842 3100 	strex	r1, r3, [r2]
 80092b8:	2900      	cmp	r1, #0
 80092ba:	d1f1      	bne.n	80092a0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d006      	beq.n	80092d0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092c2:	2320      	movs	r3, #32
 80092c4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c8:	2300      	movs	r3, #0
 80092ca:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092cc:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80092ce:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	e852 3f00 	ldrex	r3, [r2]
 80092d6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	e842 3100 	strex	r1, r3, [r2]
 80092de:	2900      	cmp	r1, #0
 80092e0:	d1f6      	bne.n	80092d0 <UART_EndRxTransfer+0x42>
 80092e2:	e7ee      	b.n	80092c2 <UART_EndRxTransfer+0x34>

080092e4 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092e4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80092e8:	2b21      	cmp	r3, #33	@ 0x21
 80092ea:	d000      	beq.n	80092ee <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80092ec:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80092ee:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	b993      	cbnz	r3, 800931c <UART_TxISR_8BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80092f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	e852 3f00 	ldrex	r3, [r2]
 80092fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	e842 3100 	strex	r1, r3, [r2]
 8009304:	2900      	cmp	r1, #0
 8009306:	d1f6      	bne.n	80092f6 <UART_TxISR_8BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009308:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	e852 3f00 	ldrex	r3, [r2]
 800930e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	e842 3100 	strex	r1, r3, [r2]
 8009316:	2900      	cmp	r1, #0
 8009318:	d1f6      	bne.n	8009308 <UART_TxISR_8BIT+0x24>
 800931a:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800931c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	6803      	ldr	r3, [r0, #0]
 8009322:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009324:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009326:	3301      	adds	r3, #1
 8009328:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 800932a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29b      	uxth	r3, r3
 8009334:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
}
 8009338:	e7d8      	b.n	80092ec <UART_TxISR_8BIT+0x8>

0800933a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800933a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800933e:	2b21      	cmp	r3, #33	@ 0x21
 8009340:	d000      	beq.n	8009344 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009342:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8009344:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8009348:	b29b      	uxth	r3, r3
 800934a:	b993      	cbnz	r3, 8009372 <UART_TxISR_16BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800934c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	e852 3f00 	ldrex	r3, [r2]
 8009352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	e842 3100 	strex	r1, r3, [r2]
 800935a:	2900      	cmp	r1, #0
 800935c:	d1f6      	bne.n	800934c <UART_TxISR_16BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800935e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	e852 3f00 	ldrex	r3, [r2]
 8009364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	e842 3100 	strex	r1, r3, [r2]
 800936c:	2900      	cmp	r1, #0
 800936e:	d1f6      	bne.n	800935e <UART_TxISR_16BIT+0x24>
 8009370:	4770      	bx	lr
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009372:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	6802      	ldr	r2, [r0, #0]
 8009378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800937e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009380:	3302      	adds	r3, #2
 8009382:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8009384:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
}
 8009392:	e7d6      	b.n	8009342 <UART_TxISR_16BIT+0x8>

08009394 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009394:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009398:	2b21      	cmp	r3, #33	@ 0x21
 800939a:	d000      	beq.n	800939e <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800939c:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800939e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 80093a2:	e017      	b.n	80093d4 <UART_TxISR_8BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80093a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	f102 0308 	add.w	r3, r2, #8
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	3208      	adds	r2, #8
 80093b4:	e842 3100 	strex	r1, r3, [r2]
 80093b8:	2900      	cmp	r1, #0
 80093ba:	d1f3      	bne.n	80093a4 <UART_TxISR_8BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	e852 3f00 	ldrex	r3, [r2]
 80093c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	e842 3100 	strex	r1, r3, [r2]
 80093ca:	2900      	cmp	r1, #0
 80093cc:	d1f6      	bne.n	80093bc <UART_TxISR_8BIT_FIFOEN+0x28>
 80093ce:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0e1      	beq.n	800939c <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80093d8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 80093dc:	b292      	uxth	r2, r2
 80093de:	2a00      	cmp	r2, #0
 80093e0:	d0e0      	beq.n	80093a4 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80093e2:	6802      	ldr	r2, [r0, #0]
 80093e4:	69d1      	ldr	r1, [r2, #28]
 80093e6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80093ea:	d0f1      	beq.n	80093d0 <UART_TxISR_8BIT_FIFOEN+0x3c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80093ec:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80093ee:	7809      	ldrb	r1, [r1, #0]
 80093f0:	6291      	str	r1, [r2, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80093f2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80093f4:	3201      	adds	r2, #1
 80093f6:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 80093f8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 80093fc:	b292      	uxth	r2, r2
 80093fe:	3a01      	subs	r2, #1
 8009400:	b292      	uxth	r2, r2
 8009402:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
 8009406:	e7e3      	b.n	80093d0 <UART_TxISR_8BIT_FIFOEN+0x3c>

08009408 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009408:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800940c:	2b21      	cmp	r3, #33	@ 0x21
 800940e:	d000      	beq.n	8009412 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009410:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009412:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 8009416:	e017      	b.n	8009448 <UART_TxISR_16BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009418:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	f102 0308 	add.w	r3, r2, #8
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	3208      	adds	r2, #8
 8009428:	e842 3100 	strex	r1, r3, [r2]
 800942c:	2900      	cmp	r1, #0
 800942e:	d1f3      	bne.n	8009418 <UART_TxISR_16BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009430:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	e852 3f00 	ldrex	r3, [r2]
 8009436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	e842 3100 	strex	r1, r3, [r2]
 800943e:	2900      	cmp	r1, #0
 8009440:	d1f6      	bne.n	8009430 <UART_TxISR_16BIT_FIFOEN+0x28>
 8009442:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009444:	3b01      	subs	r3, #1
 8009446:	b29b      	uxth	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0e1      	beq.n	8009410 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800944c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8009450:	b292      	uxth	r2, r2
 8009452:	2a00      	cmp	r2, #0
 8009454:	d0e0      	beq.n	8009418 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009456:	6802      	ldr	r2, [r0, #0]
 8009458:	69d1      	ldr	r1, [r2, #28]
 800945a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800945e:	d0f1      	beq.n	8009444 <UART_TxISR_16BIT_FIFOEN+0x3c>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009460:	6d01      	ldr	r1, [r0, #80]	@ 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009462:	8809      	ldrh	r1, [r1, #0]
 8009464:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009468:	6291      	str	r1, [r2, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800946a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800946c:	3202      	adds	r2, #2
 800946e:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 8009470:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8009474:	b292      	uxth	r2, r2
 8009476:	3a01      	subs	r2, #1
 8009478:	b292      	uxth	r2, r2
 800947a:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
 800947e:	e7e1      	b.n	8009444 <UART_TxISR_16BIT_FIFOEN+0x3c>

08009480 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8009480:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009484:	2b20      	cmp	r3, #32
 8009486:	d143      	bne.n	8009510 <HAL_UART_Transmit_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 8009488:	2900      	cmp	r1, #0
 800948a:	d043      	beq.n	8009514 <HAL_UART_Transmit_IT+0x94>
 800948c:	2a00      	cmp	r2, #0
 800948e:	d043      	beq.n	8009518 <HAL_UART_Transmit_IT+0x98>
    huart->pTxBuffPtr  = pData;
 8009490:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009492:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009496:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->TxISR       = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	6783      	str	r3, [r0, #120]	@ 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094a2:	2321      	movs	r3, #33	@ 0x21
 80094a4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80094a8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80094aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ae:	d010      	beq.n	80094d2 <HAL_UART_Transmit_IT+0x52>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b0:	6883      	ldr	r3, [r0, #8]
 80094b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b6:	d025      	beq.n	8009504 <HAL_UART_Transmit_IT+0x84>
        huart->TxISR = UART_TxISR_8BIT;
 80094b8:	4b18      	ldr	r3, [pc, #96]	@ (800951c <HAL_UART_Transmit_IT+0x9c>)
 80094ba:	6783      	str	r3, [r0, #120]	@ 0x78
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80094bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	e852 3f00 	ldrex	r3, [r2]
 80094c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	e842 3100 	strex	r1, r3, [r2]
 80094ca:	2900      	cmp	r1, #0
 80094cc:	d1f6      	bne.n	80094bc <HAL_UART_Transmit_IT+0x3c>
    return HAL_OK;
 80094ce:	2000      	movs	r0, #0
 80094d0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094d2:	6883      	ldr	r3, [r0, #8]
 80094d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094d8:	d00e      	beq.n	80094f8 <HAL_UART_Transmit_IT+0x78>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80094da:	4b11      	ldr	r3, [pc, #68]	@ (8009520 <HAL_UART_Transmit_IT+0xa0>)
 80094dc:	6783      	str	r3, [r0, #120]	@ 0x78
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80094de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	f102 0308 	add.w	r3, r2, #8
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	3208      	adds	r2, #8
 80094ee:	e842 3100 	strex	r1, r3, [r2]
 80094f2:	2900      	cmp	r1, #0
 80094f4:	d1f3      	bne.n	80094de <HAL_UART_Transmit_IT+0x5e>
 80094f6:	e7ea      	b.n	80094ce <HAL_UART_Transmit_IT+0x4e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f8:	6903      	ldr	r3, [r0, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1ed      	bne.n	80094da <HAL_UART_Transmit_IT+0x5a>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80094fe:	4b09      	ldr	r3, [pc, #36]	@ (8009524 <HAL_UART_Transmit_IT+0xa4>)
 8009500:	6783      	str	r3, [r0, #120]	@ 0x78
 8009502:	e7ec      	b.n	80094de <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009504:	6903      	ldr	r3, [r0, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1d6      	bne.n	80094b8 <HAL_UART_Transmit_IT+0x38>
        huart->TxISR = UART_TxISR_16BIT;
 800950a:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <HAL_UART_Transmit_IT+0xa8>)
 800950c:	6783      	str	r3, [r0, #120]	@ 0x78
 800950e:	e7d5      	b.n	80094bc <HAL_UART_Transmit_IT+0x3c>
    return HAL_BUSY;
 8009510:	2002      	movs	r0, #2
 8009512:	4770      	bx	lr
      return HAL_ERROR;
 8009514:	2001      	movs	r0, #1
 8009516:	4770      	bx	lr
 8009518:	2001      	movs	r0, #1
}
 800951a:	4770      	bx	lr
 800951c:	080092e5 	.word	0x080092e5
 8009520:	08009395 	.word	0x08009395
 8009524:	08009409 	.word	0x08009409
 8009528:	0800933b 	.word	0x0800933b

0800952c <HAL_UART_Transmit_DMA>:
{
 800952c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800952e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8009532:	2a20      	cmp	r2, #32
 8009534:	d13d      	bne.n	80095b2 <HAL_UART_Transmit_DMA+0x86>
{
 8009536:	b510      	push	{r4, lr}
 8009538:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800953a:	2900      	cmp	r1, #0
 800953c:	d03b      	beq.n	80095b6 <HAL_UART_Transmit_DMA+0x8a>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d03b      	beq.n	80095ba <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8009542:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009544:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009548:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	2200      	movs	r2, #0
 800954e:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009552:	2221      	movs	r2, #33	@ 0x21
 8009554:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8009558:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800955a:	b1ca      	cbz	r2, 8009590 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800955c:	4918      	ldr	r1, [pc, #96]	@ (80095c0 <HAL_UART_Transmit_DMA+0x94>)
 800955e:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009560:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8009562:	4918      	ldr	r1, [pc, #96]	@ (80095c4 <HAL_UART_Transmit_DMA+0x98>)
 8009564:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009566:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8009568:	4917      	ldr	r1, [pc, #92]	@ (80095c8 <HAL_UART_Transmit_DMA+0x9c>)
 800956a:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800956c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800956e:	2100      	movs	r1, #0
 8009570:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009572:	6802      	ldr	r2, [r0, #0]
 8009574:	3228      	adds	r2, #40	@ 0x28
 8009576:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8009578:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800957a:	f7fd fe8f 	bl	800729c <HAL_DMA_Start_IT>
 800957e:	b138      	cbz	r0, 8009590 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009580:	2310      	movs	r3, #16
 8009582:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8009586:	2320      	movs	r3, #32
 8009588:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 800958c:	2001      	movs	r0, #1
 800958e:	e00f      	b.n	80095b0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	2240      	movs	r2, #64	@ 0x40
 8009594:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009596:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	f102 0308 	add.w	r3, r2, #8
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	3208      	adds	r2, #8
 80095a6:	e842 3100 	strex	r1, r3, [r2]
 80095aa:	2900      	cmp	r1, #0
 80095ac:	d1f3      	bne.n	8009596 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80095ae:	2000      	movs	r0, #0
}
 80095b0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80095b2:	2002      	movs	r0, #2
}
 80095b4:	4770      	bx	lr
      return HAL_ERROR;
 80095b6:	2001      	movs	r0, #1
 80095b8:	e7fa      	b.n	80095b0 <HAL_UART_Transmit_DMA+0x84>
 80095ba:	2001      	movs	r0, #1
 80095bc:	e7f8      	b.n	80095b0 <HAL_UART_Transmit_DMA+0x84>
 80095be:	bf00      	nop
 80095c0:	080095cd 	.word	0x080095cd
 80095c4:	0800963b 	.word	0x0800963b
 80095c8:	08009647 	.word	0x08009647

080095cc <UART_DMATransmitCplt>:
{
 80095cc:	b508      	push	{r3, lr}
 80095ce:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095d0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f013 0f20 	tst.w	r3, #32
 80095da:	d118      	bne.n	800960e <UART_DMATransmitCplt+0x42>
    huart->TxXferCount = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	f102 0308 	add.w	r3, r2, #8
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	3208      	adds	r2, #8
 80095f2:	e842 3100 	strex	r1, r3, [r2]
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d1f3      	bne.n	80095e2 <UART_DMATransmitCplt+0x16>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	e852 3f00 	ldrex	r3, [r2]
 8009600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	e842 3100 	strex	r1, r3, [r2]
 8009608:	2900      	cmp	r1, #0
 800960a:	d1f6      	bne.n	80095fa <UART_DMATransmitCplt+0x2e>
}
 800960c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800960e:	f7f8 f81f 	bl	8001650 <HAL_UART_TxCpltCallback>
}
 8009612:	e7fb      	b.n	800960c <UART_DMATransmitCplt+0x40>

08009614 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009614:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009616:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	e852 3f00 	ldrex	r3, [r2]
 800961c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	e842 3100 	strex	r1, r3, [r2]
 8009624:	2900      	cmp	r1, #0
 8009626:	d1f6      	bne.n	8009616 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009628:	2320      	movs	r3, #32
 800962a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009632:	f7f8 f80d 	bl	8001650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009636:	bd08      	pop	{r3, pc}

08009638 <HAL_UART_TxHalfCpltCallback>:
}
 8009638:	4770      	bx	lr

0800963a <UART_DMATxHalfCplt>:
{
 800963a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800963c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800963e:	f7ff fffb 	bl	8009638 <HAL_UART_TxHalfCpltCallback>
}
 8009642:	bd08      	pop	{r3, pc}

08009644 <HAL_UART_ErrorCallback>:
}
 8009644:	4770      	bx	lr

08009646 <UART_DMAError>:
{
 8009646:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009648:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800964a:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800964e:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800965a:	d001      	beq.n	8009660 <UART_DMAError+0x1a>
 800965c:	2a21      	cmp	r2, #33	@ 0x21
 800965e:	d010      	beq.n	8009682 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009668:	d001      	beq.n	800966e <UART_DMAError+0x28>
 800966a:	2d22      	cmp	r5, #34	@ 0x22
 800966c:	d010      	beq.n	8009690 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800966e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009672:	f043 0310 	orr.w	r3, r3, #16
 8009676:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff ffe2 	bl	8009644 <HAL_UART_ErrorCallback>
}
 8009680:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff fde7 	bl	800925c <UART_EndTxTransfer>
 800968e:	e7e7      	b.n	8009660 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009696:	4620      	mov	r0, r4
 8009698:	f7ff fdf9 	bl	800928e <UART_EndRxTransfer>
 800969c:	e7e7      	b.n	800966e <UART_DMAError+0x28>

0800969e <UART_DMAAbortOnError>:
{
 800969e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096a0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80096a8:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 80096ac:	f7ff ffca 	bl	8009644 <HAL_UART_ErrorCallback>
}
 80096b0:	bd08      	pop	{r3, pc}

080096b2 <HAL_UARTEx_RxEventCallback>:
}
 80096b2:	4770      	bx	lr

080096b4 <HAL_UART_IRQHandler>:
{
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096b8:	6802      	ldr	r2, [r0, #0]
 80096ba:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096bc:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096be:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80096c0:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 80096c4:	ea13 0f0c 	tst.w	r3, ip
 80096c8:	d10d      	bne.n	80096e6 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ca:	f013 0f20 	tst.w	r3, #32
 80096ce:	d010      	beq.n	80096f2 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096d0:	f010 0f20 	tst.w	r0, #32
 80096d4:	d102      	bne.n	80096dc <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096d6:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80096da:	d00a      	beq.n	80096f2 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 80096dc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80096de:	b393      	cbz	r3, 8009746 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 80096e0:	4620      	mov	r0, r4
 80096e2:	4798      	blx	r3
      return;
 80096e4:	e02f      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096e6:	4db4      	ldr	r5, [pc, #720]	@ (80099b8 <HAL_UART_IRQHandler+0x304>)
 80096e8:	400d      	ands	r5, r1
 80096ea:	d12d      	bne.n	8009748 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096ec:	4eb3      	ldr	r6, [pc, #716]	@ (80099bc <HAL_UART_IRQHandler+0x308>)
 80096ee:	4230      	tst	r0, r6
 80096f0:	d12a      	bne.n	8009748 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80096f4:	2d01      	cmp	r5, #1
 80096f6:	f000 80c0 	beq.w	800987a <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096fa:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80096fe:	d003      	beq.n	8009708 <HAL_UART_IRQHandler+0x54>
 8009700:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8009704:	f040 815e 	bne.w	80099c4 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800970c:	d007      	beq.n	800971e <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800970e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009712:	f040 815e 	bne.w	80099d2 <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009716:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800971a:	f040 815a 	bne.w	80099d2 <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800971e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009722:	d003      	beq.n	800972c <HAL_UART_IRQHandler+0x78>
 8009724:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8009728:	f040 815a 	bne.w	80099e0 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800972c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009730:	d003      	beq.n	800973a <HAL_UART_IRQHandler+0x86>
 8009732:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8009736:	f040 8157 	bne.w	80099e8 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800973a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800973e:	d002      	beq.n	8009746 <HAL_UART_IRQHandler+0x92>
 8009740:	2800      	cmp	r0, #0
 8009742:	f2c0 8155 	blt.w	80099f0 <HAL_UART_IRQHandler+0x33c>
}
 8009746:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009748:	f013 0f01 	tst.w	r3, #1
 800974c:	d009      	beq.n	8009762 <HAL_UART_IRQHandler+0xae>
 800974e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8009752:	d006      	beq.n	8009762 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009754:	2601      	movs	r6, #1
 8009756:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009758:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800975c:	4332      	orrs	r2, r6
 800975e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009762:	f013 0f02 	tst.w	r3, #2
 8009766:	d00b      	beq.n	8009780 <HAL_UART_IRQHandler+0xcc>
 8009768:	f011 0f01 	tst.w	r1, #1
 800976c:	d008      	beq.n	8009780 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	2602      	movs	r6, #2
 8009772:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009774:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009778:	f042 0204 	orr.w	r2, r2, #4
 800977c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009780:	f013 0f04 	tst.w	r3, #4
 8009784:	d00b      	beq.n	800979e <HAL_UART_IRQHandler+0xea>
 8009786:	f011 0f01 	tst.w	r1, #1
 800978a:	d008      	beq.n	800979e <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	2604      	movs	r6, #4
 8009790:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009792:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009796:	f042 0202 	orr.w	r2, r2, #2
 800979a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800979e:	f013 0f08 	tst.w	r3, #8
 80097a2:	d00b      	beq.n	80097bc <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097a4:	f010 0f20 	tst.w	r0, #32
 80097a8:	d100      	bne.n	80097ac <HAL_UART_IRQHandler+0xf8>
 80097aa:	b13d      	cbz	r5, 80097bc <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	2508      	movs	r5, #8
 80097b0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80097b6:	432a      	orrs	r2, r5
 80097b8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097bc:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80097c0:	d00c      	beq.n	80097dc <HAL_UART_IRQHandler+0x128>
 80097c2:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 80097c6:	d009      	beq.n	80097dc <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80097ce:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80097d4:	f042 0220 	orr.w	r2, r2, #32
 80097d8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d0b0      	beq.n	8009746 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097e4:	f013 0f20 	tst.w	r3, #32
 80097e8:	d009      	beq.n	80097fe <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097ea:	f010 0f20 	tst.w	r0, #32
 80097ee:	d102      	bne.n	80097f6 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097f0:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80097f4:	d003      	beq.n	80097fe <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 80097f6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80097f8:	b10b      	cbz	r3, 80097fe <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 80097fa:	4620      	mov	r0, r4
 80097fc:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80097fe:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800980a:	d102      	bne.n	8009812 <HAL_UART_IRQHandler+0x15e>
 800980c:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8009810:	d02c      	beq.n	800986c <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff fd3b 	bl	800928e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009820:	d020      	beq.n	8009864 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009822:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	f102 0308 	add.w	r3, r2, #8
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	3208      	adds	r2, #8
 8009832:	e842 3100 	strex	r1, r3, [r2]
 8009836:	2900      	cmp	r1, #0
 8009838:	d1f3      	bne.n	8009822 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800983a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800983e:	b16b      	cbz	r3, 800985c <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009840:	4a5f      	ldr	r2, [pc, #380]	@ (80099c0 <HAL_UART_IRQHandler+0x30c>)
 8009842:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009844:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009848:	f7fd fdae 	bl	80073a8 <HAL_DMA_Abort_IT>
 800984c:	2800      	cmp	r0, #0
 800984e:	f43f af7a 	beq.w	8009746 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009852:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009856:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009858:	4798      	blx	r3
 800985a:	e774      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fef1 	bl	8009644 <HAL_UART_ErrorCallback>
 8009862:	e770      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff feed 	bl	8009644 <HAL_UART_ErrorCallback>
 800986a:	e76c      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800986c:	4620      	mov	r0, r4
 800986e:	f7ff fee9 	bl	8009644 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009872:	2300      	movs	r3, #0
 8009874:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8009878:	e765      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800987a:	f013 0f10 	tst.w	r3, #16
 800987e:	f43f af3c 	beq.w	80096fa <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009882:	f010 0f10 	tst.w	r0, #16
 8009886:	f43f af38 	beq.w	80096fa <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800988a:	2310      	movs	r3, #16
 800988c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009896:	d053      	beq.n	8009940 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009898:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800989c:	6813      	ldr	r3, [r2, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f43f af4f 	beq.w	8009746 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098a8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80098ac:	4299      	cmp	r1, r3
 80098ae:	f67f af4a 	bls.w	8009746 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 80098b2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f013 0f20 	tst.w	r3, #32
 80098be:	d132      	bne.n	8009926 <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	e852 3f00 	ldrex	r3, [r2]
 80098c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	e842 3100 	strex	r1, r3, [r2]
 80098ce:	2900      	cmp	r1, #0
 80098d0:	d1f6      	bne.n	80098c0 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	f102 0308 	add.w	r3, r2, #8
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	3208      	adds	r2, #8
 80098e2:	e842 3100 	strex	r1, r3, [r2]
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d1f3      	bne.n	80098d2 <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	f102 0308 	add.w	r3, r2, #8
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	3208      	adds	r2, #8
 80098fa:	e842 3100 	strex	r1, r3, [r2]
 80098fe:	2900      	cmp	r1, #0
 8009900:	d1f3      	bne.n	80098ea <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8009902:	2320      	movs	r3, #32
 8009904:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009908:	2300      	movs	r3, #0
 800990a:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800990c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	e852 3f00 	ldrex	r3, [r2]
 8009912:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	e842 3100 	strex	r1, r3, [r2]
 800991a:	2900      	cmp	r1, #0
 800991c:	d1f6      	bne.n	800990c <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800991e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009922:	f7fd fd07 	bl	8007334 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009926:	2302      	movs	r3, #2
 8009928:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800992a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800992e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009932:	b29b      	uxth	r3, r3
 8009934:	1ac9      	subs	r1, r1, r3
 8009936:	b289      	uxth	r1, r1
 8009938:	4620      	mov	r0, r4
 800993a:	f7ff feba 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
      return;
 800993e:	e702      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009940:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009944:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009948:	b29b      	uxth	r3, r3
 800994a:	1ac9      	subs	r1, r1, r3
 800994c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800994e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009952:	b29b      	uxth	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	f43f aef6 	beq.w	8009746 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800995a:	2900      	cmp	r1, #0
 800995c:	f43f aef3 	beq.w	8009746 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009960:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	e852 3f00 	ldrex	r3, [r2]
 8009966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	e842 3000 	strex	r0, r3, [r2]
 800996e:	2800      	cmp	r0, #0
 8009970:	d1f6      	bne.n	8009960 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009972:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	f102 0308 	add.w	r3, r2, #8
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009980:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	3208      	adds	r2, #8
 8009986:	e842 3000 	strex	r0, r3, [r2]
 800998a:	2800      	cmp	r0, #0
 800998c:	d1f1      	bne.n	8009972 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800998e:	2320      	movs	r3, #32
 8009990:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009994:	2300      	movs	r3, #0
 8009996:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8009998:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	e852 3f00 	ldrex	r3, [r2]
 80099a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	e842 3000 	strex	r0, r3, [r2]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1f6      	bne.n	800999a <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ac:	2302      	movs	r3, #2
 80099ae:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff fe7e 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
      return;
 80099b6:	e6c6      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
 80099b8:	10000001 	.word	0x10000001
 80099bc:	04000120 	.word	0x04000120
 80099c0:	0800969f 	.word	0x0800969f
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80099c8:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fe60 	bl	800a690 <HAL_UARTEx_WakeupCallback>
    return;
 80099d0:	e6b9      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 80099d2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f43f aeb6 	beq.w	8009746 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 80099da:	4620      	mov	r0, r4
 80099dc:	4798      	blx	r3
    return;
 80099de:	e6b2      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 80099e0:	4620      	mov	r0, r4
 80099e2:	f7ff fe17 	bl	8009614 <UART_EndTransmit_IT>
    return;
 80099e6:	e6ae      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fe53 	bl	800a694 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80099ee:	e6aa      	b.n	8009746 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 fe4e 	bl	800a692 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80099f6:	e6a6      	b.n	8009746 <HAL_UART_IRQHandler+0x92>

080099f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099f8:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80099fa:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099fe:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8009a02:	2a22      	cmp	r2, #34	@ 0x22
 8009a04:	d005      	beq.n	8009a12 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a06:	6802      	ldr	r2, [r0, #0]
 8009a08:	6993      	ldr	r3, [r2, #24]
 8009a0a:	f043 0308 	orr.w	r3, r3, #8
 8009a0e:	6193      	str	r3, [r2, #24]
  }
}
 8009a10:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a12:	6802      	ldr	r2, [r0, #0]
 8009a14:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8009a1e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8009a20:	3301      	adds	r3, #1
 8009a22:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8009a24:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8009a32:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e9      	bne.n	8009a10 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	e852 3f00 	ldrex	r3, [r2]
 8009a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	e842 3100 	strex	r1, r3, [r2]
 8009a4a:	2900      	cmp	r1, #0
 8009a4c:	d1f6      	bne.n	8009a3c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	f102 0308 	add.w	r3, r2, #8
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	3208      	adds	r2, #8
 8009a5e:	e842 3100 	strex	r1, r3, [r2]
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d1f3      	bne.n	8009a4e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8009a66:	2320      	movs	r3, #32
 8009a68:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a70:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a72:	6803      	ldr	r3, [r0, #0]
 8009a74:	4a16      	ldr	r2, [pc, #88]	@ (8009ad0 <UART_RxISR_8BIT+0xd8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00c      	beq.n	8009a94 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009a80:	d008      	beq.n	8009a94 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	e852 3f00 	ldrex	r3, [r2]
 8009a88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	e842 3100 	strex	r1, r3, [r2]
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d1f6      	bne.n	8009a82 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a94:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d116      	bne.n	8009ac8 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	e852 3f00 	ldrex	r3, [r2]
 8009aa4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	e842 3100 	strex	r1, r3, [r2]
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d1f6      	bne.n	8009a9e <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ab0:	6803      	ldr	r3, [r0, #0]
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	f012 0f10 	tst.w	r2, #16
 8009ab8:	d001      	beq.n	8009abe <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aba:	2210      	movs	r2, #16
 8009abc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009abe:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8009ac2:	f7ff fdf6 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
 8009ac6:	e7a3      	b.n	8009a10 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8009ac8:	f7f7 fdd2 	bl	8001670 <HAL_UART_RxCpltCallback>
 8009acc:	e7a0      	b.n	8009a10 <UART_RxISR_8BIT+0x18>
 8009ace:	bf00      	nop
 8009ad0:	40008000 	.word	0x40008000

08009ad4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ad4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ad6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ada:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8009ade:	2b22      	cmp	r3, #34	@ 0x22
 8009ae0:	d005      	beq.n	8009aee <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ae2:	6802      	ldr	r2, [r0, #0]
 8009ae4:	6993      	ldr	r3, [r2, #24]
 8009ae6:	f043 0308 	orr.w	r3, r3, #8
 8009aea:	6193      	str	r3, [r2, #24]
  }
}
 8009aec:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009aee:	6803      	ldr	r3, [r0, #0]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009af2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8009af4:	4013      	ands	r3, r2
 8009af6:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8009af8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8009afa:	3302      	adds	r3, #2
 8009afc:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8009afe:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8009b0c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1ea      	bne.n	8009aec <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b16:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	e852 3f00 	ldrex	r3, [r2]
 8009b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	e842 3100 	strex	r1, r3, [r2]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d1f6      	bne.n	8009b16 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b28:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	f102 0308 	add.w	r3, r2, #8
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	3208      	adds	r2, #8
 8009b38:	e842 3100 	strex	r1, r3, [r2]
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d1f3      	bne.n	8009b28 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8009b40:	2320      	movs	r3, #32
 8009b42:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4a:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	4a16      	ldr	r2, [pc, #88]	@ (8009ba8 <UART_RxISR_16BIT+0xd4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00c      	beq.n	8009b6e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009b5a:	d008      	beq.n	8009b6e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	e852 3f00 	ldrex	r3, [r2]
 8009b62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	e842 3100 	strex	r1, r3, [r2]
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	d1f6      	bne.n	8009b5c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d116      	bne.n	8009ba2 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b74:	2300      	movs	r3, #0
 8009b76:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	e852 3f00 	ldrex	r3, [r2]
 8009b7e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	e842 3100 	strex	r1, r3, [r2]
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d1f6      	bne.n	8009b78 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b8a:	6803      	ldr	r3, [r0, #0]
 8009b8c:	69da      	ldr	r2, [r3, #28]
 8009b8e:	f012 0f10 	tst.w	r2, #16
 8009b92:	d001      	beq.n	8009b98 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b94:	2210      	movs	r2, #16
 8009b96:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b98:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8009b9c:	f7ff fd89 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
 8009ba0:	e7a4      	b.n	8009aec <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8009ba2:	f7f7 fd65 	bl	8001670 <HAL_UART_RxCpltCallback>
 8009ba6:	e7a1      	b.n	8009aec <UART_RxISR_16BIT+0x18>
 8009ba8:	40008000 	.word	0x40008000

08009bac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8009bb0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bb4:	6803      	ldr	r3, [r0, #0]
 8009bb6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bb8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bbc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bc0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8009bc4:	2a22      	cmp	r2, #34	@ 0x22
 8009bc6:	d005      	beq.n	8009bd4 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	f042 0208 	orr.w	r2, r2, #8
 8009bce:	619a      	str	r2, [r3, #24]
  }
}
 8009bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8009bd6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bda:	e008      	b.n	8009bee <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bdc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d14c      	bne.n	8009c7e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8009be4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d04e      	beq.n	8009c8c <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bee:	2f00      	cmp	r7, #0
 8009bf0:	f000 809a 	beq.w	8009d28 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8009bf4:	f015 0f20 	tst.w	r5, #32
 8009bf8:	f000 8096 	beq.w	8009d28 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c00:	b2f3      	uxtb	r3, r6
 8009c02:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009c04:	400b      	ands	r3, r1
 8009c06:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8009c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009c0e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	3b01      	subs	r3, #1
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c20:	f015 0f07 	tst.w	r5, #7
 8009c24:	d0de      	beq.n	8009be4 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c26:	f015 0f01 	tst.w	r5, #1
 8009c2a:	d009      	beq.n	8009c40 <UART_RxISR_8BIT_FIFOEN+0x94>
 8009c2c:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8009c30:	d006      	beq.n	8009c40 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c32:	2201      	movs	r2, #1
 8009c34:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c36:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c40:	f015 0f02 	tst.w	r5, #2
 8009c44:	d00b      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8009c46:	f018 0f01 	tst.w	r8, #1
 8009c4a:	d008      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c52:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009c56:	f043 0304 	orr.w	r3, r3, #4
 8009c5a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c5e:	f015 0f04 	tst.w	r5, #4
 8009c62:	d0bb      	beq.n	8009bdc <UART_RxISR_8BIT_FIFOEN+0x30>
 8009c64:	f018 0f01 	tst.w	r8, #1
 8009c68:	d0b8      	beq.n	8009bdc <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c70:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8009c7c:	e7ae      	b.n	8009bdc <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff fce0 	bl	8009644 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8009c8a:	e7ab      	b.n	8009be4 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	e852 3f00 	ldrex	r3, [r2]
 8009c92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	e842 3100 	strex	r1, r3, [r2]
 8009c9a:	2900      	cmp	r1, #0
 8009c9c:	d1f6      	bne.n	8009c8c <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	f102 0308 	add.w	r3, r2, #8
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	3208      	adds	r2, #8
 8009cb2:	e842 3100 	strex	r1, r3, [r2]
 8009cb6:	2900      	cmp	r1, #0
 8009cb8:	d1f1      	bne.n	8009c9e <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8009cba:	2320      	movs	r3, #32
 8009cbc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cc4:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	4a29      	ldr	r2, [pc, #164]	@ (8009d70 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d003      	beq.n	8009cd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009cd4:	d106      	bne.n	8009ce4 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d00d      	beq.n	8009cf8 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7f7 fcc7 	bl	8001670 <HAL_UART_RxCpltCallback>
 8009ce2:	e784      	b.n	8009bee <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ce4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	e852 3f00 	ldrex	r3, [r2]
 8009cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	e842 3100 	strex	r1, r3, [r2]
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	d1f6      	bne.n	8009ce4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8009cf6:	e7ee      	b.n	8009cd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfe:	e852 3f00 	ldrex	r3, [r2]
 8009d02:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	e842 3100 	strex	r1, r3, [r2]
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	d1f6      	bne.n	8009cfc <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	69da      	ldr	r2, [r3, #28]
 8009d12:	f012 0f10 	tst.w	r2, #16
 8009d16:	d001      	beq.n	8009d1c <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d18:	2210      	movs	r2, #16
 8009d1a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7ff fcc6 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
 8009d26:	e762      	b.n	8009bee <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8009d28:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009d2c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f43f af4e 	beq.w	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009d34:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	f67f af49 	bls.w	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	f102 0308 	add.w	r3, r2, #8
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	3208      	adds	r2, #8
 8009d4e:	e842 3100 	strex	r1, r3, [r2]
 8009d52:	2900      	cmp	r1, #0
 8009d54:	d1f3      	bne.n	8009d3e <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8009d58:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	e852 3f00 	ldrex	r3, [r2]
 8009d60:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	e842 3100 	strex	r1, r3, [r2]
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	d1f6      	bne.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8009d6c:	e730      	b.n	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009d6e:	bf00      	nop
 8009d70:	40008000 	.word	0x40008000
 8009d74:	080099f9 	.word	0x080099f9

08009d78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d7c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d80:	6803      	ldr	r3, [r0, #0]
 8009d82:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d84:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d88:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d8c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8009d90:	2a22      	cmp	r2, #34	@ 0x22
 8009d92:	d005      	beq.n	8009da0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	f042 0208 	orr.w	r2, r2, #8
 8009d9a:	619a      	str	r2, [r3, #24]
  }
}
 8009d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8009da2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009da6:	e008      	b.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009da8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d14b      	bne.n	8009e48 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8009db0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d04d      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	f000 8099 	beq.w	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8009dc0:	f015 0f20 	tst.w	r5, #32
 8009dc4:	f000 8095 	beq.w	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dcc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dce:	4033      	ands	r3, r6
 8009dd0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8009dd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dd4:	3302      	adds	r3, #2
 8009dd6:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009dd8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dea:	f015 0f07 	tst.w	r5, #7
 8009dee:	d0df      	beq.n	8009db0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009df0:	f015 0f01 	tst.w	r5, #1
 8009df4:	d009      	beq.n	8009e0a <UART_RxISR_16BIT_FIFOEN+0x92>
 8009df6:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8009dfa:	d006      	beq.n	8009e0a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e00:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e0a:	f015 0f02 	tst.w	r5, #2
 8009e0e:	d00b      	beq.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8009e10:	f018 0f01 	tst.w	r8, #1
 8009e14:	d008      	beq.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009e20:	f043 0304 	orr.w	r3, r3, #4
 8009e24:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e28:	f015 0f04 	tst.w	r5, #4
 8009e2c:	d0bc      	beq.n	8009da8 <UART_RxISR_16BIT_FIFOEN+0x30>
 8009e2e:	f018 0f01 	tst.w	r8, #1
 8009e32:	d0b9      	beq.n	8009da8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	2204      	movs	r2, #4
 8009e38:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009e3e:	f043 0302 	orr.w	r3, r3, #2
 8009e42:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8009e46:	e7af      	b.n	8009da8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f7ff fbfb 	bl	8009644 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8009e54:	e7ac      	b.n	8009db0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	e852 3f00 	ldrex	r3, [r2]
 8009e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	e842 3100 	strex	r1, r3, [r2]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d1f6      	bne.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	f102 0308 	add.w	r3, r2, #8
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e76:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	3208      	adds	r2, #8
 8009e7c:	e842 3100 	strex	r1, r3, [r2]
 8009e80:	2900      	cmp	r1, #0
 8009e82:	d1f1      	bne.n	8009e68 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8009e84:	2320      	movs	r3, #32
 8009e86:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e8e:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	4a29      	ldr	r2, [pc, #164]	@ (8009f38 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009e9e:	d106      	bne.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d00d      	beq.n	8009ec2 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7f7 fbe2 	bl	8001670 <HAL_UART_RxCpltCallback>
 8009eac:	e785      	b.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	e852 3f00 	ldrex	r3, [r2]
 8009eb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	e842 3100 	strex	r1, r3, [r2]
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d1f6      	bne.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x136>
 8009ec0:	e7ee      	b.n	8009ea0 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	e852 3f00 	ldrex	r3, [r2]
 8009ecc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	e842 3100 	strex	r1, r3, [r2]
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d1f6      	bne.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	f012 0f10 	tst.w	r2, #16
 8009ee0:	d001      	beq.n	8009ee6 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee2:	2210      	movs	r2, #16
 8009ee4:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009eea:	4620      	mov	r0, r4
 8009eec:	f7ff fbe1 	bl	80096b2 <HAL_UARTEx_RxEventCallback>
 8009ef0:	e763      	b.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8009ef2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009ef6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f43f af4f 	beq.w	8009d9c <UART_RxISR_16BIT_FIFOEN+0x24>
 8009efe:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8009f02:	429a      	cmp	r2, r3
 8009f04:	f67f af4a 	bls.w	8009d9c <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	f102 0308 	add.w	r3, r2, #8
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	3208      	adds	r2, #8
 8009f18:	e842 3100 	strex	r1, r3, [r2]
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d1f3      	bne.n	8009f08 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8009f22:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	e852 3f00 	ldrex	r3, [r2]
 8009f2a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	e842 3100 	strex	r1, r3, [r2]
 8009f32:	2900      	cmp	r1, #0
 8009f34:	d1f6      	bne.n	8009f24 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8009f36:	e731      	b.n	8009d9c <UART_RxISR_16BIT_FIFOEN+0x24>
 8009f38:	40008000 	.word	0x40008000
 8009f3c:	08009ad5 	.word	0x08009ad5

08009f40 <UART_SetConfig>:
{
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f44:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f46:	6883      	ldr	r3, [r0, #8]
 8009f48:	6902      	ldr	r2, [r0, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	6942      	ldr	r2, [r0, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	69c2      	ldr	r2, [r0, #28]
 8009f52:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	4a9d      	ldr	r2, [pc, #628]	@ (800a1cc <UART_SetConfig+0x28c>)
 8009f58:	4002      	ands	r2, r0
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5e:	6822      	ldr	r2, [r4, #0]
 8009f60:	6853      	ldr	r3, [r2, #4]
 8009f62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009f66:	68e1      	ldr	r1, [r4, #12]
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f6c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	4b97      	ldr	r3, [pc, #604]	@ (800a1d0 <UART_SetConfig+0x290>)
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d001      	beq.n	8009f7a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8009f76:	6a23      	ldr	r3, [r4, #32]
 8009f78:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f7a:	6893      	ldr	r3, [r2, #8]
 8009f7c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f80:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f84:	430b      	orrs	r3, r1
 8009f86:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f88:	6822      	ldr	r2, [r4, #0]
 8009f8a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009f8c:	f023 030f 	bic.w	r3, r3, #15
 8009f90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009f92:	430b      	orrs	r3, r1
 8009f94:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	4a8e      	ldr	r2, [pc, #568]	@ (800a1d4 <UART_SetConfig+0x294>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d01c      	beq.n	8009fd8 <UART_SetConfig+0x98>
 8009f9e:	4a8e      	ldr	r2, [pc, #568]	@ (800a1d8 <UART_SetConfig+0x298>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d031      	beq.n	800a008 <UART_SetConfig+0xc8>
 8009fa4:	4a8a      	ldr	r2, [pc, #552]	@ (800a1d0 <UART_SetConfig+0x290>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d04b      	beq.n	800a042 <UART_SetConfig+0x102>
 8009faa:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fac:	4988      	ldr	r1, [pc, #544]	@ (800a1d0 <UART_SetConfig+0x290>)
 8009fae:	428b      	cmp	r3, r1
 8009fb0:	d068      	beq.n	800a084 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb2:	69e0      	ldr	r0, [r4, #28]
 8009fb4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009fb8:	f000 80a5 	beq.w	800a106 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8009fbc:	2a08      	cmp	r2, #8
 8009fbe:	f200 811f 	bhi.w	800a200 <UART_SetConfig+0x2c0>
 8009fc2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009fc6:	00d3      	.short	0x00d3
 8009fc8:	00d100f5 	.word	0x00d100f5
 8009fcc:	00f8011d 	.word	0x00f8011d
 8009fd0:	011d011d 	.word	0x011d011d
 8009fd4:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009fdc:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009fe0:	f002 0203 	and.w	r2, r2, #3
 8009fe4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fe8:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8009fec:	2a03      	cmp	r2, #3
 8009fee:	d809      	bhi.n	800a004 <UART_SetConfig+0xc4>
 8009ff0:	e8df f002 	tbb	[pc, r2]
 8009ff4:	063c0402 	.word	0x063c0402
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	e7d7      	b.n	8009fac <UART_SetConfig+0x6c>
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	e7d5      	b.n	8009fac <UART_SetConfig+0x6c>
 800a000:	2208      	movs	r2, #8
 800a002:	e7d3      	b.n	8009fac <UART_SetConfig+0x6c>
 800a004:	2210      	movs	r2, #16
 800a006:	e7d1      	b.n	8009fac <UART_SetConfig+0x6c>
 800a008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a00c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800a010:	f002 020c 	and.w	r2, r2, #12
 800a014:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 800a018:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 800a01c:	2a0c      	cmp	r2, #12
 800a01e:	d80e      	bhi.n	800a03e <UART_SetConfig+0xfe>
 800a020:	e8df f002 	tbb	[pc, r2]
 800a024:	0d0d0d07 	.word	0x0d0d0d07
 800a028:	0d0d0d09 	.word	0x0d0d0d09
 800a02c:	0d0d0d26 	.word	0x0d0d0d26
 800a030:	0b          	.byte	0x0b
 800a031:	00          	.byte	0x00
 800a032:	2200      	movs	r2, #0
 800a034:	e7ba      	b.n	8009fac <UART_SetConfig+0x6c>
 800a036:	2204      	movs	r2, #4
 800a038:	e7b8      	b.n	8009fac <UART_SetConfig+0x6c>
 800a03a:	2208      	movs	r2, #8
 800a03c:	e7b6      	b.n	8009fac <UART_SetConfig+0x6c>
 800a03e:	2210      	movs	r2, #16
 800a040:	e7b4      	b.n	8009fac <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a046:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800a04a:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800a04e:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800a052:	d00f      	beq.n	800a074 <UART_SetConfig+0x134>
 800a054:	d805      	bhi.n	800a062 <UART_SetConfig+0x122>
 800a056:	b17a      	cbz	r2, 800a078 <UART_SetConfig+0x138>
 800a058:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a05c:	d10e      	bne.n	800a07c <UART_SetConfig+0x13c>
 800a05e:	2204      	movs	r2, #4
 800a060:	e7a4      	b.n	8009fac <UART_SetConfig+0x6c>
 800a062:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800a066:	d10b      	bne.n	800a080 <UART_SetConfig+0x140>
 800a068:	2208      	movs	r2, #8
 800a06a:	e79f      	b.n	8009fac <UART_SetConfig+0x6c>
 800a06c:	2202      	movs	r2, #2
 800a06e:	e79d      	b.n	8009fac <UART_SetConfig+0x6c>
 800a070:	2202      	movs	r2, #2
 800a072:	e79b      	b.n	8009fac <UART_SetConfig+0x6c>
 800a074:	2202      	movs	r2, #2
 800a076:	e799      	b.n	8009fac <UART_SetConfig+0x6c>
 800a078:	2200      	movs	r2, #0
 800a07a:	e797      	b.n	8009fac <UART_SetConfig+0x6c>
 800a07c:	2210      	movs	r2, #16
 800a07e:	e795      	b.n	8009fac <UART_SetConfig+0x6c>
 800a080:	2210      	movs	r2, #16
 800a082:	e793      	b.n	8009fac <UART_SetConfig+0x6c>
    switch (clocksource)
 800a084:	2a08      	cmp	r2, #8
 800a086:	f200 809c 	bhi.w	800a1c2 <UART_SetConfig+0x282>
 800a08a:	e8df f002 	tbb	[pc, r2]
 800a08e:	9a08      	.short	0x9a08
 800a090:	9a379a3a 	.word	0x9a379a3a
 800a094:	9a9a      	.short	0x9a9a
 800a096:	05          	.byte	0x05
 800a097:	00          	.byte	0x00
 800a098:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a09c:	e004      	b.n	800a0a8 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a09e:	f7fe f99b 	bl	80083d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f000 808f 	beq.w	800a1c6 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a0aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a1dc <UART_SetConfig+0x29c>)
 800a0ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a0b0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0b4:	6865      	ldr	r5, [r4, #4]
 800a0b6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	f200 8094 	bhi.w	800a1e8 <UART_SetConfig+0x2a8>
 800a0c0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a0c4:	f200 8092 	bhi.w	800a1ec <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c8:	2600      	movs	r6, #0
 800a0ca:	4633      	mov	r3, r6
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	f7f6 fbbf 	bl	8000850 <__aeabi_uldivmod>
 800a0d2:	0209      	lsls	r1, r1, #8
 800a0d4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a0d8:	0200      	lsls	r0, r0, #8
 800a0da:	086b      	lsrs	r3, r5, #1
 800a0dc:	18c0      	adds	r0, r0, r3
 800a0de:	462a      	mov	r2, r5
 800a0e0:	4633      	mov	r3, r6
 800a0e2:	f141 0100 	adc.w	r1, r1, #0
 800a0e6:	f7f6 fbb3 	bl	8000850 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0ea:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800a0ee:	4b3c      	ldr	r3, [pc, #240]	@ (800a1e0 <UART_SetConfig+0x2a0>)
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d87d      	bhi.n	800a1f0 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	60d8      	str	r0, [r3, #12]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	e050      	b.n	800a19e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fc:	f7fd fc6e 	bl	80079dc <HAL_RCC_GetSysClockFreq>
        break;
 800a100:	e7cf      	b.n	800a0a2 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800a102:	4838      	ldr	r0, [pc, #224]	@ (800a1e4 <UART_SetConfig+0x2a4>)
 800a104:	e7d0      	b.n	800a0a8 <UART_SetConfig+0x168>
    switch (clocksource)
 800a106:	2a08      	cmp	r2, #8
 800a108:	d874      	bhi.n	800a1f4 <UART_SetConfig+0x2b4>
 800a10a:	e8df f002 	tbb	[pc, r2]
 800a10e:	2707      	.short	0x2707
 800a110:	732a7305 	.word	0x732a7305
 800a114:	7373      	.short	0x7373
 800a116:	0b          	.byte	0x0b
 800a117:	00          	.byte	0x00
 800a118:	4832      	ldr	r0, [pc, #200]	@ (800a1e4 <UART_SetConfig+0x2a4>)
 800a11a:	e003      	b.n	800a124 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a11c:	f7fe f95c 	bl	80083d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a120:	2800      	cmp	r0, #0
 800a122:	d069      	beq.n	800a1f8 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a124:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a126:	4b2d      	ldr	r3, [pc, #180]	@ (800a1dc <UART_SetConfig+0x29c>)
 800a128:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a12c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a130:	6862      	ldr	r2, [r4, #4]
 800a132:	0853      	lsrs	r3, r2, #1
 800a134:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a138:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a13c:	f1a3 0110 	sub.w	r1, r3, #16
 800a140:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a144:	4291      	cmp	r1, r2
 800a146:	d859      	bhi.n	800a1fc <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a148:	b29a      	uxth	r2, r3
 800a14a:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a14e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a152:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	60d3      	str	r3, [r2, #12]
 800a158:	2000      	movs	r0, #0
 800a15a:	e020      	b.n	800a19e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a15c:	f7fe f94c 	bl	80083f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800a160:	e7de      	b.n	800a120 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800a162:	f7fd fc3b 	bl	80079dc <HAL_RCC_GetSysClockFreq>
        break;
 800a166:	e7db      	b.n	800a120 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800a168:	481e      	ldr	r0, [pc, #120]	@ (800a1e4 <UART_SetConfig+0x2a4>)
 800a16a:	e003      	b.n	800a174 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a16c:	f7fe f934 	bl	80083d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a170:	2800      	cmp	r0, #0
 800a172:	d047      	beq.n	800a204 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a174:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a176:	4b19      	ldr	r3, [pc, #100]	@ (800a1dc <UART_SetConfig+0x29c>)
 800a178:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a17c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a186:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a18a:	f1a0 0210 	sub.w	r2, r0, #16
 800a18e:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800a192:	429a      	cmp	r2, r3
 800a194:	d838      	bhi.n	800a208 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	b280      	uxth	r0, r0
 800a19a:	60d8      	str	r0, [r3, #12]
 800a19c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a1a4:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800a1ac:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1b0:	f7fe f922 	bl	80083f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800a1b4:	e7dc      	b.n	800a170 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800a1b6:	f7fd fc11 	bl	80079dc <HAL_RCC_GetSysClockFreq>
        break;
 800a1ba:	e7d9      	b.n	800a170 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800a1bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a1c0:	e7d8      	b.n	800a174 <UART_SetConfig+0x234>
    switch (clocksource)
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	e7eb      	b.n	800a19e <UART_SetConfig+0x25e>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e7e9      	b.n	800a19e <UART_SetConfig+0x25e>
 800a1ca:	bf00      	nop
 800a1cc:	cfff69f3 	.word	0xcfff69f3
 800a1d0:	40008000 	.word	0x40008000
 800a1d4:	40013800 	.word	0x40013800
 800a1d8:	40004400 	.word	0x40004400
 800a1dc:	0800f11c 	.word	0x0800f11c
 800a1e0:	000ffcff 	.word	0x000ffcff
 800a1e4:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	e7d8      	b.n	800a19e <UART_SetConfig+0x25e>
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	e7d6      	b.n	800a19e <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e7d4      	b.n	800a19e <UART_SetConfig+0x25e>
    switch (clocksource)
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7d2      	b.n	800a19e <UART_SetConfig+0x25e>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7d0      	b.n	800a19e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	e7ce      	b.n	800a19e <UART_SetConfig+0x25e>
    switch (clocksource)
 800a200:	2001      	movs	r0, #1
 800a202:	e7cc      	b.n	800a19e <UART_SetConfig+0x25e>
 800a204:	2000      	movs	r0, #0
 800a206:	e7ca      	b.n	800a19e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800a208:	2001      	movs	r0, #1
 800a20a:	e7c8      	b.n	800a19e <UART_SetConfig+0x25e>

0800a20c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a20c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a20e:	f013 0f01 	tst.w	r3, #1
 800a212:	d006      	beq.n	800a222 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a214:	6802      	ldr	r2, [r0, #0]
 800a216:	6853      	ldr	r3, [r2, #4]
 800a218:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a21c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a21e:	430b      	orrs	r3, r1
 800a220:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a222:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a224:	f013 0f02 	tst.w	r3, #2
 800a228:	d006      	beq.n	800a238 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a22a:	6802      	ldr	r2, [r0, #0]
 800a22c:	6853      	ldr	r3, [r2, #4]
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a232:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800a234:	430b      	orrs	r3, r1
 800a236:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a238:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a23a:	f013 0f04 	tst.w	r3, #4
 800a23e:	d006      	beq.n	800a24e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a240:	6802      	ldr	r2, [r0, #0]
 800a242:	6853      	ldr	r3, [r2, #4]
 800a244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a248:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800a24a:	430b      	orrs	r3, r1
 800a24c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a24e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a250:	f013 0f08 	tst.w	r3, #8
 800a254:	d006      	beq.n	800a264 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a256:	6802      	ldr	r2, [r0, #0]
 800a258:	6853      	ldr	r3, [r2, #4]
 800a25a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a25e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800a260:	430b      	orrs	r3, r1
 800a262:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a264:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a266:	f013 0f10 	tst.w	r3, #16
 800a26a:	d006      	beq.n	800a27a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a26c:	6802      	ldr	r2, [r0, #0]
 800a26e:	6893      	ldr	r3, [r2, #8]
 800a270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a274:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800a276:	430b      	orrs	r3, r1
 800a278:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a27a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a27c:	f013 0f20 	tst.w	r3, #32
 800a280:	d006      	beq.n	800a290 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a282:	6802      	ldr	r2, [r0, #0]
 800a284:	6893      	ldr	r3, [r2, #8]
 800a286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a28a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a290:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a292:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a296:	d00a      	beq.n	800a2ae <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a298:	6802      	ldr	r2, [r0, #0]
 800a29a:	6853      	ldr	r3, [r2, #4]
 800a29c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2a0:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a2a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ac:	d00b      	beq.n	800a2c6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a2b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2b4:	d006      	beq.n	800a2c4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2b6:	6802      	ldr	r2, [r0, #0]
 800a2b8:	6853      	ldr	r3, [r2, #4]
 800a2ba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800a2be:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6053      	str	r3, [r2, #4]
}
 800a2c4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2c6:	6802      	ldr	r2, [r0, #0]
 800a2c8:	6853      	ldr	r3, [r2, #4]
 800a2ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a2ce:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6053      	str	r3, [r2, #4]
 800a2d4:	e7eb      	b.n	800a2ae <UART_AdvFeatureConfig+0xa2>

0800a2d6 <UART_WaitOnFlagUntilTimeout>:
{
 800a2d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2da:	4605      	mov	r5, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	4616      	mov	r6, r2
 800a2e0:	4699      	mov	r9, r3
 800a2e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	69dc      	ldr	r4, [r3, #28]
 800a2ea:	ea37 0404 	bics.w	r4, r7, r4
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2401      	moveq	r4, #1
 800a2f2:	2400      	movne	r4, #0
 800a2f4:	42b4      	cmp	r4, r6
 800a2f6:	d157      	bne.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800a2f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a2fc:	d0f3      	beq.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2fe:	f7f6 fe7b 	bl	8000ff8 <HAL_GetTick>
 800a302:	eba0 0009 	sub.w	r0, r0, r9
 800a306:	4540      	cmp	r0, r8
 800a308:	d82f      	bhi.n	800a36a <UART_WaitOnFlagUntilTimeout+0x94>
 800a30a:	f1b8 0f00 	cmp.w	r8, #0
 800a30e:	d02c      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	f012 0f04 	tst.w	r2, #4
 800a318:	d0e5      	beq.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800a320:	d0e1      	beq.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a326:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a328:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	e852 3f00 	ldrex	r3, [r2]
 800a32e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	e842 3100 	strex	r1, r3, [r2]
 800a336:	2900      	cmp	r1, #0
 800a338:	d1f6      	bne.n	800a328 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	f102 0308 	add.w	r3, r2, #8
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	3208      	adds	r2, #8
 800a34a:	e842 3100 	strex	r1, r3, [r2]
 800a34e:	2900      	cmp	r1, #0
 800a350:	d1f3      	bne.n	800a33a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800a352:	2320      	movs	r3, #32
 800a354:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a358:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a35c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800a360:	2300      	movs	r3, #0
 800a362:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800a366:	2003      	movs	r0, #3
 800a368:	e01f      	b.n	800a3aa <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a36a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	e852 3f00 	ldrex	r3, [r2]
 800a370:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	e842 3100 	strex	r1, r3, [r2]
 800a378:	2900      	cmp	r1, #0
 800a37a:	d1f6      	bne.n	800a36a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	f102 0308 	add.w	r3, r2, #8
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	3208      	adds	r2, #8
 800a38c:	e842 3100 	strex	r1, r3, [r2]
 800a390:	2900      	cmp	r1, #0
 800a392:	d1f3      	bne.n	800a37c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800a394:	2320      	movs	r3, #32
 800a396:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a39a:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 800a3a4:	2003      	movs	r0, #3
 800a3a6:	e000      	b.n	800a3aa <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800a3a8:	2000      	movs	r0, #0
}
 800a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a3ae <UART_CheckIdleState>:
{
 800a3ae:	b530      	push	{r4, r5, lr}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800a3ba:	f7f6 fe1d 	bl	8000ff8 <HAL_GetTick>
 800a3be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3c0:	6822      	ldr	r2, [r4, #0]
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	f012 0f08 	tst.w	r2, #8
 800a3c8:	d110      	bne.n	800a3ec <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f013 0f04 	tst.w	r3, #4
 800a3d2:	d119      	bne.n	800a408 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	2320      	movs	r3, #32
 800a3d6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3da:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	2000      	movs	r0, #0
 800a3e0:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3e2:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800a3e4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800a3e8:	b003      	add	sp, #12
 800a3ea:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f7ff ff6b 	bl	800a2d6 <UART_WaitOnFlagUntilTimeout>
 800a400:	2800      	cmp	r0, #0
 800a402:	d0e2      	beq.n	800a3ca <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a404:	2003      	movs	r0, #3
 800a406:	e7ef      	b.n	800a3e8 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	462b      	mov	r3, r5
 800a410:	2200      	movs	r2, #0
 800a412:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff ff5d 	bl	800a2d6 <UART_WaitOnFlagUntilTimeout>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d0d9      	beq.n	800a3d4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a420:	2003      	movs	r0, #3
 800a422:	e7e1      	b.n	800a3e8 <UART_CheckIdleState+0x3a>

0800a424 <HAL_UART_Init>:
  if (huart == NULL)
 800a424:	b378      	cbz	r0, 800a486 <HAL_UART_Init+0x62>
{
 800a426:	b510      	push	{r4, lr}
 800a428:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a42a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800a42e:	b30b      	cbz	r3, 800a474 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a430:	2324      	movs	r3, #36	@ 0x24
 800a432:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800a436:	6822      	ldr	r2, [r4, #0]
 800a438:	6813      	ldr	r3, [r2, #0]
 800a43a:	f023 0301 	bic.w	r3, r3, #1
 800a43e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff fd7d 	bl	8009f40 <UART_SetConfig>
 800a446:	2801      	cmp	r0, #1
 800a448:	d013      	beq.n	800a472 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a44a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a44c:	b9bb      	cbnz	r3, 800a47e <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a44e:	6822      	ldr	r2, [r4, #0]
 800a450:	6853      	ldr	r3, [r2, #4]
 800a452:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800a456:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	6893      	ldr	r3, [r2, #8]
 800a45c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800a460:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	6813      	ldr	r3, [r2, #0]
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7ff ff9e 	bl	800a3ae <UART_CheckIdleState>
}
 800a472:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a474:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800a478:	f7f6 ffe6 	bl	8001448 <HAL_UART_MspInit>
 800a47c:	e7d8      	b.n	800a430 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff fec4 	bl	800a20c <UART_AdvFeatureConfig>
 800a484:	e7e3      	b.n	800a44e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a486:	2001      	movs	r0, #1
}
 800a488:	4770      	bx	lr
	...

0800a48c <UART_Start_Receive_IT>:
{
 800a48c:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800a48e:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a490:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a494:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 800a49c:	6883      	ldr	r3, [r0, #8]
 800a49e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4a2:	d006      	beq.n	800a4b2 <UART_Start_Receive_IT+0x26>
 800a4a4:	b9a3      	cbnz	r3, 800a4d0 <UART_Start_Receive_IT+0x44>
 800a4a6:	6903      	ldr	r3, [r0, #16]
 800a4a8:	b973      	cbnz	r3, 800a4c8 <UART_Start_Receive_IT+0x3c>
 800a4aa:	23ff      	movs	r3, #255	@ 0xff
 800a4ac:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a4b0:	e014      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
 800a4b2:	6903      	ldr	r3, [r0, #16]
 800a4b4:	b923      	cbnz	r3, 800a4c0 <UART_Start_Receive_IT+0x34>
 800a4b6:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800a4ba:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a4be:	e00d      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
 800a4c0:	23ff      	movs	r3, #255	@ 0xff
 800a4c2:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a4c6:	e009      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
 800a4c8:	237f      	movs	r3, #127	@ 0x7f
 800a4ca:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a4ce:	e005      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
 800a4d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4d4:	d02d      	beq.n	800a532 <UART_Start_Receive_IT+0xa6>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4e2:	2322      	movs	r3, #34	@ 0x22
 800a4e4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e8:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ea:	f101 0308 	add.w	r3, r1, #8
 800a4ee:	e853 3f00 	ldrex	r3, [r3]
 800a4f2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	3108      	adds	r1, #8
 800a4f8:	e841 3400 	strex	r4, r3, [r1]
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	d1f3      	bne.n	800a4e8 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a500:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800a502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a506:	d01e      	beq.n	800a546 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a508:	6883      	ldr	r3, [r0, #8]
 800a50a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a50e:	d042      	beq.n	800a596 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 800a510:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <UART_Start_Receive_IT+0x12c>)
 800a512:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a514:	6903      	ldr	r3, [r0, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d043      	beq.n	800a5a2 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a51a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	e852 3f00 	ldrex	r3, [r2]
 800a520:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	e842 3100 	strex	r1, r3, [r2]
 800a528:	2900      	cmp	r1, #0
 800a52a:	d1f6      	bne.n	800a51a <UART_Start_Receive_IT+0x8e>
}
 800a52c:	2000      	movs	r0, #0
 800a52e:	bc10      	pop	{r4}
 800a530:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800a532:	6903      	ldr	r3, [r0, #16]
 800a534:	b91b      	cbnz	r3, 800a53e <UART_Start_Receive_IT+0xb2>
 800a536:	237f      	movs	r3, #127	@ 0x7f
 800a538:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a53c:	e7ce      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
 800a53e:	233f      	movs	r3, #63	@ 0x3f
 800a540:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800a544:	e7ca      	b.n	800a4dc <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a546:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d8dc      	bhi.n	800a508 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a54e:	6883      	ldr	r3, [r0, #8]
 800a550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a554:	d019      	beq.n	800a58a <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a556:	4b19      	ldr	r3, [pc, #100]	@ (800a5bc <UART_Start_Receive_IT+0x130>)
 800a558:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a55a:	6903      	ldr	r3, [r0, #16]
 800a55c:	b143      	cbz	r3, 800a570 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a55e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a560:	e852 3f00 	ldrex	r3, [r2]
 800a564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	e842 3100 	strex	r1, r3, [r2]
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d1f6      	bne.n	800a55e <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a570:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	f102 0308 	add.w	r3, r2, #8
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	3208      	adds	r2, #8
 800a580:	e842 3100 	strex	r1, r3, [r2]
 800a584:	2900      	cmp	r1, #0
 800a586:	d1f3      	bne.n	800a570 <UART_Start_Receive_IT+0xe4>
 800a588:	e7d0      	b.n	800a52c <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58a:	6903      	ldr	r3, [r0, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e2      	bne.n	800a556 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a590:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c0 <UART_Start_Receive_IT+0x134>)
 800a592:	6743      	str	r3, [r0, #116]	@ 0x74
 800a594:	e7e1      	b.n	800a55a <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a596:	6903      	ldr	r3, [r0, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1b9      	bne.n	800a510 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800a59c:	4b09      	ldr	r3, [pc, #36]	@ (800a5c4 <UART_Start_Receive_IT+0x138>)
 800a59e:	6743      	str	r3, [r0, #116]	@ 0x74
 800a5a0:	e7b8      	b.n	800a514 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	e852 3f00 	ldrex	r3, [r2]
 800a5a8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	e842 3100 	strex	r1, r3, [r2]
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	d1f6      	bne.n	800a5a2 <UART_Start_Receive_IT+0x116>
 800a5b4:	e7ba      	b.n	800a52c <UART_Start_Receive_IT+0xa0>
 800a5b6:	bf00      	nop
 800a5b8:	080099f9 	.word	0x080099f9
 800a5bc:	08009bad 	.word	0x08009bad
 800a5c0:	08009d79 	.word	0x08009d79
 800a5c4:	08009ad5 	.word	0x08009ad5

0800a5c8 <HAL_UART_Receive_IT>:
{
 800a5c8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ca:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d117      	bne.n	800a602 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800a5d2:	b1c1      	cbz	r1, 800a606 <HAL_UART_Receive_IT+0x3e>
 800a5d4:	b1ca      	cbz	r2, 800a60a <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5da:	6803      	ldr	r3, [r0, #0]
 800a5dc:	4c0c      	ldr	r4, [pc, #48]	@ (800a610 <HAL_UART_Receive_IT+0x48>)
 800a5de:	42a3      	cmp	r3, r4
 800a5e0:	d00c      	beq.n	800a5fc <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a5e8:	d008      	beq.n	800a5fc <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5ea:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	e854 3f00 	ldrex	r3, [r4]
 800a5f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	e844 3500 	strex	r5, r3, [r4]
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	d1f6      	bne.n	800a5ea <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5fc:	f7ff ff46 	bl	800a48c <UART_Start_Receive_IT>
 800a600:	e000      	b.n	800a604 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800a602:	2002      	movs	r0, #2
}
 800a604:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a606:	2001      	movs	r0, #1
 800a608:	e7fc      	b.n	800a604 <HAL_UART_Receive_IT+0x3c>
 800a60a:	2001      	movs	r0, #1
 800a60c:	e7fa      	b.n	800a604 <HAL_UART_Receive_IT+0x3c>
 800a60e:	bf00      	nop
 800a610:	40008000 	.word	0x40008000

0800a614 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a614:	b082      	sub	sp, #8
 800a616:	ab02      	add	r3, sp, #8
 800a618:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a61c:	6802      	ldr	r2, [r0, #0]
 800a61e:	6853      	ldr	r3, [r2, #4]
 800a620:	f023 0310 	bic.w	r3, r3, #16
 800a624:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800a628:	430b      	orrs	r3, r1
 800a62a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a62c:	6802      	ldr	r2, [r0, #0]
 800a62e:	6853      	ldr	r3, [r2, #4]
 800a630:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a634:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800a638:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a63c:	6053      	str	r3, [r2, #4]
}
 800a63e:	b002      	add	sp, #8
 800a640:	4770      	bx	lr
	...

0800a644 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a644:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800a646:	b92b      	cbnz	r3, 800a654 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a648:	2301      	movs	r3, #1
 800a64a:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a64e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800a652:	4770      	bx	lr
{
 800a654:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a656:	6803      	ldr	r3, [r0, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a65e:	6899      	ldr	r1, [r3, #8]
 800a660:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a662:	4d09      	ldr	r5, [pc, #36]	@ (800a688 <UARTEx_SetNbDataToProcess+0x44>)
 800a664:	5c6b      	ldrb	r3, [r5, r1]
 800a666:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a668:	4c08      	ldr	r4, [pc, #32]	@ (800a68c <UARTEx_SetNbDataToProcess+0x48>)
 800a66a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a66c:	fb93 f3f1 	sdiv	r3, r3, r1
 800a670:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a674:	5cab      	ldrb	r3, [r5, r2]
 800a676:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a678:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a67a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a67e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800a682:	bc30      	pop	{r4, r5}
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	0800f13c 	.word	0x0800f13c
 800a68c:	0800f134 	.word	0x0800f134

0800a690 <HAL_UARTEx_WakeupCallback>:
}
 800a690:	4770      	bx	lr

0800a692 <HAL_UARTEx_RxFifoFullCallback>:
}
 800a692:	4770      	bx	lr

0800a694 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a694:	4770      	bx	lr

0800a696 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800a696:	b510      	push	{r4, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	ab04      	add	r3, sp, #16
 800a69c:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800a6a0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d035      	beq.n	800a714 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a6b0:	2324      	movs	r3, #36	@ 0x24
 800a6b2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800a6b6:	6802      	ldr	r2, [r0, #0]
 800a6b8:	6813      	ldr	r3, [r2, #0]
 800a6ba:	f023 0301 	bic.w	r3, r3, #1
 800a6be:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a6c0:	6801      	ldr	r1, [r0, #0]
 800a6c2:	688b      	ldr	r3, [r1, #8]
 800a6c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a6c8:	9a02      	ldr	r2, [sp, #8]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a6ce:	b1aa      	cbz	r2, 800a6fc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 800a6d0:	6822      	ldr	r2, [r4, #0]
 800a6d2:	6813      	ldr	r3, [r2, #0]
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800a6da:	f7f6 fc8d 	bl	8000ff8 <HAL_GetTick>
 800a6de:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e0:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 800a6e4:	9200      	str	r2, [sp, #0]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fdf2 	bl	800a2d6 <UART_WaitOnFlagUntilTimeout>
 800a6f2:	b948      	cbnz	r0, 800a708 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800a6f4:	2320      	movs	r3, #32
 800a6f6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 800a6fa:	e006      	b.n	800a70a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a6fc:	ab04      	add	r3, sp, #16
 800a6fe:	e913 0006 	ldmdb	r3, {r1, r2}
 800a702:	f7ff ff87 	bl	800a614 <UARTEx_Wakeup_AddressConfig>
 800a706:	e7e3      	b.n	800a6d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800a708:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800a70a:	2300      	movs	r3, #0
 800a70c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800a710:	b004      	add	sp, #16
 800a712:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800a714:	2002      	movs	r0, #2
 800a716:	e7fb      	b.n	800a710 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800a718 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800a718:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d010      	beq.n	800a742 <HAL_UARTEx_EnableStopMode+0x2a>
 800a720:	2301      	movs	r3, #1
 800a722:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a726:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a728:	e852 3f00 	ldrex	r3, [r2]
 800a72c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	e842 3100 	strex	r1, r3, [r2]
 800a734:	2900      	cmp	r1, #0
 800a736:	d1f6      	bne.n	800a726 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800a738:	2300      	movs	r3, #0
 800a73a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800a73e:	4618      	mov	r0, r3
 800a740:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a742:	2002      	movs	r0, #2
}
 800a744:	4770      	bx	lr

0800a746 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800a746:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d01d      	beq.n	800a78a <HAL_UARTEx_EnableFifoMode+0x44>
{
 800a74e:	b510      	push	{r4, lr}
 800a750:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800a752:	2301      	movs	r3, #1
 800a754:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a758:	2324      	movs	r3, #36	@ 0x24
 800a75a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a75e:	6802      	ldr	r2, [r0, #0]
 800a760:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a762:	6811      	ldr	r1, [r2, #0]
 800a764:	f021 0101 	bic.w	r1, r1, #1
 800a768:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a76a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a76e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a772:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a774:	6802      	ldr	r2, [r0, #0]
 800a776:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800a778:	f7ff ff64 	bl	800a644 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800a77c:	2320      	movs	r3, #32
 800a77e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800a782:	2000      	movs	r0, #0
 800a784:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800a788:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800a78a:	2002      	movs	r0, #2
}
 800a78c:	4770      	bx	lr

0800a78e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a78e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a790:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a794:	2b01      	cmp	r3, #1
 800a796:	d01d      	beq.n	800a7d4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a798:	4604      	mov	r4, r0
 800a79a:	2301      	movs	r3, #1
 800a79c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a7a0:	2324      	movs	r3, #36	@ 0x24
 800a7a2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a6:	6803      	ldr	r3, [r0, #0]
 800a7a8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7b2:	6802      	ldr	r2, [r0, #0]
 800a7b4:	6893      	ldr	r3, [r2, #8]
 800a7b6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800a7ba:	4319      	orrs	r1, r3
 800a7bc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a7be:	f7ff ff41 	bl	800a644 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7c6:	2320      	movs	r3, #32
 800a7c8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a7d4:	2002      	movs	r0, #2
 800a7d6:	e7fc      	b.n	800a7d2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a7d8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a7d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a7da:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d01d      	beq.n	800a81e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a7ea:	2324      	movs	r3, #36	@ 0x24
 800a7ec:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f0:	6803      	ldr	r3, [r0, #0]
 800a7f2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7fc:	6802      	ldr	r2, [r0, #0]
 800a7fe:	6893      	ldr	r3, [r2, #8]
 800a800:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800a804:	4319      	orrs	r1, r3
 800a806:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a808:	f7ff ff1c 	bl	800a644 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a810:	2320      	movs	r3, #32
 800a812:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800a816:	2000      	movs	r0, #0
 800a818:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a81e:	2002      	movs	r0, #2
 800a820:	e7fc      	b.n	800a81c <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800a822 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800a822:	2001      	movs	r0, #1
 800a824:	4770      	bx	lr
	...

0800a828 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800a828:	280a      	cmp	r0, #10
 800a82a:	d807      	bhi.n	800a83c <RadioGetLoRaBandwidthInHz+0x14>
 800a82c:	e8df f000 	tbb	[pc, r0]
 800a830:	17110b20 	.word	0x17110b20
 800a834:	061e1c1a 	.word	0x061e1c1a
 800a838:	0e08      	.short	0x0e08
 800a83a:	14          	.byte	0x14
 800a83b:	00          	.byte	0x00
 800a83c:	2000      	movs	r0, #0
 800a83e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800a840:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800a844:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800a846:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800a84a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800a84c:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800a850:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800a852:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800a856:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800a858:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800a85c:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800a85e:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800a862:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800a864:	4804      	ldr	r0, [pc, #16]	@ (800a878 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800a866:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800a868:	4804      	ldr	r0, [pc, #16]	@ (800a87c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800a86a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800a86c:	4804      	ldr	r0, [pc, #16]	@ (800a880 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800a86e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800a870:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	0001e848 	.word	0x0001e848
 800a87c:	0003d090 	.word	0x0003d090
 800a880:	0007a120 	.word	0x0007a120

0800a884 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a884:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800a888:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a88a:	b953      	cbnz	r3, 800a8a2 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800a88c:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800a88e:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a890:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a892:	b141      	cbz	r1, 800a8a6 <RadioGetGfskTimeOnAirNumerator+0x22>
 800a894:	2302      	movs	r3, #2
 800a896:	f89d 0000 	ldrb.w	r0, [sp]
 800a89a:	4418      	add	r0, r3
}
 800a89c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a8a0:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e7f3      	b.n	800a88e <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e7f5      	b.n	800a896 <RadioGetGfskTimeOnAirNumerator+0x12>

0800a8aa <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800a8b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800a8b4:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a8b6:	f1a1 0c05 	sub.w	ip, r1, #5
 800a8ba:	f1bc 0f01 	cmp.w	ip, #1
 800a8be:	d931      	bls.n	800a924 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a8c0:	b918      	cbnz	r0, 800a8ca <RadioGetLoRaTimeOnAirNumerator+0x20>
 800a8c2:	f1a1 060b 	sub.w	r6, r1, #11
 800a8c6:	2e01      	cmp	r6, #1
 800a8c8:	d934      	bls.n	800a934 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800a8ca:	2801      	cmp	r0, #1
 800a8cc:	d02e      	beq.n	800a92c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800a8ce:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a8d0:	f89d c014 	ldrb.w	ip, [sp, #20]
 800a8d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800a8d8:	b385      	cbz	r5, 800a93c <RadioGetLoRaTimeOnAirNumerator+0x92>
 800a8da:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a8dc:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800a8de:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800a8e0:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800a8e4:	b364      	cbz	r4, 800a940 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800a8e6:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800a8ea:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800a8ec:	2906      	cmp	r1, #6
 800a8ee:	d904      	bls.n	800a8fa <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800a8f0:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800a8f4:	b10e      	cbz	r6, 800a8fa <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800a8f6:	1e88      	subs	r0, r1, #2
 800a8f8:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800a8fa:	f1bc 0f00 	cmp.w	ip, #0
 800a8fe:	db22      	blt.n	800a946 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a900:	4484      	add	ip, r0
 800a902:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a906:	fb9c fcf0 	sdiv	ip, ip, r0
 800a90a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800a90e:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800a912:	2906      	cmp	r1, #6
 800a914:	d801      	bhi.n	800a91a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800a916:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a91a:	0080      	lsls	r0, r0, #2
 800a91c:	3001      	adds	r0, #1
 800a91e:	3902      	subs	r1, #2
}
 800a920:	4088      	lsls	r0, r1
 800a922:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800a924:	2b0b      	cmp	r3, #11
 800a926:	d8cb      	bhi.n	800a8c0 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800a928:	230c      	movs	r3, #12
 800a92a:	e7c9      	b.n	800a8c0 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a92c:	290c      	cmp	r1, #12
 800a92e:	d003      	beq.n	800a938 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800a930:	2600      	movs	r6, #0
 800a932:	e7cd      	b.n	800a8d0 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800a934:	2601      	movs	r6, #1
 800a936:	e7cb      	b.n	800a8d0 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800a938:	2601      	movs	r6, #1
 800a93a:	e7c9      	b.n	800a8d0 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800a93c:	2000      	movs	r0, #0
 800a93e:	e7cd      	b.n	800a8dc <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800a940:	f04f 0e14 	mov.w	lr, #20
 800a944:	e7d1      	b.n	800a8ea <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800a946:	f04f 0c00 	mov.w	ip, #0
 800a94a:	e7d9      	b.n	800a900 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800a94c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	b085      	sub	sp, #20
 800a950:	460e      	mov	r6, r1
 800a952:	4615      	mov	r5, r2
 800a954:	4619      	mov	r1, r3
 800a956:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800a95a:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800a95e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 800a962:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800a966:	b148      	cbz	r0, 800a97c <RadioTimeOnAir+0x30>
 800a968:	2801      	cmp	r0, #1
 800a96a:	d012      	beq.n	800a992 <RadioTimeOnAir+0x46>
 800a96c:	2501      	movs	r5, #1
 800a96e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800a970:	442c      	add	r4, r5
 800a972:	1e60      	subs	r0, r4, #1
}
 800a974:	fbb0 f0f5 	udiv	r0, r0, r5
 800a978:	b005      	add	sp, #20
 800a97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800a97c:	f8cd c004 	str.w	ip, [sp, #4]
 800a980:	9700      	str	r7, [sp, #0]
 800a982:	4628      	mov	r0, r5
 800a984:	f7ff ff7e 	bl	800a884 <RadioGetGfskTimeOnAirNumerator>
 800a988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a98c:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800a990:	e7ee      	b.n	800a970 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800a992:	f8cd c008 	str.w	ip, [sp, #8]
 800a996:	9701      	str	r7, [sp, #4]
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	4613      	mov	r3, r2
 800a99c:	460a      	mov	r2, r1
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff ff82 	bl	800a8aa <RadioGetLoRaTimeOnAirNumerator>
 800a9a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9aa:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800a9ae:	4b03      	ldr	r3, [pc, #12]	@ (800a9bc <RadioTimeOnAir+0x70>)
 800a9b0:	5d98      	ldrb	r0, [r3, r6]
 800a9b2:	f7ff ff39 	bl	800a828 <RadioGetLoRaBandwidthInHz>
 800a9b6:	4605      	mov	r5, r0
        break;
 800a9b8:	e7da      	b.n	800a970 <RadioTimeOnAir+0x24>
 800a9ba:	bf00      	nop
 800a9bc:	0800f1b0 	.word	0x0800f1b0

0800a9c0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800a9c0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800a9c2:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <RadioOnTxTimeoutProcess+0x18>)
 800a9c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a9c8:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a9ca:	4b04      	ldr	r3, [pc, #16]	@ (800a9dc <RadioOnTxTimeoutProcess+0x1c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	b113      	cbz	r3, 800a9d6 <RadioOnTxTimeoutProcess+0x16>
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	b103      	cbz	r3, 800a9d6 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800a9d4:	4798      	blx	r3
    }
}
 800a9d6:	bd08      	pop	{r3, pc}
 800a9d8:	48000400 	.word	0x48000400
 800a9dc:	20000554 	.word	0x20000554

0800a9e0 <RadioOnTxTimeoutIrq>:
{
 800a9e0:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800a9e2:	f7ff ffed 	bl	800a9c0 <RadioOnTxTimeoutProcess>
}
 800a9e6:	bd08      	pop	{r3, pc}

0800a9e8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a9e8:	b508      	push	{r3, lr}
 800a9ea:	4b05      	ldr	r3, [pc, #20]	@ (800aa00 <RadioOnRxTimeoutProcess+0x18>)
 800a9ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a9f0:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a9f2:	4b04      	ldr	r3, [pc, #16]	@ (800aa04 <RadioOnRxTimeoutProcess+0x1c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	b113      	cbz	r3, 800a9fe <RadioOnRxTimeoutProcess+0x16>
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	b103      	cbz	r3, 800a9fe <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800a9fc:	4798      	blx	r3
    }
}
 800a9fe:	bd08      	pop	{r3, pc}
 800aa00:	48000400 	.word	0x48000400
 800aa04:	20000554 	.word	0x20000554

0800aa08 <RadioOnRxTimeoutIrq>:
{
 800aa08:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800aa0a:	f7ff ffed 	bl	800a9e8 <RadioOnRxTimeoutProcess>
}
 800aa0e:	bd08      	pop	{r3, pc}

0800aa10 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800aa10:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 800aa12:	2300      	movs	r3, #0
 800aa14:	e005      	b.n	800aa22 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800aa16:	5ccc      	ldrb	r4, [r1, r3]
 800aa18:	43e4      	mvns	r4, r4
 800aa1a:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800aa1c:	2400      	movs	r4, #0
 800aa1e:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 800aa20:	3301      	adds	r3, #1
 800aa22:	429a      	cmp	r2, r3
 800aa24:	dcf7      	bgt.n	800aa16 <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800aa26:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800aa28:	461c      	mov	r4, r3
 800aa2a:	e012      	b.n	800aa52 <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800aa2c:	f103 0c07 	add.w	ip, r3, #7
 800aa30:	e023      	b.n	800aa7a <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800aa32:	b2ed      	uxtb	r5, r5
 800aa34:	5d4d      	ldrb	r5, [r1, r5]
 800aa36:	fa45 f50e 	asr.w	r5, r5, lr
 800aa3a:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800aa3e:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800aa40:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800aa44:	5d46      	ldrb	r6, [r0, r5]
 800aa46:	fa04 fc0c 	lsl.w	ip, r4, ip
 800aa4a:	ea46 0c0c 	orr.w	ip, r6, ip
 800aa4e:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 800aa52:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800aa56:	da26      	bge.n	800aaa6 <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 800aa58:	425d      	negs	r5, r3
 800aa5a:	f003 0c07 	and.w	ip, r3, #7
 800aa5e:	f005 0507 	and.w	r5, r5, #7
 800aa62:	bf58      	it	pl
 800aa64:	f1c5 0c00 	rsbpl	ip, r5, #0
 800aa68:	fa5f fe8c 	uxtb.w	lr, ip
 800aa6c:	f1ce 0e07 	rsb	lr, lr, #7
 800aa70:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800aa74:	469c      	mov	ip, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dbd8      	blt.n	800aa2c <payload_integration+0x1c>
 800aa7a:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800aa7e:	3301      	adds	r3, #1
 800aa80:	425e      	negs	r6, r3
 800aa82:	f003 0c07 	and.w	ip, r3, #7
 800aa86:	f006 0607 	and.w	r6, r6, #7
 800aa8a:	bf58      	it	pl
 800aa8c:	f1c6 0c00 	rsbpl	ip, r6, #0
 800aa90:	fa5f fc8c 	uxtb.w	ip, ip
 800aa94:	f1cc 0c07 	rsb	ip, ip, #7
 800aa98:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800aa9c:	461e      	mov	r6, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dac7      	bge.n	800aa32 <payload_integration+0x22>
 800aaa2:	1dde      	adds	r6, r3, #7
 800aaa4:	e7c5      	b.n	800aa32 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800aaa6:	01a3      	lsls	r3, r4, #6
 800aaa8:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800aaac:	b25b      	sxtb	r3, r3
 800aaae:	b91c      	cbnz	r4, 800aab8 <payload_integration+0xa8>
 800aab0:	2120      	movs	r1, #32
 800aab2:	430b      	orrs	r3, r1
 800aab4:	5483      	strb	r3, [r0, r2]
}
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800aab8:	2100      	movs	r1, #0
 800aaba:	e7fa      	b.n	800aab2 <payload_integration+0xa2>

0800aabc <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800aabc:	2001      	movs	r0, #1
 800aabe:	4770      	bx	lr

0800aac0 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800aac0:	2001      	movs	r0, #1
 800aac2:	4770      	bx	lr

0800aac4 <RadioSetMaxPayloadLength>:
{
 800aac4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800aac6:	2801      	cmp	r0, #1
 800aac8:	d004      	beq.n	800aad4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800aaca:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf4 <RadioSetMaxPayloadLength+0x30>)
 800aacc:	7d5b      	ldrb	r3, [r3, #21]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d008      	beq.n	800aae4 <RadioSetMaxPayloadLength+0x20>
}
 800aad2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800aad4:	4b08      	ldr	r3, [pc, #32]	@ (800aaf8 <RadioSetMaxPayloadLength+0x34>)
 800aad6:	7019      	strb	r1, [r3, #0]
 800aad8:	4806      	ldr	r0, [pc, #24]	@ (800aaf4 <RadioSetMaxPayloadLength+0x30>)
 800aada:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aadc:	300e      	adds	r0, #14
 800aade:	f001 fe3d 	bl	800c75c <SUBGRF_SetPacketParams>
 800aae2:	e7f6      	b.n	800aad2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800aae4:	4b04      	ldr	r3, [pc, #16]	@ (800aaf8 <RadioSetMaxPayloadLength+0x34>)
 800aae6:	7019      	strb	r1, [r3, #0]
 800aae8:	4802      	ldr	r0, [pc, #8]	@ (800aaf4 <RadioSetMaxPayloadLength+0x30>)
 800aaea:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aaec:	300e      	adds	r0, #14
 800aaee:	f001 fe35 	bl	800c75c <SUBGRF_SetPacketParams>
}
 800aaf2:	e7ee      	b.n	800aad2 <RadioSetMaxPayloadLength+0xe>
 800aaf4:	200004f8 	.word	0x200004f8
 800aaf8:	20000008 	.word	0x20000008

0800aafc <RadioRead>:
{
 800aafc:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800aafe:	f001 f9cb 	bl	800be98 <SUBGRF_ReadRegister>
}
 800ab02:	bd08      	pop	{r3, pc}

0800ab04 <RadioWrite>:
{
 800ab04:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800ab06:	f001 f9b7 	bl	800be78 <SUBGRF_WriteRegister>
}
 800ab0a:	bd08      	pop	{r3, pc}

0800ab0c <RadioTxCw>:
{
 800ab0c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800ab0e:	f001 ff4f 	bl	800c9b0 <SUBGRF_SetRfTxPower>
 800ab12:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ab14:	210e      	movs	r1, #14
 800ab16:	f640 101f 	movw	r0, #2335	@ 0x91f
 800ab1a:	f001 f9ad 	bl	800be78 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ab1e:	2101      	movs	r1, #1
 800ab20:	4620      	mov	r0, r4
 800ab22:	f001 ff31 	bl	800c988 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ab26:	f001 fb77 	bl	800c218 <SUBGRF_SetTxContinuousWave>
}
 800ab2a:	bd10      	pop	{r4, pc}

0800ab2c <RadioTxPrbs>:
{
 800ab2c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ab2e:	2101      	movs	r1, #1
 800ab30:	4b07      	ldr	r3, [pc, #28]	@ (800ab50 <RadioTxPrbs+0x24>)
 800ab32:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800ab36:	f001 ff27 	bl	800c988 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800ab3a:	212d      	movs	r1, #45	@ 0x2d
 800ab3c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800ab40:	f7ff ffe0 	bl	800ab04 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800ab44:	f001 fb6f 	bl	800c226 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800ab48:	4802      	ldr	r0, [pc, #8]	@ (800ab54 <RadioTxPrbs+0x28>)
 800ab4a:	f001 faa5 	bl	800c098 <SUBGRF_SetTx>
}
 800ab4e:	bd08      	pop	{r3, pc}
 800ab50:	200004f8 	.word	0x200004f8
 800ab54:	000fffff 	.word	0x000fffff

0800ab58 <RadioSetRxDutyCycle>:
{
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800ab5e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800ab62:	4e09      	ldr	r6, [pc, #36]	@ (800ab88 <RadioSetRxDutyCycle+0x30>)
 800ab64:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800ab66:	2300      	movs	r3, #0
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ab6e:	4608      	mov	r0, r1
 800ab70:	f001 fc25 	bl	800c3be <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ab74:	2100      	movs	r1, #0
 800ab76:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800ab7a:	f001 ff05 	bl	800c988 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4620      	mov	r0, r4
 800ab82:	f001 fb19 	bl	800c1b8 <SUBGRF_SetRxDutyCycle>
}
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	200004f8 	.word	0x200004f8

0800ab8c <RadioRxBoosted>:
{
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800ab90:	f001 ffec 	bl	800cb6c <RFW_Is_Init>
 800ab94:	2801      	cmp	r0, #1
 800ab96:	d019      	beq.n	800abcc <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ab98:	2300      	movs	r3, #0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f240 2162 	movw	r1, #610	@ 0x262
 800aba0:	4608      	mov	r0, r1
 800aba2:	f001 fc0c 	bl	800c3be <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800aba6:	b9a4      	cbnz	r4, 800abd2 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800aba8:	4c11      	ldr	r4, [pc, #68]	@ (800abf0 <RadioRxBoosted+0x64>)
 800abaa:	2100      	movs	r1, #0
 800abac:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800abae:	4b11      	ldr	r3, [pc, #68]	@ (800abf4 <RadioRxBoosted+0x68>)
 800abb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800abb4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800abb6:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800abba:	f001 fee5 	bl	800c988 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800abbe:	7863      	ldrb	r3, [r4, #1]
 800abc0:	b183      	cbz	r3, 800abe4 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800abc2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800abc6:	f001 fad9 	bl	800c17c <SUBGRF_SetRxBoosted>
}
 800abca:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800abcc:	f001 ffd6 	bl	800cb7c <RFW_ReceiveInit>
 800abd0:	e7e9      	b.n	800aba6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800abd2:	4d09      	ldr	r5, [pc, #36]	@ (800abf8 <RadioRxBoosted+0x6c>)
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f002 fbea 	bl	800d3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800abdc:	4628      	mov	r0, r5
 800abde:	f002 fba1 	bl	800d324 <UTIL_TIMER_Start>
 800abe2:	e7e1      	b.n	800aba8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800abe4:	4b02      	ldr	r3, [pc, #8]	@ (800abf0 <RadioRxBoosted+0x64>)
 800abe6:	6898      	ldr	r0, [r3, #8]
 800abe8:	0180      	lsls	r0, r0, #6
 800abea:	f001 fac7 	bl	800c17c <SUBGRF_SetRxBoosted>
}
 800abee:	e7ec      	b.n	800abca <RadioRxBoosted+0x3e>
 800abf0:	200004f8 	.word	0x200004f8
 800abf4:	48000400 	.word	0x48000400
 800abf8:	200004c8 	.word	0x200004c8

0800abfc <RadioStandby>:
{
 800abfc:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800abfe:	2000      	movs	r0, #0
 800ac00:	f001 fa30 	bl	800c064 <SUBGRF_SetStandby>
}
 800ac04:	bd08      	pop	{r3, pc}

0800ac06 <RadioGetStatus>:
{
 800ac06:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800ac08:	f001 f92a 	bl	800be60 <SUBGRF_GetOperatingMode>
 800ac0c:	2805      	cmp	r0, #5
 800ac0e:	d007      	beq.n	800ac20 <RadioGetStatus+0x1a>
 800ac10:	2807      	cmp	r0, #7
 800ac12:	d007      	beq.n	800ac24 <RadioGetStatus+0x1e>
 800ac14:	2804      	cmp	r0, #4
 800ac16:	d001      	beq.n	800ac1c <RadioGetStatus+0x16>
            return RF_IDLE;
 800ac18:	2000      	movs	r0, #0
}
 800ac1a:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800ac1c:	2002      	movs	r0, #2
 800ac1e:	e7fc      	b.n	800ac1a <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800ac20:	2001      	movs	r0, #1
 800ac22:	e7fa      	b.n	800ac1a <RadioGetStatus+0x14>
            return RF_CAD;
 800ac24:	2003      	movs	r0, #3
 800ac26:	e7f8      	b.n	800ac1a <RadioGetStatus+0x14>

0800ac28 <RadioIrqProcess>:
{
 800ac28:	b530      	push	{r4, r5, lr}
 800ac2a:	b083      	sub	sp, #12
    uint8_t size = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800ac32:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800ac34:	4ba5      	ldr	r3, [pc, #660]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ac36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	d829      	bhi.n	800ac92 <RadioIrqProcess+0x6a>
 800ac3e:	b21a      	sxth	r2, r3
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	f000 8140 	beq.w	800aec6 <RadioIrqProcess+0x29e>
 800ac46:	3b01      	subs	r3, #1
 800ac48:	2b1f      	cmp	r3, #31
 800ac4a:	f200 813c 	bhi.w	800aec6 <RadioIrqProcess+0x29e>
 800ac4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ac52:	0063      	.short	0x0063
 800ac54:	013a007f 	.word	0x013a007f
 800ac58:	013a00f7 	.word	0x013a00f7
 800ac5c:	013a013a 	.word	0x013a013a
 800ac60:	013a0127 	.word	0x013a0127
 800ac64:	013a013a 	.word	0x013a013a
 800ac68:	013a013a 	.word	0x013a013a
 800ac6c:	013a013a 	.word	0x013a013a
 800ac70:	013a0134 	.word	0x013a0134
 800ac74:	013a013a 	.word	0x013a013a
 800ac78:	013a013a 	.word	0x013a013a
 800ac7c:	013a013a 	.word	0x013a013a
 800ac80:	013a013a 	.word	0x013a013a
 800ac84:	013a013a 	.word	0x013a013a
 800ac88:	013a013a 	.word	0x013a013a
 800ac8c:	013a013a 	.word	0x013a013a
 800ac90:	0155      	.short	0x0155
 800ac92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac96:	f000 80b3 	beq.w	800ae00 <RadioIrqProcess+0x1d8>
 800ac9a:	d928      	bls.n	800acee <RadioIrqProcess+0xc6>
 800ac9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aca0:	f040 8111 	bne.w	800aec6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800aca4:	4b8a      	ldr	r3, [pc, #552]	@ (800aed0 <RadioIrqProcess+0x2a8>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	2100      	movs	r1, #0
 800acaa:	2002      	movs	r0, #2
 800acac:	f002 f844 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800acb0:	f001 f8d6 	bl	800be60 <SUBGRF_GetOperatingMode>
 800acb4:	2804      	cmp	r0, #4
 800acb6:	f000 80b0 	beq.w	800ae1a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800acba:	f001 f8d1 	bl	800be60 <SUBGRF_GetOperatingMode>
 800acbe:	2805      	cmp	r0, #5
 800acc0:	f040 8101 	bne.w	800aec6 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800acc4:	4b83      	ldr	r3, [pc, #524]	@ (800aed4 <RadioIrqProcess+0x2ac>)
 800acc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800acca:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 800accc:	4882      	ldr	r0, [pc, #520]	@ (800aed8 <RadioIrqProcess+0x2b0>)
 800acce:	f002 facf 	bl	800d270 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800acd2:	2000      	movs	r0, #0
 800acd4:	f001 f9c6 	bl	800c064 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800acd8:	4b80      	ldr	r3, [pc, #512]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80f2 	beq.w	800aec6 <RadioIrqProcess+0x29e>
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 80ee 	beq.w	800aec6 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800acea:	4798      	blx	r3
 800acec:	e0eb      	b.n	800aec6 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800acee:	2b40      	cmp	r3, #64	@ 0x40
 800acf0:	f000 811d 	beq.w	800af2e <RadioIrqProcess+0x306>
 800acf4:	2b80      	cmp	r3, #128	@ 0x80
 800acf6:	f040 80e6 	bne.w	800aec6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800acfa:	2000      	movs	r0, #0
 800acfc:	f001 f9b2 	bl	800c064 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ad00:	4b76      	ldr	r3, [pc, #472]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80de 	beq.w	800aec6 <RadioIrqProcess+0x29e>
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 80da 	beq.w	800aec6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800ad12:	2000      	movs	r0, #0
 800ad14:	4798      	blx	r3
 800ad16:	e0d6      	b.n	800aec6 <RadioIrqProcess+0x29e>
 800ad18:	4b6e      	ldr	r3, [pc, #440]	@ (800aed4 <RadioIrqProcess+0x2ac>)
 800ad1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ad1e:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 800ad20:	486f      	ldr	r0, [pc, #444]	@ (800aee0 <RadioIrqProcess+0x2b8>)
 800ad22:	f002 faa5 	bl	800d270 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800ad26:	2000      	movs	r0, #0
 800ad28:	f001 f99c 	bl	800c064 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800ad2c:	f001 ff20 	bl	800cb70 <RFW_Is_LongPacketModeEnabled>
 800ad30:	2801      	cmp	r0, #1
 800ad32:	d00a      	beq.n	800ad4a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ad34:	4b69      	ldr	r3, [pc, #420]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80c4 	beq.w	800aec6 <RadioIrqProcess+0x29e>
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 80c0 	beq.w	800aec6 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800ad46:	4798      	blx	r3
 800ad48:	e0bd      	b.n	800aec6 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800ad4a:	f001 ff1a 	bl	800cb82 <RFW_DeInit_TxLongPacket>
 800ad4e:	e7f1      	b.n	800ad34 <RadioIrqProcess+0x10c>
 800ad50:	4b60      	ldr	r3, [pc, #384]	@ (800aed4 <RadioIrqProcess+0x2ac>)
 800ad52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ad56:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 800ad58:	485f      	ldr	r0, [pc, #380]	@ (800aed8 <RadioIrqProcess+0x2b0>)
 800ad5a:	f002 fa89 	bl	800d270 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ad5e:	4b5b      	ldr	r3, [pc, #364]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	b303      	cbz	r3, 800ada6 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800ad64:	22ff      	movs	r2, #255	@ 0xff
 800ad66:	f10d 0107 	add.w	r1, sp, #7
 800ad6a:	485e      	ldr	r0, [pc, #376]	@ (800aee4 <RadioIrqProcess+0x2bc>)
 800ad6c:	f001 fdb6 	bl	800c8dc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800ad70:	485d      	ldr	r0, [pc, #372]	@ (800aee8 <RadioIrqProcess+0x2c0>)
 800ad72:	f001 fdcd 	bl	800c910 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ad76:	4b59      	ldr	r3, [pc, #356]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80a3 	beq.w	800aec6 <RadioIrqProcess+0x29e>
 800ad80:	689c      	ldr	r4, [r3, #8]
 800ad82:	2c00      	cmp	r4, #0
 800ad84:	f000 809f 	beq.w	800aec6 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800ad88:	4b50      	ldr	r3, [pc, #320]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ad8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d11d      	bne.n	800adce <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800ad92:	4a4e      	ldr	r2, [pc, #312]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ad94:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800ad98:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800ad9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ada0:	4850      	ldr	r0, [pc, #320]	@ (800aee4 <RadioIrqProcess+0x2bc>)
 800ada2:	47a0      	blx	r4
                break;
 800ada4:	e08f      	b.n	800aec6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ada6:	2000      	movs	r0, #0
 800ada8:	f001 f95c 	bl	800c064 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800adac:	2100      	movs	r1, #0
 800adae:	f640 1002 	movw	r0, #2306	@ 0x902
 800adb2:	f001 f861 	bl	800be78 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800adb6:	f640 1044 	movw	r0, #2372	@ 0x944
 800adba:	f001 f86d 	bl	800be98 <SUBGRF_ReadRegister>
 800adbe:	f040 0102 	orr.w	r1, r0, #2
 800adc2:	b2c9      	uxtb	r1, r1
 800adc4:	f640 1044 	movw	r0, #2372	@ 0x944
 800adc8:	f001 f856 	bl	800be78 <SUBGRF_WriteRegister>
 800adcc:	e7ca      	b.n	800ad64 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800adce:	4c3f      	ldr	r4, [pc, #252]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800add0:	4669      	mov	r1, sp
 800add2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800add4:	f001 fe7c 	bl	800cad0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800add8:	4b40      	ldr	r3, [pc, #256]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689d      	ldr	r5, [r3, #8]
 800adde:	9b00      	ldr	r3, [sp, #0]
 800ade0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ade4:	4a41      	ldr	r2, [pc, #260]	@ (800aeec <RadioIrqProcess+0x2c4>)
 800ade6:	fb82 1203 	smull	r1, r2, r2, r3
 800adea:	17db      	asrs	r3, r3, #31
 800adec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800adf6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800adfa:	483a      	ldr	r0, [pc, #232]	@ (800aee4 <RadioIrqProcess+0x2bc>)
 800adfc:	47a8      	blx	r5
                break;
 800adfe:	e062      	b.n	800aec6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800ae00:	2000      	movs	r0, #0
 800ae02:	f001 f92f 	bl	800c064 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ae06:	4b35      	ldr	r3, [pc, #212]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d05b      	beq.n	800aec6 <RadioIrqProcess+0x29e>
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d058      	beq.n	800aec6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800ae14:	2001      	movs	r0, #1
 800ae16:	4798      	blx	r3
 800ae18:	e055      	b.n	800aec6 <RadioIrqProcess+0x29e>
 800ae1a:	4b2e      	ldr	r3, [pc, #184]	@ (800aed4 <RadioIrqProcess+0x2ac>)
 800ae1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ae20:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 800ae22:	482f      	ldr	r0, [pc, #188]	@ (800aee0 <RadioIrqProcess+0x2b8>)
 800ae24:	f002 fa24 	bl	800d270 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f001 f91b 	bl	800c064 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ae2e:	4b2b      	ldr	r3, [pc, #172]	@ (800aedc <RadioIrqProcess+0x2b4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d047      	beq.n	800aec6 <RadioIrqProcess+0x29e>
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d044      	beq.n	800aec6 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800ae3c:	4798      	blx	r3
 800ae3e:	e042      	b.n	800aec6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ae40:	4b2b      	ldr	r3, [pc, #172]	@ (800aef0 <RadioIrqProcess+0x2c8>)
 800ae42:	2201      	movs	r2, #1
 800ae44:	2100      	movs	r1, #0
 800ae46:	2002      	movs	r0, #2
 800ae48:	f001 ff76 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ae4c:	4b1f      	ldr	r3, [pc, #124]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ae4e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800ae50:	b3c9      	cbz	r1, 800aec6 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800ae52:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ae56:	f640 1003 	movw	r0, #2307	@ 0x903
 800ae5a:	f7ff fe53 	bl	800ab04 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800ae5e:	4c1b      	ldr	r4, [pc, #108]	@ (800aecc <RadioIrqProcess+0x2a4>)
 800ae60:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ae64:	f640 1004 	movw	r0, #2308	@ 0x904
 800ae68:	f7ff fe4c 	bl	800ab04 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800ae6c:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 800ae70:	f640 1005 	movw	r0, #2309	@ 0x905
 800ae74:	f7ff fe46 	bl	800ab04 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800ae78:	f640 1002 	movw	r0, #2306	@ 0x902
 800ae7c:	f7ff fe3e 	bl	800aafc <RadioRead>
 800ae80:	f040 0101 	orr.w	r1, r0, #1
 800ae84:	b2c9      	uxtb	r1, r1
 800ae86:	f640 1002 	movw	r0, #2306	@ 0x902
 800ae8a:	f7ff fe3b 	bl	800ab04 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800ae8e:	2200      	movs	r2, #0
 800ae90:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ae92:	4613      	mov	r3, r2
 800ae94:	f240 2162 	movw	r1, #610	@ 0x262
 800ae98:	4608      	mov	r0, r1
 800ae9a:	f001 fa90 	bl	800c3be <SUBGRF_SetDioIrqParams>
 800ae9e:	e012      	b.n	800aec6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800aea0:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <RadioIrqProcess+0x2cc>)
 800aea2:	2201      	movs	r2, #1
 800aea4:	2100      	movs	r1, #0
 800aea6:	2002      	movs	r0, #2
 800aea8:	f001 ff46 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800aeac:	f001 fe5e 	bl	800cb6c <RFW_Is_Init>
 800aeb0:	2801      	cmp	r0, #1
 800aeb2:	d108      	bne.n	800aec6 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800aeb4:	f001 fe66 	bl	800cb84 <RFW_ReceivePayload>
 800aeb8:	e005      	b.n	800aec6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800aeba:	4b0f      	ldr	r3, [pc, #60]	@ (800aef8 <RadioIrqProcess+0x2d0>)
 800aebc:	2201      	movs	r2, #1
 800aebe:	2100      	movs	r1, #0
 800aec0:	2002      	movs	r0, #2
 800aec2:	f001 ff39 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
}
 800aec6:	b003      	add	sp, #12
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	200004f8 	.word	0x200004f8
 800aed0:	0800f144 	.word	0x0800f144
 800aed4:	48000400 	.word	0x48000400
 800aed8:	200004c8 	.word	0x200004c8
 800aedc:	20000554 	.word	0x20000554
 800aee0:	200004e0 	.word	0x200004e0
 800aee4:	20000558 	.word	0x20000558
 800aee8:	2000051c 	.word	0x2000051c
 800aeec:	10624dd3 	.word	0x10624dd3
 800aef0:	0800f158 	.word	0x0800f158
 800aef4:	0800f164 	.word	0x0800f164
 800aef8:	0800f170 	.word	0x0800f170
        TimerStop( &RxTimeoutTimer );
 800aefc:	4817      	ldr	r0, [pc, #92]	@ (800af5c <RadioIrqProcess+0x334>)
 800aefe:	f002 f9b7 	bl	800d270 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800af02:	4b17      	ldr	r3, [pc, #92]	@ (800af60 <RadioIrqProcess+0x338>)
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	b173      	cbz	r3, 800af26 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800af08:	4b16      	ldr	r3, [pc, #88]	@ (800af64 <RadioIrqProcess+0x33c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0da      	beq.n	800aec6 <RadioIrqProcess+0x29e>
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0d7      	beq.n	800aec6 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800af16:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800af18:	4b13      	ldr	r3, [pc, #76]	@ (800af68 <RadioIrqProcess+0x340>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	2100      	movs	r1, #0
 800af1e:	2002      	movs	r0, #2
 800af20:	f001 ff0a 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
 800af24:	e7cf      	b.n	800aec6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800af26:	2000      	movs	r0, #0
 800af28:	f001 f89c 	bl	800c064 <SUBGRF_SetStandby>
 800af2c:	e7ec      	b.n	800af08 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800af2e:	4b0f      	ldr	r3, [pc, #60]	@ (800af6c <RadioIrqProcess+0x344>)
 800af30:	2201      	movs	r2, #1
 800af32:	2100      	movs	r1, #0
 800af34:	2002      	movs	r0, #2
 800af36:	f001 feff 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800af3a:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <RadioIrqProcess+0x338>)
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	b143      	cbz	r3, 800af52 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800af40:	4b08      	ldr	r3, [pc, #32]	@ (800af64 <RadioIrqProcess+0x33c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0be      	beq.n	800aec6 <RadioIrqProcess+0x29e>
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0bb      	beq.n	800aec6 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800af4e:	4798      	blx	r3
}
 800af50:	e7b9      	b.n	800aec6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800af52:	2000      	movs	r0, #0
 800af54:	f001 f886 	bl	800c064 <SUBGRF_SetStandby>
 800af58:	e7f2      	b.n	800af40 <RadioIrqProcess+0x318>
 800af5a:	bf00      	nop
 800af5c:	200004c8 	.word	0x200004c8
 800af60:	200004f8 	.word	0x200004f8
 800af64:	20000554 	.word	0x20000554
 800af68:	0800f17c 	.word	0x0800f17c
 800af6c:	0800f188 	.word	0x0800f188

0800af70 <RadioOnDioIrq>:
{
 800af70:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800af72:	4b03      	ldr	r3, [pc, #12]	@ (800af80 <RadioOnDioIrq+0x10>)
 800af74:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800af78:	f7ff fe56 	bl	800ac28 <RadioIrqProcess>
}
 800af7c:	bd08      	pop	{r3, pc}
 800af7e:	bf00      	nop
 800af80:	200004f8 	.word	0x200004f8

0800af84 <RadioGetWakeupTime>:
{
 800af84:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800af86:	f001 fd2a 	bl	800c9de <SUBGRF_GetRadioWakeUpTime>
}
 800af8a:	3003      	adds	r0, #3
 800af8c:	bd08      	pop	{r3, pc}

0800af8e <RadioReadRegisters>:
{
 800af8e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800af90:	f001 f800 	bl	800bf94 <SUBGRF_ReadRegisters>
}
 800af94:	bd08      	pop	{r3, pc}

0800af96 <RadioWriteRegisters>:
{
 800af96:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800af98:	f000 ffba 	bl	800bf10 <SUBGRF_WriteRegisters>
}
 800af9c:	bd08      	pop	{r3, pc}

0800af9e <RadioRssi>:
{
 800af9e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800afa0:	f001 fc6c 	bl	800c87c <SUBGRF_GetRssiInst>
}
 800afa4:	bd08      	pop	{r3, pc}
	...

0800afa8 <RadioSetTxContinuousWave>:
{
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800afac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800afb0:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800afb4:	f001 fa76 	bl	800c4a4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800afb8:	4628      	mov	r0, r5
 800afba:	f001 fcf9 	bl	800c9b0 <SUBGRF_SetRfTxPower>
 800afbe:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800afc0:	210e      	movs	r1, #14
 800afc2:	f640 101f 	movw	r0, #2335	@ 0x91f
 800afc6:	f000 ff57 	bl	800be78 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800afca:	2101      	movs	r1, #1
 800afcc:	4628      	mov	r0, r5
 800afce:	f001 fcdb 	bl	800c988 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800afd2:	f001 f921 	bl	800c218 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800afd6:	4d04      	ldr	r5, [pc, #16]	@ (800afe8 <RadioSetTxContinuousWave+0x40>)
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f002 f9e8 	bl	800d3b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800afe0:	4628      	mov	r0, r5
 800afe2:	f002 f99f 	bl	800d324 <UTIL_TIMER_Start>
}
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	200004e0 	.word	0x200004e0

0800afec <RadioSetChannel>:
{
 800afec:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800afee:	f001 fa59 	bl	800c4a4 <SUBGRF_SetRfFrequency>
}
 800aff2:	bd08      	pop	{r3, pc}

0800aff4 <RadioStartCad>:
{
 800aff4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800aff6:	2100      	movs	r1, #0
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <RadioStartCad+0x24>)
 800affa:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800affe:	f001 fcc3 	bl	800c988 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800b002:	2300      	movs	r3, #0
 800b004:	461a      	mov	r2, r3
 800b006:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800b00a:	4608      	mov	r0, r1
 800b00c:	f001 f9d7 	bl	800c3be <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800b010:	f001 f8f6 	bl	800c200 <SUBGRF_SetCad>
}
 800b014:	bd08      	pop	{r3, pc}
 800b016:	bf00      	nop
 800b018:	200004f8 	.word	0x200004f8

0800b01c <RadioRx>:
{
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800b020:	f001 fda4 	bl	800cb6c <RFW_Is_Init>
 800b024:	2801      	cmp	r0, #1
 800b026:	d019      	beq.n	800b05c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800b028:	2300      	movs	r3, #0
 800b02a:	461a      	mov	r2, r3
 800b02c:	f240 2162 	movw	r1, #610	@ 0x262
 800b030:	4608      	mov	r0, r1
 800b032:	f001 f9c4 	bl	800c3be <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800b036:	b9a4      	cbnz	r4, 800b062 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800b038:	4c11      	ldr	r4, [pc, #68]	@ (800b080 <RadioRx+0x64>)
 800b03a:	2100      	movs	r1, #0
 800b03c:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b03e:	4b11      	ldr	r3, [pc, #68]	@ (800b084 <RadioRx+0x68>)
 800b040:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b044:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800b046:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800b04a:	f001 fc9d 	bl	800c988 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800b04e:	7863      	ldrb	r3, [r4, #1]
 800b050:	b183      	cbz	r3, 800b074 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b052:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800b056:	f001 f841 	bl	800c0dc <SUBGRF_SetRx>
}
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800b05c:	f001 fd8e 	bl	800cb7c <RFW_ReceiveInit>
 800b060:	e7e9      	b.n	800b036 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800b062:	4d09      	ldr	r5, [pc, #36]	@ (800b088 <RadioRx+0x6c>)
 800b064:	4621      	mov	r1, r4
 800b066:	4628      	mov	r0, r5
 800b068:	f002 f9a2 	bl	800d3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800b06c:	4628      	mov	r0, r5
 800b06e:	f002 f959 	bl	800d324 <UTIL_TIMER_Start>
 800b072:	e7e1      	b.n	800b038 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800b074:	4b02      	ldr	r3, [pc, #8]	@ (800b080 <RadioRx+0x64>)
 800b076:	6898      	ldr	r0, [r3, #8]
 800b078:	0180      	lsls	r0, r0, #6
 800b07a:	f001 f82f 	bl	800c0dc <SUBGRF_SetRx>
}
 800b07e:	e7ec      	b.n	800b05a <RadioRx+0x3e>
 800b080:	200004f8 	.word	0x200004f8
 800b084:	48000400 	.word	0x48000400
 800b088:	200004c8 	.word	0x200004c8

0800b08c <RadioSleep>:
{
 800b08c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800b08e:	f04f 0004 	mov.w	r0, #4
 800b092:	f000 ffc7 	bl	800c024 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800b096:	2002      	movs	r0, #2
 800b098:	f7f5 ffba 	bl	8001010 <HAL_Delay>
}
 800b09c:	bd08      	pop	{r3, pc}
	...

0800b0a0 <RadioSend>:
{
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f240 2101 	movw	r1, #513	@ 0x201
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	f001 f984 	bl	800c3be <SUBGRF_SetDioIrqParams>
 800b0b6:	4b5e      	ldr	r3, [pc, #376]	@ (800b230 <RadioSend+0x190>)
 800b0b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b0bc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800b0be:	4e5d      	ldr	r6, [pc, #372]	@ (800b234 <RadioSend+0x194>)
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800b0c6:	f001 fc5f 	bl	800c988 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800b0ca:	7833      	ldrb	r3, [r6, #0]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d103      	bne.n	800b0d8 <RadioSend+0x38>
 800b0d0:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 800b0d4:	2b06      	cmp	r3, #6
 800b0d6:	d013      	beq.n	800b100 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b0d8:	f640 0089 	movw	r0, #2185	@ 0x889
 800b0dc:	f000 fedc 	bl	800be98 <SUBGRF_ReadRegister>
 800b0e0:	f040 0104 	orr.w	r1, r0, #4
 800b0e4:	b2c9      	uxtb	r1, r1
 800b0e6:	f640 0089 	movw	r0, #2185	@ 0x889
 800b0ea:	f000 fec5 	bl	800be78 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800b0ee:	4b51      	ldr	r3, [pc, #324]	@ (800b234 <RadioSend+0x194>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d819      	bhi.n	800b12a <RadioSend+0x8a>
 800b0f6:	e8df f003 	tbb	[pc, r3]
 800b0fa:	0e24      	.short	0x0e24
 800b0fc:	5024      	.short	0x5024
 800b0fe:	5d          	.byte	0x5d
 800b0ff:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b100:	f640 0089 	movw	r0, #2185	@ 0x889
 800b104:	f000 fec8 	bl	800be98 <SUBGRF_ReadRegister>
 800b108:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b10c:	f640 0089 	movw	r0, #2185	@ 0x889
 800b110:	f000 feb2 	bl	800be78 <SUBGRF_WriteRegister>
 800b114:	e7eb      	b.n	800b0ee <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800b116:	4847      	ldr	r0, [pc, #284]	@ (800b234 <RadioSend+0x194>)
 800b118:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b11a:	300e      	adds	r0, #14
 800b11c:	f001 fb1e 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800b120:	2200      	movs	r2, #0
 800b122:	4621      	mov	r1, r4
 800b124:	4628      	mov	r0, r5
 800b126:	f000 ffd1 	bl	800c0cc <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800b12a:	4c43      	ldr	r4, [pc, #268]	@ (800b238 <RadioSend+0x198>)
 800b12c:	4b41      	ldr	r3, [pc, #260]	@ (800b234 <RadioSend+0x194>)
 800b12e:	6859      	ldr	r1, [r3, #4]
 800b130:	4620      	mov	r0, r4
 800b132:	f002 f93d 	bl	800d3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800b136:	4620      	mov	r0, r4
 800b138:	f002 f8f4 	bl	800d324 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800b13c:	2000      	movs	r0, #0
}
 800b13e:	b002      	add	sp, #8
 800b140:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800b142:	f001 fd13 	bl	800cb6c <RFW_Is_Init>
 800b146:	2801      	cmp	r0, #1
 800b148:	d00a      	beq.n	800b160 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800b14a:	483a      	ldr	r0, [pc, #232]	@ (800b234 <RadioSend+0x194>)
 800b14c:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b14e:	300e      	adds	r0, #14
 800b150:	f001 fb04 	bl	800c75c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800b154:	2200      	movs	r2, #0
 800b156:	4621      	mov	r1, r4
 800b158:	4628      	mov	r0, r5
 800b15a:	f000 ffb7 	bl	800c0cc <SUBGRF_SendPayload>
 800b15e:	e7e4      	b.n	800b12a <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800b160:	f10d 0207 	add.w	r2, sp, #7
 800b164:	4621      	mov	r1, r4
 800b166:	4628      	mov	r0, r5
 800b168:	f001 fd05 	bl	800cb76 <RFW_TransmitInit>
 800b16c:	b968      	cbnz	r0, 800b18a <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800b16e:	4831      	ldr	r0, [pc, #196]	@ (800b234 <RadioSend+0x194>)
 800b170:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b174:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b176:	300e      	adds	r0, #14
 800b178:	f001 faf0 	bl	800c75c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800b17c:	2200      	movs	r2, #0
 800b17e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b182:	4628      	mov	r0, r5
 800b184:	f000 ffa2 	bl	800c0cc <SUBGRF_SendPayload>
 800b188:	e7cf      	b.n	800b12a <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800b18a:	4b2c      	ldr	r3, [pc, #176]	@ (800b23c <RadioSend+0x19c>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	2100      	movs	r1, #0
 800b190:	2002      	movs	r0, #2
 800b192:	f001 fdd1 	bl	800cd38 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800b196:	2003      	movs	r0, #3
 800b198:	e7d1      	b.n	800b13e <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800b19a:	4826      	ldr	r0, [pc, #152]	@ (800b234 <RadioSend+0x194>)
 800b19c:	2302      	movs	r3, #2
 800b19e:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800b1a0:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b1a2:	300e      	adds	r0, #14
 800b1a4:	f001 fada 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f000 ff8d 	bl	800c0cc <SUBGRF_SendPayload>
            break;
 800b1b2:	e7ba      	b.n	800b12a <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4821      	ldr	r0, [pc, #132]	@ (800b240 <RadioSend+0x1a0>)
 800b1ba:	f7ff fc29 	bl	800aa10 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800b1be:	4e1d      	ldr	r6, [pc, #116]	@ (800b234 <RadioSend+0x194>)
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800b1c4:	1c65      	adds	r5, r4, #1
 800b1c6:	b2ed      	uxtb	r5, r5
 800b1c8:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b1ca:	f106 000e 	add.w	r0, r6, #14
 800b1ce:	f001 fac5 	bl	800c75c <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	20f1      	movs	r0, #241	@ 0xf1
 800b1d6:	f7ff fc95 	bl	800ab04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800b1da:	2100      	movs	r1, #0
 800b1dc:	20f0      	movs	r0, #240	@ 0xf0
 800b1de:	f7ff fc91 	bl	800ab04 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800b1e2:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800b1e4:	2b64      	cmp	r3, #100	@ 0x64
 800b1e6:	d019      	beq.n	800b21c <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800b1e8:	21e1      	movs	r1, #225	@ 0xe1
 800b1ea:	20f3      	movs	r0, #243	@ 0xf3
 800b1ec:	f7ff fc8a 	bl	800ab04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800b1f0:	2104      	movs	r1, #4
 800b1f2:	20f2      	movs	r0, #242	@ 0xf2
 800b1f4:	f7ff fc86 	bl	800ab04 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800b1f8:	00e1      	lsls	r1, r4, #3
 800b1fa:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800b1fc:	0a09      	lsrs	r1, r1, #8
 800b1fe:	20f4      	movs	r0, #244	@ 0xf4
 800b200:	f7ff fc80 	bl	800ab04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800b204:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 800b208:	20f5      	movs	r0, #245	@ 0xf5
 800b20a:	f7ff fc7b 	bl	800ab04 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800b20e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800b212:	4629      	mov	r1, r5
 800b214:	480a      	ldr	r0, [pc, #40]	@ (800b240 <RadioSend+0x1a0>)
 800b216:	f000 ff59 	bl	800c0cc <SUBGRF_SendPayload>
            break;
 800b21a:	e786      	b.n	800b12a <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800b21c:	2170      	movs	r1, #112	@ 0x70
 800b21e:	20f3      	movs	r0, #243	@ 0xf3
 800b220:	f7ff fc70 	bl	800ab04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800b224:	211d      	movs	r1, #29
 800b226:	20f2      	movs	r0, #242	@ 0xf2
 800b228:	f7ff fc6c 	bl	800ab04 <RadioWrite>
 800b22c:	e7e4      	b.n	800b1f8 <RadioSend+0x158>
 800b22e:	bf00      	nop
 800b230:	48000400 	.word	0x48000400
 800b234:	200004f8 	.word	0x200004f8
 800b238:	200004e0 	.word	0x200004e0
 800b23c:	0800f198 	.word	0x0800f198
 800b240:	20000558 	.word	0x20000558

0800b244 <RadioRandom>:
{
 800b244:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b246:	2300      	movs	r3, #0
 800b248:	461a      	mov	r2, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f8b6 	bl	800c3be <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800b252:	f000 ff5d 	bl	800c110 <SUBGRF_GetRandom>
}
 800b256:	bd08      	pop	{r3, pc}

0800b258 <RadioSetModem>:
{
 800b258:	b510      	push	{r4, lr}
 800b25a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800b25c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2d0 <RadioSetModem+0x78>)
 800b25e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800b260:	f001 fc91 	bl	800cb86 <RFW_SetRadioModem>
    switch( modem )
 800b264:	2c05      	cmp	r4, #5
 800b266:	d804      	bhi.n	800b272 <RadioSetModem+0x1a>
 800b268:	e8df f004 	tbb	[pc, r4]
 800b26c:	1d03110a 	.word	0x1d03110a
 800b270:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800b272:	2003      	movs	r0, #3
 800b274:	f001 f942 	bl	800c4fc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800b278:	4b15      	ldr	r3, [pc, #84]	@ (800b2d0 <RadioSetModem+0x78>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	735a      	strb	r2, [r3, #13]
}
 800b27e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b280:	2000      	movs	r0, #0
 800b282:	f001 f93b 	bl	800c4fc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800b286:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <RadioSetModem+0x78>)
 800b288:	2200      	movs	r2, #0
 800b28a:	735a      	strb	r2, [r3, #13]
        break;
 800b28c:	e7f7      	b.n	800b27e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800b28e:	2001      	movs	r0, #1
 800b290:	f001 f934 	bl	800c4fc <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800b294:	4b0e      	ldr	r3, [pc, #56]	@ (800b2d0 <RadioSetModem+0x78>)
 800b296:	7b5a      	ldrb	r2, [r3, #13]
 800b298:	7b18      	ldrb	r0, [r3, #12]
 800b29a:	4282      	cmp	r2, r0
 800b29c:	d0ef      	beq.n	800b27e <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800b29e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800b2a0:	f000 fae0 	bl	800b864 <RadioSetPublicNetwork>
 800b2a4:	e7eb      	b.n	800b27e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b2a6:	2002      	movs	r0, #2
 800b2a8:	f001 f928 	bl	800c4fc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800b2ac:	4b08      	ldr	r3, [pc, #32]	@ (800b2d0 <RadioSetModem+0x78>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	735a      	strb	r2, [r3, #13]
        break;
 800b2b2:	e7e4      	b.n	800b27e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b2b4:	2002      	movs	r0, #2
 800b2b6:	f001 f921 	bl	800c4fc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800b2ba:	4b05      	ldr	r3, [pc, #20]	@ (800b2d0 <RadioSetModem+0x78>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	735a      	strb	r2, [r3, #13]
        break;
 800b2c0:	e7dd      	b.n	800b27e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f001 f91a 	bl	800c4fc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800b2c8:	4b01      	ldr	r3, [pc, #4]	@ (800b2d0 <RadioSetModem+0x78>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	735a      	strb	r2, [r3, #13]
}
 800b2ce:	e7d6      	b.n	800b27e <RadioSetModem+0x26>
 800b2d0:	200004f8 	.word	0x200004f8

0800b2d4 <RadioSetTxGenericConfig>:
{
 800b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	4605      	mov	r5, r0
 800b2dc:	460c      	mov	r4, r1
 800b2de:	4617      	mov	r7, r2
 800b2e0:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	9104      	str	r1, [sp, #16]
 800b2e6:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b2e8:	f001 fc3f 	bl	800cb6a <RFW_DeInit>
    switch( modem )
 800b2ec:	2d03      	cmp	r5, #3
 800b2ee:	f200 8154 	bhi.w	800b59a <RadioSetTxGenericConfig+0x2c6>
 800b2f2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800b2f6:	0079      	.short	0x0079
 800b2f8:	013e00db 	.word	0x013e00db
 800b2fc:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 800b2fe:	7ca2      	ldrb	r2, [r4, #18]
 800b300:	2a08      	cmp	r2, #8
 800b302:	f200 8157 	bhi.w	800b5b4 <RadioSetTxGenericConfig+0x2e0>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800b306:	68a1      	ldr	r1, [r4, #8]
 800b308:	a804      	add	r0, sp, #16
 800b30a:	f001 fe2b 	bl	800cf64 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 8152 	beq.w	800b5ba <RadioSetTxGenericConfig+0x2e6>
        else if( config->msk.BitRate <= 10000 )
 800b316:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d823      	bhi.n	800b366 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800b31e:	4bad      	ldr	r3, [pc, #692]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b320:	2203      	movs	r2, #3
 800b322:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800b324:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800b328:	6822      	ldr	r2, [r4, #0]
 800b32a:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800b32c:	7ce2      	ldrb	r2, [r4, #19]
 800b32e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 800b332:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	00da      	lsls	r2, r3, #3
 800b338:	4ba6      	ldr	r3, [pc, #664]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b33a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b33c:	2204      	movs	r2, #4
 800b33e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800b340:	7ca2      	ldrb	r2, [r4, #18]
 800b342:	00d2      	lsls	r2, r2, #3
 800b344:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b346:	2200      	movs	r2, #0
 800b348:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b34a:	7da3      	ldrb	r3, [r4, #22]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d018      	beq.n	800b382 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b350:	7d23      	ldrb	r3, [r4, #20]
 800b352:	2b02      	cmp	r3, #2
 800b354:	d015      	beq.n	800b382 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800b356:	7d62      	ldrb	r2, [r4, #21]
 800b358:	4b9e      	ldr	r3, [pc, #632]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b35a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800b35c:	7da2      	ldrb	r2, [r4, #22]
 800b35e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800b360:	7d22      	ldrb	r2, [r4, #20]
 800b362:	755a      	strb	r2, [r3, #21]
 800b364:	e026      	b.n	800b3b4 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b366:	4b9b      	ldr	r3, [pc, #620]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b368:	2500      	movs	r5, #0
 800b36a:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b36c:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800b370:	6822      	ldr	r2, [r4, #0]
 800b372:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800b374:	7ce2      	ldrb	r2, [r4, #19]
 800b376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800b37a:	6822      	ldr	r2, [r4, #0]
 800b37c:	0892      	lsrs	r2, r2, #2
 800b37e:	641a      	str	r2, [r3, #64]	@ 0x40
 800b380:	e7d8      	b.n	800b334 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b382:	7d62      	ldrb	r2, [r4, #21]
 800b384:	f102 030f 	add.w	r3, r2, #15
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d901      	bls.n	800b392 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b38e:	2a01      	cmp	r2, #1
 800b390:	d127      	bne.n	800b3e2 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 800b392:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 800b394:	2301      	movs	r3, #1
 800b396:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b39a:	4a8f      	ldr	r2, [pc, #572]	@ (800b5d8 <RadioSetTxGenericConfig+0x304>)
 800b39c:	4b8f      	ldr	r3, [pc, #572]	@ (800b5dc <RadioSetTxGenericConfig+0x308>)
 800b39e:	6819      	ldr	r1, [r3, #0]
 800b3a0:	a801      	add	r0, sp, #4
 800b3a2:	f001 fbdf 	bl	800cb64 <RFW_Init>
 800b3a6:	b9e0      	cbnz	r0, 800b3e2 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b3a8:	4b8a      	ldr	r3, [pc, #552]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b3b2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b3b4:	f7ff fc22 	bl	800abfc <RadioStandby>
        RadioSetModem( radio_modem );
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f7ff ff4d 	bl	800b258 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b3be:	4d88      	ldr	r5, [pc, #544]	@ (800b5e0 <RadioSetTxGenericConfig+0x30c>)
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f001 f943 	bl	800c64c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b3c6:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b3ca:	f001 f9c7 	bl	800c75c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b3ce:	a804      	add	r0, sp, #16
 800b3d0:	f000 fdae 	bl	800bf30 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800b3d4:	8a20      	ldrh	r0, [r4, #16]
 800b3d6:	f000 fd82 	bl	800bede <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800b3da:	89a0      	ldrh	r0, [r4, #12]
 800b3dc:	f000 fdc5 	bl	800bf6a <SUBGRF_SetCrcPolynomial>
        break;
 800b3e0:	e0db      	b.n	800b59a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	e0e2      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
        if( config->fsk.BitRate == 0 )
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80e8 	beq.w	800b5c0 <RadioSetTxGenericConfig+0x2ec>
        if( config->fsk.SyncWordLength > 8 )
 800b3f0:	7ca2      	ldrb	r2, [r4, #18]
 800b3f2:	2a08      	cmp	r2, #8
 800b3f4:	f200 80e7 	bhi.w	800b5c6 <RadioSetTxGenericConfig+0x2f2>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800b3f8:	68a1      	ldr	r1, [r4, #8]
 800b3fa:	a804      	add	r0, sp, #16
 800b3fc:	f001 fdb2 	bl	800cf64 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b400:	4b74      	ldr	r3, [pc, #464]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b408:	6821      	ldr	r1, [r4, #0]
 800b40a:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b40c:	7ce1      	ldrb	r1, [r4, #19]
 800b40e:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800b412:	69a1      	ldr	r1, [r4, #24]
 800b414:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b416:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	00c9      	lsls	r1, r1, #3
 800b41c:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b41e:	2104      	movs	r1, #4
 800b420:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b422:	7ca1      	ldrb	r1, [r4, #18]
 800b424:	00c9      	lsls	r1, r1, #3
 800b426:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b428:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b42a:	7da3      	ldrb	r3, [r4, #22]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d00a      	beq.n	800b446 <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b430:	7d23      	ldrb	r3, [r4, #20]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d007      	beq.n	800b446 <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b436:	7d62      	ldrb	r2, [r4, #21]
 800b438:	4b66      	ldr	r3, [pc, #408]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b43a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b43c:	7da2      	ldrb	r2, [r4, #22]
 800b43e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800b440:	7d22      	ldrb	r2, [r4, #20]
 800b442:	755a      	strb	r2, [r3, #21]
 800b444:	e018      	b.n	800b478 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b446:	7d62      	ldrb	r2, [r4, #21]
 800b448:	f102 030f 	add.w	r3, r2, #15
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d901      	bls.n	800b456 <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b452:	2a01      	cmp	r2, #1
 800b454:	d127      	bne.n	800b4a6 <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 800b456:	2301      	movs	r3, #1
 800b458:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800b45c:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b45e:	4a5e      	ldr	r2, [pc, #376]	@ (800b5d8 <RadioSetTxGenericConfig+0x304>)
 800b460:	4b5e      	ldr	r3, [pc, #376]	@ (800b5dc <RadioSetTxGenericConfig+0x308>)
 800b462:	6819      	ldr	r1, [r3, #0]
 800b464:	a801      	add	r0, sp, #4
 800b466:	f001 fb7d 	bl	800cb64 <RFW_Init>
 800b46a:	b9e0      	cbnz	r0, 800b4a6 <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b46c:	4b59      	ldr	r3, [pc, #356]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b46e:	2200      	movs	r2, #0
 800b470:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b472:	2101      	movs	r1, #1
 800b474:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b476:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b478:	f7ff fbc0 	bl	800abfc <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b47c:	2000      	movs	r0, #0
 800b47e:	f7ff feeb 	bl	800b258 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b482:	4d57      	ldr	r5, [pc, #348]	@ (800b5e0 <RadioSetTxGenericConfig+0x30c>)
 800b484:	4628      	mov	r0, r5
 800b486:	f001 f8e1 	bl	800c64c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b48a:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b48e:	f001 f965 	bl	800c75c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b492:	a804      	add	r0, sp, #16
 800b494:	f000 fd4c 	bl	800bf30 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b498:	8a20      	ldrh	r0, [r4, #16]
 800b49a:	f000 fd20 	bl	800bede <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b49e:	89a0      	ldrh	r0, [r4, #12]
 800b4a0:	f000 fd63 	bl	800bf6a <SUBGRF_SetCrcPolynomial>
        break;
 800b4a4:	e079      	b.n	800b59a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 800b4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4aa:	e080      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b4ac:	4b49      	ldr	r3, [pc, #292]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b4b4:	7822      	ldrb	r2, [r4, #0]
 800b4b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b4ba:	7862      	ldrb	r2, [r4, #1]
 800b4bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b4c0:	78a2      	ldrb	r2, [r4, #2]
 800b4c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800b4c6:	78e3      	ldrb	r3, [r4, #3]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d033      	beq.n	800b534 <RadioSetTxGenericConfig+0x260>
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d036      	beq.n	800b53e <RadioSetTxGenericConfig+0x26a>
 800b4d0:	b35b      	cbz	r3, 800b52a <RadioSetTxGenericConfig+0x256>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b4d2:	4d40      	ldr	r5, [pc, #256]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b4d4:	f04f 0801 	mov.w	r8, #1
 800b4d8:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b4dc:	88a3      	ldrh	r3, [r4, #4]
 800b4de:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b4e0:	79a3      	ldrb	r3, [r4, #6]
 800b4e2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b4e4:	79e3      	ldrb	r3, [r4, #7]
 800b4e6:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b4ea:	7a23      	ldrb	r3, [r4, #8]
 800b4ec:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800b4f0:	f7ff fb84 	bl	800abfc <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	f7ff feaf 	bl	800b258 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b4fa:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800b4fe:	f001 f8a5 	bl	800c64c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b502:	f105 000e 	add.w	r0, r5, #14
 800b506:	f001 f929 	bl	800c75c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b50a:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800b50e:	2b06      	cmp	r3, #6
 800b510:	d024      	beq.n	800b55c <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b512:	f640 0089 	movw	r0, #2185	@ 0x889
 800b516:	f000 fcbf 	bl	800be98 <SUBGRF_ReadRegister>
 800b51a:	f040 0104 	orr.w	r1, r0, #4
 800b51e:	b2c9      	uxtb	r1, r1
 800b520:	f640 0089 	movw	r0, #2185	@ 0x889
 800b524:	f000 fca8 	bl	800be78 <SUBGRF_WriteRegister>
 800b528:	e037      	b.n	800b59a <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b52a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b532:	e7ce      	b.n	800b4d2 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b534:	4b27      	ldr	r3, [pc, #156]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b53c:	e7c9      	b.n	800b4d2 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b53e:	7823      	ldrb	r3, [r4, #0]
 800b540:	3b0b      	subs	r3, #11
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b01      	cmp	r3, #1
 800b546:	d904      	bls.n	800b552 <RadioSetTxGenericConfig+0x27e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b548:	4b22      	ldr	r3, [pc, #136]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b550:	e7bf      	b.n	800b4d2 <RadioSetTxGenericConfig+0x1fe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b552:	4b20      	ldr	r3, [pc, #128]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b554:	2201      	movs	r2, #1
 800b556:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b55a:	e7ba      	b.n	800b4d2 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b55c:	f640 0089 	movw	r0, #2185	@ 0x889
 800b560:	f000 fc9a 	bl	800be98 <SUBGRF_ReadRegister>
 800b564:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b568:	f640 0089 	movw	r0, #2185	@ 0x889
 800b56c:	f000 fc84 	bl	800be78 <SUBGRF_WriteRegister>
 800b570:	e013      	b.n	800b59a <RadioSetTxGenericConfig+0x2c6>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	3b01      	subs	r3, #1
 800b576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b57a:	d227      	bcs.n	800b5cc <RadioSetTxGenericConfig+0x2f8>
        RadioSetModem( MODEM_BPSK );
 800b57c:	2003      	movs	r0, #3
 800b57e:	f7ff fe6b 	bl	800b258 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b582:	4814      	ldr	r0, [pc, #80]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b584:	2302      	movs	r3, #2
 800b586:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b58e:	2316      	movs	r3, #22
 800b590:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b594:	3038      	adds	r0, #56	@ 0x38
 800b596:	f001 f859 	bl	800c64c <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b59a:	4638      	mov	r0, r7
 800b59c:	f001 fa08 	bl	800c9b0 <SUBGRF_SetRfTxPower>
 800b5a0:	4c0c      	ldr	r4, [pc, #48]	@ (800b5d4 <RadioSetTxGenericConfig+0x300>)
 800b5a2:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b5a6:	f001 fae5 	bl	800cb74 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b5aa:	6066      	str	r6, [r4, #4]
    return 0;
 800b5ac:	2000      	movs	r0, #0
}
 800b5ae:	b006      	add	sp, #24
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e7f9      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	e7f6      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c4:	e7f3      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ca:	e7f0      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e7ed      	b.n	800b5ae <RadioSetTxGenericConfig+0x2da>
 800b5d2:	bf00      	nop
 800b5d4:	200004f8 	.word	0x200004f8
 800b5d8:	200004e0 	.word	0x200004e0
 800b5dc:	20000554 	.word	0x20000554
 800b5e0:	20000530 	.word	0x20000530

0800b5e4 <RadioSetRxGenericConfig>:
{
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	b086      	sub	sp, #24
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	4615      	mov	r5, r2
 800b5f0:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9304      	str	r3, [sp, #16]
 800b5f6:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b5f8:	f001 fab7 	bl	800cb6a <RFW_DeInit>
    if( rxContinuous != 0 )
 800b5fc:	b105      	cbz	r5, 800b600 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800b5fe:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800b600:	3d00      	subs	r5, #0
 800b602:	bf18      	it	ne
 800b604:	2501      	movne	r5, #1
 800b606:	4b93      	ldr	r3, [pc, #588]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b608:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800b60a:	b136      	cbz	r6, 800b61a <RadioSetRxGenericConfig+0x36>
 800b60c:	2e01      	cmp	r6, #1
 800b60e:	f000 808f 	beq.w	800b730 <RadioSetRxGenericConfig+0x14c>
 800b612:	2000      	movs	r0, #0
}
 800b614:	b006      	add	sp, #24
 800b616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 810d 	beq.w	800b83c <RadioSetRxGenericConfig+0x258>
 800b622:	68e3      	ldr	r3, [r4, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 810c 	beq.w	800b842 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800b62a:	7fa2      	ldrb	r2, [r4, #30]
 800b62c:	2a08      	cmp	r2, #8
 800b62e:	f200 810b 	bhi.w	800b848 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800b632:	6921      	ldr	r1, [r4, #16]
 800b634:	a804      	add	r0, sp, #16
 800b636:	f001 fc95 	bl	800cf64 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b63a:	6820      	ldr	r0, [r4, #0]
 800b63c:	3800      	subs	r0, #0
 800b63e:	bf18      	it	ne
 800b640:	2001      	movne	r0, #1
 800b642:	f000 fdf7 	bl	800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b646:	4d83      	ldr	r5, [pc, #524]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b648:	2600      	movs	r6, #0
 800b64a:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b652:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b656:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800b65a:	6860      	ldr	r0, [r4, #4]
 800b65c:	f001 fa20 	bl	800caa0 <SUBGRF_GetFskBandwidthRegValue>
 800b660:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b664:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800b66c:	7fe3      	ldrb	r3, [r4, #31]
 800b66e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b670:	7fa3      	ldrb	r3, [r4, #30]
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800b676:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800b67a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800b67c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800b680:	b973      	cbnz	r3, 800b6a0 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800b682:	6961      	ldr	r1, [r4, #20]
 800b684:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b686:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800b68a:	2a02      	cmp	r2, #2
 800b68c:	d012      	beq.n	800b6b4 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d010      	beq.n	800b6b4 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b692:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 800b696:	496f      	ldr	r1, [pc, #444]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b698:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b69a:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800b69c:	754b      	strb	r3, [r1, #21]
 800b69e:	e023      	b.n	800b6e8 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d003      	beq.n	800b6ac <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b6a4:	4a6b      	ldr	r2, [pc, #428]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b6a6:	21ff      	movs	r1, #255	@ 0xff
 800b6a8:	7591      	strb	r1, [r2, #22]
 800b6aa:	e7ec      	b.n	800b686 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b6ac:	4a69      	ldr	r2, [pc, #420]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b6ae:	21ff      	movs	r1, #255	@ 0xff
 800b6b0:	7591      	strb	r1, [r2, #22]
 800b6b2:	e7e8      	b.n	800b686 <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b6b4:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800b6b8:	f102 030f 	add.w	r3, r2, #15
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d901      	bls.n	800b6c6 <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b6c2:	2a01      	cmp	r2, #1
 800b6c4:	d131      	bne.n	800b72a <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 800b6cc:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800b6ce:	4a62      	ldr	r2, [pc, #392]	@ (800b858 <RadioSetRxGenericConfig+0x274>)
 800b6d0:	4b62      	ldr	r3, [pc, #392]	@ (800b85c <RadioSetRxGenericConfig+0x278>)
 800b6d2:	6819      	ldr	r1, [r3, #0]
 800b6d4:	a801      	add	r0, sp, #4
 800b6d6:	f001 fa45 	bl	800cb64 <RFW_Init>
 800b6da:	bb30      	cbnz	r0, 800b72a <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b6dc:	4b5d      	ldr	r3, [pc, #372]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b6e6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b6e8:	f7ff fa88 	bl	800abfc <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f7ff fdb3 	bl	800b258 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b6f2:	4d5b      	ldr	r5, [pc, #364]	@ (800b860 <RadioSetRxGenericConfig+0x27c>)
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 ffa9 	bl	800c64c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b6fa:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b6fe:	f001 f82d 	bl	800c75c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b702:	a804      	add	r0, sp, #16
 800b704:	f000 fc14 	bl	800bf30 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b708:	8ba0      	ldrh	r0, [r4, #28]
 800b70a:	f000 fbe8 	bl	800bede <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b70e:	8b20      	ldrh	r0, [r4, #24]
 800b710:	f000 fc2b 	bl	800bf6a <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800b714:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b718:	fb07 f303 	mul.w	r3, r7, r3
 800b71c:	68a2      	ldr	r2, [r4, #8]
 800b71e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b722:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800b726:	2000      	movs	r0, #0
        break;
 800b728:	e774      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
                return -1;
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295
 800b72e:	e771      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 800b730:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 808b 	beq.w	800b84e <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800b738:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d055      	beq.n	800b7ec <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 800b740:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b744:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b746:	3800      	subs	r0, #0
 800b748:	bf18      	it	ne
 800b74a:	2001      	movne	r0, #1
 800b74c:	f000 fd72 	bl	800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b750:	b2f8      	uxtb	r0, r7
 800b752:	f000 fd7c 	bl	800c24e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b756:	4b3f      	ldr	r3, [pc, #252]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b75e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800b762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b766:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800b76a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b76e:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 800b772:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800b776:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d03e      	beq.n	800b7fc <RadioSetRxGenericConfig+0x218>
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d041      	beq.n	800b806 <RadioSetRxGenericConfig+0x222>
 800b782:	b3b3      	cbz	r3, 800b7f2 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b784:	4d33      	ldr	r5, [pc, #204]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b786:	2601      	movs	r6, #1
 800b788:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b78a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800b78c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b78e:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 800b792:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b794:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b798:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800b79c:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b7a0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800b7a4:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800b7a8:	f7ff fa28 	bl	800abfc <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff fd53 	bl	800b258 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b7b2:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800b7b6:	f000 ff49 	bl	800c64c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b7ba:	f105 000e 	add.w	r0, r5, #14
 800b7be:	f000 ffcd 	bl	800c75c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b7c2:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b7c6:	42b3      	cmp	r3, r6
 800b7c8:	d02d      	beq.n	800b826 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800b7ca:	f240 7036 	movw	r0, #1846	@ 0x736
 800b7ce:	f000 fb63 	bl	800be98 <SUBGRF_ReadRegister>
 800b7d2:	f040 0104 	orr.w	r1, r0, #4
 800b7d6:	b2c9      	uxtb	r1, r1
 800b7d8:	f240 7036 	movw	r0, #1846	@ 0x736
 800b7dc:	f000 fb4c 	bl	800be78 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800b7e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b7e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7e6:	609a      	str	r2, [r3, #8]
    return status;
 800b7e8:	2000      	movs	r0, #0
        break;
 800b7ea:	e713      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800b7ec:	f894 8014 	ldrb.w	r8, [r4, #20]
 800b7f0:	e7a8      	b.n	800b744 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b7f2:	4b18      	ldr	r3, [pc, #96]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b7fa:	e7c3      	b.n	800b784 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b7fc:	4b15      	ldr	r3, [pc, #84]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b804:	e7be      	b.n	800b784 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b806:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b80a:	3b0b      	subs	r3, #11
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d904      	bls.n	800b81c <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b812:	4b10      	ldr	r3, [pc, #64]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b81a:	e7b3      	b.n	800b784 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b81c:	4b0d      	ldr	r3, [pc, #52]	@ (800b854 <RadioSetRxGenericConfig+0x270>)
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b824:	e7ae      	b.n	800b784 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800b826:	f240 7036 	movw	r0, #1846	@ 0x736
 800b82a:	f000 fb35 	bl	800be98 <SUBGRF_ReadRegister>
 800b82e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b832:	f240 7036 	movw	r0, #1846	@ 0x736
 800b836:	f000 fb1f 	bl	800be78 <SUBGRF_WriteRegister>
 800b83a:	e7d1      	b.n	800b7e0 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	e6e8      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
 800b842:	f04f 30ff 	mov.w	r0, #4294967295
 800b846:	e6e5      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
            return -1;
 800b848:	f04f 30ff 	mov.w	r0, #4294967295
 800b84c:	e6e2      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
            return -1;
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	e6df      	b.n	800b614 <RadioSetRxGenericConfig+0x30>
 800b854:	200004f8 	.word	0x200004f8
 800b858:	200004c8 	.word	0x200004c8
 800b85c:	20000554 	.word	0x20000554
 800b860:	20000530 	.word	0x20000530

0800b864 <RadioSetPublicNetwork>:
{
 800b864:	b510      	push	{r4, lr}
 800b866:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800b868:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a4 <RadioSetPublicNetwork+0x40>)
 800b86a:	7318      	strb	r0, [r3, #12]
 800b86c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800b86e:	2001      	movs	r0, #1
 800b870:	f7ff fcf2 	bl	800b258 <RadioSetModem>
    if( enable == true )
 800b874:	b154      	cbz	r4, 800b88c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800b876:	2134      	movs	r1, #52	@ 0x34
 800b878:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800b87c:	f000 fafc 	bl	800be78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800b880:	2144      	movs	r1, #68	@ 0x44
 800b882:	f240 7041 	movw	r0, #1857	@ 0x741
 800b886:	f000 faf7 	bl	800be78 <SUBGRF_WriteRegister>
}
 800b88a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800b88c:	2114      	movs	r1, #20
 800b88e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800b892:	f000 faf1 	bl	800be78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800b896:	2124      	movs	r1, #36	@ 0x24
 800b898:	f240 7041 	movw	r0, #1857	@ 0x741
 800b89c:	f000 faec 	bl	800be78 <SUBGRF_WriteRegister>
}
 800b8a0:	e7f3      	b.n	800b88a <RadioSetPublicNetwork+0x26>
 800b8a2:	bf00      	nop
 800b8a4:	200004f8 	.word	0x200004f8

0800b8a8 <RadioSetTxConfig>:
{
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	4691      	mov	r9, r2
 800b8b4:	461f      	mov	r7, r3
 800b8b6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 800b8ba:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 800b8be:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 800b8c2:	f001 f952 	bl	800cb6a <RFW_DeInit>
    switch( modem )
 800b8c6:	2c01      	cmp	r4, #1
 800b8c8:	d05d      	beq.n	800b986 <RadioSetTxConfig+0xde>
 800b8ca:	2c04      	cmp	r4, #4
 800b8cc:	f000 80aa 	beq.w	800ba24 <RadioSetTxConfig+0x17c>
 800b8d0:	b19c      	cbz	r4, 800b8fa <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f001 f86c 	bl	800c9b0 <SUBGRF_SetRfTxPower>
 800b8d8:	4c5a      	ldr	r4, [pc, #360]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b8da:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800b8de:	210e      	movs	r1, #14
 800b8e0:	f640 101f 	movw	r0, #2335	@ 0x91f
 800b8e4:	f000 fac8 	bl	800be78 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b8e8:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800b8ec:	f001 f942 	bl	800cb74 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b8f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8f2:	6063      	str	r3, [r4, #4]
}
 800b8f4:	b003      	add	sp, #12
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b8fa:	4c52      	ldr	r4, [pc, #328]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b8fc:	f04f 0b00 	mov.w	fp, #0
 800b900:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b906:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800b908:	230b      	movs	r3, #11
 800b90a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b90e:	4638      	mov	r0, r7
 800b910:	f001 f8c6 	bl	800caa0 <SUBGRF_GetFskBandwidthRegValue>
 800b914:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800b918:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b91c:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800b920:	00f6      	lsls	r6, r6, #3
 800b922:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800b924:	2304      	movs	r3, #4
 800b926:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800b928:	2318      	movs	r3, #24
 800b92a:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800b92c:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800b930:	f088 0801 	eor.w	r8, r8, #1
 800b934:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d01f      	beq.n	800b97e <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800b93e:	22f2      	movs	r2, #242	@ 0xf2
 800b940:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800b942:	4c40      	ldr	r4, [pc, #256]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b944:	2301      	movs	r3, #1
 800b946:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800b948:	f7ff f958 	bl	800abfc <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800b94c:	2000      	movs	r0, #0
 800b94e:	f7ff fc83 	bl	800b258 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b952:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b956:	f000 fe79 	bl	800c64c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b95a:	f104 000e 	add.w	r0, r4, #14
 800b95e:	f000 fefd 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800b962:	4a39      	ldr	r2, [pc, #228]	@ (800ba48 <RadioSetTxConfig+0x1a0>)
 800b964:	466b      	mov	r3, sp
 800b966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b96a:	e883 0003 	stmia.w	r3, {r0, r1}
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fade 	bl	800bf30 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800b974:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800b978:	f000 fab1 	bl	800bede <SUBGRF_SetWhiteningSeed>
            break;
 800b97c:	e7a9      	b.n	800b8d2 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800b97e:	4b31      	ldr	r3, [pc, #196]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b980:	2201      	movs	r2, #1
 800b982:	75da      	strb	r2, [r3, #23]
 800b984:	e7dd      	b.n	800b942 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b986:	4a2f      	ldr	r2, [pc, #188]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b988:	2301      	movs	r3, #1
 800b98a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800b98e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800b996:	492d      	ldr	r1, [pc, #180]	@ (800ba4c <RadioSetTxConfig+0x1a4>)
 800b998:	5dc9      	ldrb	r1, [r1, r7]
 800b99a:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800b99e:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800b9a2:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b9a6:	b91f      	cbnz	r7, 800b9b0 <RadioSetTxConfig+0x108>
 800b9a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b9aa:	3a0b      	subs	r2, #11
 800b9ac:	2a01      	cmp	r2, #1
 800b9ae:	d92b      	bls.n	800ba08 <RadioSetTxConfig+0x160>
 800b9b0:	2f01      	cmp	r7, #1
 800b9b2:	d026      	beq.n	800ba02 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800b9b4:	4a23      	ldr	r2, [pc, #140]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b9bc:	4a21      	ldr	r2, [pc, #132]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b9be:	2101      	movs	r1, #1
 800b9c0:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800b9c2:	3b05      	subs	r3, #5
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	428b      	cmp	r3, r1
 800b9c8:	d923      	bls.n	800ba12 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800b9ca:	4b1e      	ldr	r3, [pc, #120]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b9cc:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800b9ce:	4c1d      	ldr	r4, [pc, #116]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800b9d0:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800ba50 <RadioSetTxConfig+0x1a8>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800b9da:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800b9de:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800b9e2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800b9e6:	f7ff f909 	bl	800abfc <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800b9ea:	2001      	movs	r0, #1
 800b9ec:	f7ff fc34 	bl	800b258 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b9f0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b9f4:	f000 fe2a 	bl	800c64c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b9f8:	f104 000e 	add.w	r0, r4, #14
 800b9fc:	f000 feae 	bl	800c75c <SUBGRF_SetPacketParams>
            break;
 800ba00:	e767      	b.n	800b8d2 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ba02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba04:	2a0c      	cmp	r2, #12
 800ba06:	d1d5      	bne.n	800b9b4 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800ba08:	4a0e      	ldr	r2, [pc, #56]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800ba10:	e7d4      	b.n	800b9bc <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 800ba12:	2e0b      	cmp	r6, #11
 800ba14:	d803      	bhi.n	800ba1e <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800ba16:	4613      	mov	r3, r2
 800ba18:	220c      	movs	r2, #12
 800ba1a:	839a      	strh	r2, [r3, #28]
 800ba1c:	e7d7      	b.n	800b9ce <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ba1e:	4b09      	ldr	r3, [pc, #36]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800ba20:	839e      	strh	r6, [r3, #28]
 800ba22:	e7d4      	b.n	800b9ce <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 800ba24:	2004      	movs	r0, #4
 800ba26:	f7ff fc17 	bl	800b258 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ba2a:	4806      	ldr	r0, [pc, #24]	@ (800ba44 <RadioSetTxConfig+0x19c>)
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800ba32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba34:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ba36:	2316      	movs	r3, #22
 800ba38:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ba3c:	3038      	adds	r0, #56	@ 0x38
 800ba3e:	f000 fe05 	bl	800c64c <SUBGRF_SetModulationParams>
            break;
 800ba42:	e746      	b.n	800b8d2 <RadioSetTxConfig+0x2a>
 800ba44:	200004f8 	.word	0x200004f8
 800ba48:	0800ef34 	.word	0x0800ef34
 800ba4c:	0800f1b0 	.word	0x0800f1b0
 800ba50:	20000008 	.word	0x20000008

0800ba54 <RadioSetRxConfig>:
{
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	b087      	sub	sp, #28
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	460e      	mov	r6, r1
 800ba5e:	4615      	mov	r5, r2
 800ba60:	9301      	str	r3, [sp, #4]
 800ba62:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 800ba66:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 800ba6a:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800ba6e:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 800ba72:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 800ba76:	4bb0      	ldr	r3, [pc, #704]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800ba78:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800ba7c:	f001 f875 	bl	800cb6a <RFW_DeInit>
    if( rxContinuous == true )
 800ba80:	f1b8 0f00 	cmp.w	r8, #0
 800ba84:	d001      	beq.n	800ba8a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800ba86:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800ba8a:	b16f      	cbz	r7, 800baa8 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800ba8c:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 800ba90:	4baa      	ldr	r3, [pc, #680]	@ (800bd3c <RadioSetRxConfig+0x2e8>)
 800ba92:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800ba94:	2c01      	cmp	r4, #1
 800ba96:	f000 80d2 	beq.w	800bc3e <RadioSetRxConfig+0x1ea>
 800ba9a:	2c05      	cmp	r4, #5
 800ba9c:	d008      	beq.n	800bab0 <RadioSetRxConfig+0x5c>
 800ba9e:	2c00      	cmp	r4, #0
 800baa0:	d07c      	beq.n	800bb9c <RadioSetRxConfig+0x148>
}
 800baa2:	b007      	add	sp, #28
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800baa8:	4ba4      	ldr	r3, [pc, #656]	@ (800bd3c <RadioSetRxConfig+0x2e8>)
 800baaa:	22ff      	movs	r2, #255	@ 0xff
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	e7f1      	b.n	800ba94 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800bab0:	2001      	movs	r0, #1
 800bab2:	f000 fbbf 	bl	800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bab6:	4ca0      	ldr	r4, [pc, #640]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bab8:	2700      	movs	r7, #0
 800baba:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800babe:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800bac0:	2309      	movs	r3, #9
 800bac2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800bac6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800baca:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bacc:	4630      	mov	r0, r6
 800bace:	f000 ffe7 	bl	800caa0 <SUBGRF_GetFskBandwidthRegValue>
 800bad2:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bad6:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bad8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800badc:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800bae0:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800bae2:	2310      	movs	r3, #16
 800bae4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bae6:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800bae8:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800baea:	4b94      	ldr	r3, [pc, #592]	@ (800bd3c <RadioSetRxConfig+0x2e8>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800baf0:	2301      	movs	r3, #1
 800baf2:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800baf4:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800baf6:	2005      	movs	r0, #5
 800baf8:	f7ff fbae 	bl	800b258 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bafc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800bb00:	f000 fda4 	bl	800c64c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bb04:	f104 000e 	add.w	r0, r4, #14
 800bb08:	f000 fe28 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bb0c:	ab02      	add	r3, sp, #8
 800bb0e:	4a8c      	ldr	r2, [pc, #560]	@ (800bd40 <RadioSetRxConfig+0x2ec>)
 800bb10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb14:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fa09 	bl	800bf30 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bb1e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800bb22:	f000 f9dc 	bl	800bede <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800bb26:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800bb2a:	f7fe ffe7 	bl	800aafc <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800bb2e:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 800bb32:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800bb36:	f7fe ffe5 	bl	800ab04 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800bb40:	f7fe ffe0 	bl	800ab04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800bb44:	f640 009b 	movw	r0, #2203	@ 0x89b
 800bb48:	f7fe ffd8 	bl	800aafc <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800bb4c:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800bb50:	f041 0108 	orr.w	r1, r1, #8
 800bb54:	f640 009b 	movw	r0, #2203	@ 0x89b
 800bb58:	f7fe ffd4 	bl	800ab04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800bb5c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800bb60:	f7fe ffcc 	bl	800aafc <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800bb64:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800bb68:	f041 0118 	orr.w	r1, r1, #24
 800bb6c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800bb70:	f7fe ffc8 	bl	800ab04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800bb74:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800bb78:	f7fe ffc0 	bl	800aafc <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800bb7c:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800bb80:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800bb84:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800bb88:	f7fe ffbc 	bl	800ab04 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800bb8c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800bb90:	fb03 f30a 	mul.w	r3, r3, sl
 800bb94:	fbb3 f3f5 	udiv	r3, r3, r5
 800bb98:	60a3      	str	r3, [r4, #8]
            break;
 800bb9a:	e782      	b.n	800baa2 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f000 fb49 	bl	800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bba2:	4c65      	ldr	r4, [pc, #404]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bba4:	f04f 0800 	mov.w	r8, #0
 800bba8:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800bbac:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bbae:	230b      	movs	r3, #11
 800bbb0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f000 ff73 	bl	800caa0 <SUBGRF_GetFskBandwidthRegValue>
 800bbba:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bbbe:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bbc2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800bbc6:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800bbca:	2304      	movs	r3, #4
 800bbcc:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800bbce:	2318      	movs	r3, #24
 800bbd0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bbd2:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bbd6:	f087 0701 	eor.w	r7, r7, #1
 800bbda:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800bbdc:	4b57      	ldr	r3, [pc, #348]	@ (800bd3c <RadioSetRxConfig+0x2e8>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800bbe2:	f1bb 0f00 	cmp.w	fp, #0
 800bbe6:	d026      	beq.n	800bc36 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bbe8:	22f2      	movs	r2, #242	@ 0xf2
 800bbea:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bbec:	4c52      	ldr	r4, [pc, #328]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bbee:	2301      	movs	r3, #1
 800bbf0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800bbf2:	f7ff f803 	bl	800abfc <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f7ff fb2e 	bl	800b258 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bbfc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800bc00:	f000 fd24 	bl	800c64c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bc04:	f104 000e 	add.w	r0, r4, #14
 800bc08:	f000 fda8 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bc0c:	4a4d      	ldr	r2, [pc, #308]	@ (800bd44 <RadioSetRxConfig+0x2f0>)
 800bc0e:	ab04      	add	r3, sp, #16
 800bc10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc14:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 f989 	bl	800bf30 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bc1e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800bc22:	f000 f95c 	bl	800bede <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800bc26:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800bc2a:	fb03 f30a 	mul.w	r3, r3, sl
 800bc2e:	fbb3 f3f5 	udiv	r3, r3, r5
 800bc32:	60a3      	str	r3, [r4, #8]
            break;
 800bc34:	e735      	b.n	800baa2 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800bc36:	4b40      	ldr	r3, [pc, #256]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc38:	2201      	movs	r2, #1
 800bc3a:	75da      	strb	r2, [r3, #23]
 800bc3c:	e7d6      	b.n	800bbec <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f000 faf8 	bl	800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bc44:	4a3c      	ldr	r2, [pc, #240]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc46:	2301      	movs	r3, #1
 800bc48:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800bc4c:	b2eb      	uxtb	r3, r5
 800bc4e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bc52:	493d      	ldr	r1, [pc, #244]	@ (800bd48 <RadioSetRxConfig+0x2f4>)
 800bc54:	5d89      	ldrb	r1, [r1, r6]
 800bc56:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800bc5a:	9901      	ldr	r1, [sp, #4]
 800bc5c:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bc60:	b91e      	cbnz	r6, 800bc6a <RadioSetRxConfig+0x216>
 800bc62:	f1a5 020b 	sub.w	r2, r5, #11
 800bc66:	2a01      	cmp	r2, #1
 800bc68:	d94b      	bls.n	800bd02 <RadioSetRxConfig+0x2ae>
 800bc6a:	2e01      	cmp	r6, #1
 800bc6c:	d047      	beq.n	800bcfe <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bc6e:	4a32      	ldr	r2, [pc, #200]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc70:	2100      	movs	r1, #0
 800bc72:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bc76:	4a30      	ldr	r2, [pc, #192]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc78:	2101      	movs	r1, #1
 800bc7a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bc7c:	3b05      	subs	r3, #5
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	428b      	cmp	r3, r1
 800bc82:	d943      	bls.n	800bd0c <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bc84:	4b2c      	ldr	r3, [pc, #176]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc86:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bc8a:	4c2b      	ldr	r4, [pc, #172]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bc8c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bc8e:	4b2b      	ldr	r3, [pc, #172]	@ (800bd3c <RadioSetRxConfig+0x2e8>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bc94:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bc98:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800bc9c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800bca0:	f7fe ffac 	bl	800abfc <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800bca4:	2001      	movs	r0, #1
 800bca6:	f7ff fad7 	bl	800b258 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bcaa:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800bcae:	f000 fccd 	bl	800c64c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bcb2:	f104 000e 	add.w	r0, r4, #14
 800bcb6:	f000 fd51 	bl	800c75c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800bcba:	fa5f f08a 	uxtb.w	r0, sl
 800bcbe:	f000 fac6 	bl	800c24e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800bcc2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800bcc6:	f000 f8e7 	bl	800be98 <SUBGRF_ReadRegister>
 800bcca:	f000 0101 	and.w	r1, r0, #1
 800bcce:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800bcd2:	f000 f8d1 	bl	800be78 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800bcd6:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d021      	beq.n	800bd22 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800bcde:	f240 7036 	movw	r0, #1846	@ 0x736
 800bce2:	f000 f8d9 	bl	800be98 <SUBGRF_ReadRegister>
 800bce6:	f040 0104 	orr.w	r1, r0, #4
 800bcea:	b2c9      	uxtb	r1, r1
 800bcec:	f240 7036 	movw	r0, #1846	@ 0x736
 800bcf0:	f000 f8c2 	bl	800be78 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800bcf4:	4b10      	ldr	r3, [pc, #64]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bcf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcfa:	609a      	str	r2, [r3, #8]
}
 800bcfc:	e6d1      	b.n	800baa2 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bcfe:	2d0c      	cmp	r5, #12
 800bd00:	d1b5      	bne.n	800bc6e <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800bd02:	4a0d      	ldr	r2, [pc, #52]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bd04:	2101      	movs	r1, #1
 800bd06:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800bd0a:	e7b4      	b.n	800bc76 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800bd0c:	f1b9 0f0b 	cmp.w	r9, #11
 800bd10:	d803      	bhi.n	800bd1a <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800bd12:	4613      	mov	r3, r2
 800bd14:	220c      	movs	r2, #12
 800bd16:	839a      	strh	r2, [r3, #28]
 800bd18:	e7b7      	b.n	800bc8a <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bd1a:	4b07      	ldr	r3, [pc, #28]	@ (800bd38 <RadioSetRxConfig+0x2e4>)
 800bd1c:	f8a3 901c 	strh.w	r9, [r3, #28]
 800bd20:	e7b3      	b.n	800bc8a <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800bd22:	f240 7036 	movw	r0, #1846	@ 0x736
 800bd26:	f000 f8b7 	bl	800be98 <SUBGRF_ReadRegister>
 800bd2a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800bd2e:	f240 7036 	movw	r0, #1846	@ 0x736
 800bd32:	f000 f8a1 	bl	800be78 <SUBGRF_WriteRegister>
 800bd36:	e7dd      	b.n	800bcf4 <RadioSetRxConfig+0x2a0>
 800bd38:	200004f8 	.word	0x200004f8
 800bd3c:	20000008 	.word	0x20000008
 800bd40:	0800ef3c 	.word	0x0800ef3c
 800bd44:	0800ef34 	.word	0x0800ef34
 800bd48:	0800f1b0 	.word	0x0800f1b0

0800bd4c <RadioIsChannelFree>:
{
 800bd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4e:	b08b      	sub	sp, #44	@ 0x2c
 800bd50:	4604      	mov	r4, r0
 800bd52:	460f      	mov	r7, r1
 800bd54:	4616      	mov	r6, r2
 800bd56:	461d      	mov	r5, r3
    RadioStandby( );
 800bd58:	f7fe ff50 	bl	800abfc <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f7ff fa7b 	bl	800b258 <RadioSetModem>
    RadioSetChannel( freq );
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7ff f942 	bl	800afec <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800bd68:	2301      	movs	r3, #1
 800bd6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6c:	2400      	movs	r4, #0
 800bd6e:	9408      	str	r4, [sp, #32]
 800bd70:	9407      	str	r4, [sp, #28]
 800bd72:	9406      	str	r4, [sp, #24]
 800bd74:	9405      	str	r4, [sp, #20]
 800bd76:	9404      	str	r4, [sp, #16]
 800bd78:	9403      	str	r4, [sp, #12]
 800bd7a:	9402      	str	r4, [sp, #8]
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	9700      	str	r7, [sp, #0]
 800bd82:	4623      	mov	r3, r4
 800bd84:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800bd88:	4639      	mov	r1, r7
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff fe62 	bl	800ba54 <RadioSetRxConfig>
    RadioRx( 0 );
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff f943 	bl	800b01c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800bd96:	f7ff f8f5 	bl	800af84 <RadioGetWakeupTime>
 800bd9a:	f7f5 f939 	bl	8001010 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800bd9e:	f001 fa27 	bl	800d1f0 <UTIL_TIMER_GetCurrentTime>
 800bda2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bda4:	4620      	mov	r0, r4
 800bda6:	f001 fa2d 	bl	800d204 <UTIL_TIMER_GetElapsedTime>
 800bdaa:	42a8      	cmp	r0, r5
 800bdac:	d206      	bcs.n	800bdbc <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f7ff f8f5 	bl	800af9e <RadioRssi>
        if( rssi > rssiThresh )
 800bdb4:	42b0      	cmp	r0, r6
 800bdb6:	ddf5      	ble.n	800bda4 <RadioIsChannelFree+0x58>
            status = false;
 800bdb8:	2400      	movs	r4, #0
 800bdba:	e000      	b.n	800bdbe <RadioIsChannelFree+0x72>
    bool status = true;
 800bdbc:	2401      	movs	r4, #1
    RadioStandby( );
 800bdbe:	f7fe ff1d 	bl	800abfc <RadioStandby>
}
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b00b      	add	sp, #44	@ 0x2c
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdc8 <RadioInit>:
{
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	b082      	sub	sp, #8
    RadioEvents = events;
 800bdcc:	4b1d      	ldr	r3, [pc, #116]	@ (800be44 <RadioInit+0x7c>)
 800bdce:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800bdd0:	4d1d      	ldr	r5, [pc, #116]	@ (800be48 <RadioInit+0x80>)
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800bdd6:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800bdd8:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800bdda:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800bddc:	481b      	ldr	r0, [pc, #108]	@ (800be4c <RadioInit+0x84>)
 800bdde:	f000 fb27 	bl	800c430 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800bde2:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800bde4:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800bde6:	f000 fa53 	bl	800c290 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800bdea:	4621      	mov	r1, r4
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 fd27 	bl	800c840 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	f000 fb9a 	bl	800c530 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	4622      	mov	r2, r4
 800be00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800be04:	4608      	mov	r0, r1
 800be06:	f000 fada 	bl	800c3be <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800be0a:	f7ff f93f 	bl	800b08c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800be0e:	4e10      	ldr	r6, [pc, #64]	@ (800be50 <RadioInit+0x88>)
 800be10:	9400      	str	r4, [sp, #0]
 800be12:	4b10      	ldr	r3, [pc, #64]	@ (800be54 <RadioInit+0x8c>)
 800be14:	4622      	mov	r2, r4
 800be16:	f04f 31ff 	mov.w	r1, #4294967295
 800be1a:	4630      	mov	r0, r6
 800be1c:	f001 f9ca 	bl	800d1b4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800be20:	4d0d      	ldr	r5, [pc, #52]	@ (800be58 <RadioInit+0x90>)
 800be22:	9400      	str	r4, [sp, #0]
 800be24:	4b0d      	ldr	r3, [pc, #52]	@ (800be5c <RadioInit+0x94>)
 800be26:	4622      	mov	r2, r4
 800be28:	f04f 31ff 	mov.w	r1, #4294967295
 800be2c:	4628      	mov	r0, r5
 800be2e:	f001 f9c1 	bl	800d1b4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800be32:	4630      	mov	r0, r6
 800be34:	f001 fa1c 	bl	800d270 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800be38:	4628      	mov	r0, r5
 800be3a:	f001 fa19 	bl	800d270 <UTIL_TIMER_Stop>
}
 800be3e:	b002      	add	sp, #8
 800be40:	bd70      	pop	{r4, r5, r6, pc}
 800be42:	bf00      	nop
 800be44:	20000554 	.word	0x20000554
 800be48:	200004f8 	.word	0x200004f8
 800be4c:	0800af71 	.word	0x0800af71
 800be50:	200004e0 	.word	0x200004e0
 800be54:	0800a9e1 	.word	0x0800a9e1
 800be58:	200004c8 	.word	0x200004c8
 800be5c:	0800aa09 	.word	0x0800aa09

0800be60 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 800be60:	4b01      	ldr	r3, [pc, #4]	@ (800be68 <SUBGRF_GetOperatingMode+0x8>)
 800be62:	7818      	ldrb	r0, [r3, #0]
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	20000666 	.word	0x20000666

0800be6c <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800be6c:	4b01      	ldr	r3, [pc, #4]	@ (800be74 <SUBGRF_GetPacketType+0x8>)
 800be6e:	7818      	ldrb	r0, [r3, #0]
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	20000665 	.word	0x20000665

0800be78 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800be78:	b500      	push	{lr}
 800be7a:	b083      	sub	sp, #12
 800be7c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800be80:	2301      	movs	r3, #1
 800be82:	f10d 0207 	add.w	r2, sp, #7
 800be86:	4601      	mov	r1, r0
 800be88:	4802      	ldr	r0, [pc, #8]	@ (800be94 <SUBGRF_WriteRegister+0x1c>)
 800be8a:	f7fc ff9f 	bl	8008dcc <HAL_SUBGHZ_WriteRegisters>
}
 800be8e:	b003      	add	sp, #12
 800be90:	f85d fb04 	ldr.w	pc, [sp], #4
 800be94:	200000c4 	.word	0x200000c4

0800be98 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800be98:	b500      	push	{lr}
 800be9a:	b083      	sub	sp, #12
 800be9c:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800be9e:	2301      	movs	r3, #1
 800bea0:	f10d 0207 	add.w	r2, sp, #7
 800bea4:	4803      	ldr	r0, [pc, #12]	@ (800beb4 <SUBGRF_ReadRegister+0x1c>)
 800bea6:	f7fc ffe1 	bl	8008e6c <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 800beaa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800beae:	b003      	add	sp, #12
 800beb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800beb4:	200000c4 	.word	0x200000c4

0800beb8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800beb8:	b510      	push	{r4, lr}
 800beba:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800bebc:	f7fa ff52 	bl	8006d64 <RBI_IsDCDC>
 800bec0:	2801      	cmp	r0, #1
 800bec2:	d000      	beq.n	800bec6 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800bec4:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bec6:	f640 1023 	movw	r0, #2339	@ 0x923
 800beca:	f7ff ffe5 	bl	800be98 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800bece:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bed2:	4321      	orrs	r1, r4
 800bed4:	f640 1023 	movw	r0, #2339	@ 0x923
 800bed8:	f7ff ffce 	bl	800be78 <SUBGRF_WriteRegister>
}
 800bedc:	e7f2      	b.n	800bec4 <Radio_SMPS_Set+0xc>

0800bede <SUBGRF_SetWhiteningSeed>:
{
 800bede:	b510      	push	{r4, lr}
 800bee0:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800bee2:	f7ff ffc3 	bl	800be6c <SUBGRF_GetPacketType>
 800bee6:	b100      	cbz	r0, 800beea <SUBGRF_SetWhiteningSeed+0xc>
}
 800bee8:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800beea:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800beee:	f7ff ffd3 	bl	800be98 <SUBGRF_ReadRegister>
 800bef2:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800bef6:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800befa:	4301      	orrs	r1, r0
 800befc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800bf00:	f7ff ffba 	bl	800be78 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800bf04:	b2e1      	uxtb	r1, r4
 800bf06:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800bf0a:	f7ff ffb5 	bl	800be78 <SUBGRF_WriteRegister>
}
 800bf0e:	e7eb      	b.n	800bee8 <SUBGRF_SetWhiteningSeed+0xa>

0800bf10 <SUBGRF_WriteRegisters>:
{
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf14:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf18:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800bf1a:	460a      	mov	r2, r1
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4803      	ldr	r0, [pc, #12]	@ (800bf2c <SUBGRF_WriteRegisters+0x1c>)
 800bf20:	f7fc ff54 	bl	8008dcc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf24:	f384 8810 	msr	PRIMASK, r4
}
 800bf28:	bd10      	pop	{r4, pc}
 800bf2a:	bf00      	nop
 800bf2c:	200000c4 	.word	0x200000c4

0800bf30 <SUBGRF_SetSyncWord>:
{
 800bf30:	b508      	push	{r3, lr}
 800bf32:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800bf34:	2208      	movs	r2, #8
 800bf36:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800bf3a:	f7ff ffe9 	bl	800bf10 <SUBGRF_WriteRegisters>
}
 800bf3e:	2000      	movs	r0, #0
 800bf40:	bd08      	pop	{r3, pc}

0800bf42 <SUBGRF_SetCrcSeed>:
{
 800bf42:	b500      	push	{lr}
 800bf44:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800bf46:	0a03      	lsrs	r3, r0, #8
 800bf48:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800bf4c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800bf50:	f7ff ff8c 	bl	800be6c <SUBGRF_GetPacketType>
 800bf54:	b110      	cbz	r0, 800bf5c <SUBGRF_SetCrcSeed+0x1a>
}
 800bf56:	b003      	add	sp, #12
 800bf58:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	a901      	add	r1, sp, #4
 800bf60:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800bf64:	f7ff ffd4 	bl	800bf10 <SUBGRF_WriteRegisters>
}
 800bf68:	e7f5      	b.n	800bf56 <SUBGRF_SetCrcSeed+0x14>

0800bf6a <SUBGRF_SetCrcPolynomial>:
{
 800bf6a:	b500      	push	{lr}
 800bf6c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800bf6e:	0a03      	lsrs	r3, r0, #8
 800bf70:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800bf74:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800bf78:	f7ff ff78 	bl	800be6c <SUBGRF_GetPacketType>
 800bf7c:	b110      	cbz	r0, 800bf84 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800bf7e:	b003      	add	sp, #12
 800bf80:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800bf84:	2202      	movs	r2, #2
 800bf86:	a901      	add	r1, sp, #4
 800bf88:	f240 60be 	movw	r0, #1726	@ 0x6be
 800bf8c:	f7ff ffc0 	bl	800bf10 <SUBGRF_WriteRegisters>
}
 800bf90:	e7f5      	b.n	800bf7e <SUBGRF_SetCrcPolynomial+0x14>
	...

0800bf94 <SUBGRF_ReadRegisters>:
{
 800bf94:	b510      	push	{r4, lr}
 800bf96:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf98:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf9c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800bf9e:	460a      	mov	r2, r1
 800bfa0:	4601      	mov	r1, r0
 800bfa2:	4803      	ldr	r0, [pc, #12]	@ (800bfb0 <SUBGRF_ReadRegisters+0x1c>)
 800bfa4:	f7fc ff62 	bl	8008e6c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfa8:	f384 8810 	msr	PRIMASK, r4
}
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	200000c4 	.word	0x200000c4

0800bfb4 <SUBGRF_WriteBuffer>:
{
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfb8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bfbc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800bfbe:	460a      	mov	r2, r1
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4803      	ldr	r0, [pc, #12]	@ (800bfd0 <SUBGRF_WriteBuffer+0x1c>)
 800bfc4:	f7fd f8b0 	bl	8009128 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfc8:	f384 8810 	msr	PRIMASK, r4
}
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	200000c4 	.word	0x200000c4

0800bfd4 <SUBGRF_SetPayload>:
{
 800bfd4:	b508      	push	{r3, lr}
 800bfd6:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800bfd8:	4601      	mov	r1, r0
 800bfda:	2000      	movs	r0, #0
 800bfdc:	f7ff ffea 	bl	800bfb4 <SUBGRF_WriteBuffer>
}
 800bfe0:	bd08      	pop	{r3, pc}
	...

0800bfe4 <SUBGRF_ReadBuffer>:
{
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfe8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bfec:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800bfee:	460a      	mov	r2, r1
 800bff0:	4601      	mov	r1, r0
 800bff2:	4803      	ldr	r0, [pc, #12]	@ (800c000 <SUBGRF_ReadBuffer+0x1c>)
 800bff4:	f7fd f8e2 	bl	80091bc <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bff8:	f384 8810 	msr	PRIMASK, r4
}
 800bffc:	bd10      	pop	{r4, pc}
 800bffe:	bf00      	nop
 800c000:	200000c4 	.word	0x200000c4

0800c004 <SUBGRF_WriteCommand>:
{
 800c004:	b510      	push	{r4, lr}
 800c006:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c008:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c00c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c00e:	460a      	mov	r2, r1
 800c010:	4601      	mov	r1, r0
 800c012:	4803      	ldr	r0, [pc, #12]	@ (800c020 <SUBGRF_WriteCommand+0x1c>)
 800c014:	f7fc ff7e 	bl	8008f14 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c018:	f384 8810 	msr	PRIMASK, r4
}
 800c01c:	bd10      	pop	{r4, pc}
 800c01e:	bf00      	nop
 800c020:	200000c4 	.word	0x200000c4

0800c024 <SUBGRF_SetSleep>:
{
 800c024:	b510      	push	{r4, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800c02a:	2000      	movs	r0, #0
 800c02c:	f7fa fe8e 	bl	8006d4c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800c030:	2002      	movs	r0, #2
 800c032:	f7ff ff41 	bl	800beb8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800c036:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800c03a:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800c03e:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800c040:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800c044:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800c046:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800c04a:	2201      	movs	r2, #1
 800c04c:	f10d 0107 	add.w	r1, sp, #7
 800c050:	2084      	movs	r0, #132	@ 0x84
 800c052:	f7ff ffd7 	bl	800c004 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800c056:	4b02      	ldr	r3, [pc, #8]	@ (800c060 <SUBGRF_SetSleep+0x3c>)
 800c058:	2200      	movs	r2, #0
 800c05a:	701a      	strb	r2, [r3, #0]
}
 800c05c:	b002      	add	sp, #8
 800c05e:	bd10      	pop	{r4, pc}
 800c060:	20000666 	.word	0x20000666

0800c064 <SUBGRF_SetStandby>:
{
 800c064:	b500      	push	{lr}
 800c066:	b083      	sub	sp, #12
 800c068:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800c06c:	2201      	movs	r2, #1
 800c06e:	f10d 0107 	add.w	r1, sp, #7
 800c072:	2080      	movs	r0, #128	@ 0x80
 800c074:	f7ff ffc6 	bl	800c004 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800c078:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c07c:	b92b      	cbnz	r3, 800c08a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800c07e:	4b05      	ldr	r3, [pc, #20]	@ (800c094 <SUBGRF_SetStandby+0x30>)
 800c080:	2201      	movs	r2, #1
 800c082:	701a      	strb	r2, [r3, #0]
}
 800c084:	b003      	add	sp, #12
 800c086:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800c08a:	4b02      	ldr	r3, [pc, #8]	@ (800c094 <SUBGRF_SetStandby+0x30>)
 800c08c:	2202      	movs	r2, #2
 800c08e:	701a      	strb	r2, [r3, #0]
}
 800c090:	e7f8      	b.n	800c084 <SUBGRF_SetStandby+0x20>
 800c092:	bf00      	nop
 800c094:	20000666 	.word	0x20000666

0800c098 <SUBGRF_SetTx>:
{
 800c098:	b500      	push	{lr}
 800c09a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800c09c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c8 <SUBGRF_SetTx+0x30>)
 800c09e:	2204      	movs	r2, #4
 800c0a0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c0a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c0a6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c0aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c0ae:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c0b2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800c0b6:	2203      	movs	r2, #3
 800c0b8:	a901      	add	r1, sp, #4
 800c0ba:	2083      	movs	r0, #131	@ 0x83
 800c0bc:	f7ff ffa2 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c0c0:	b003      	add	sp, #12
 800c0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0c6:	bf00      	nop
 800c0c8:	20000666 	.word	0x20000666

0800c0cc <SUBGRF_SendPayload>:
{
 800c0cc:	b510      	push	{r4, lr}
 800c0ce:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800c0d0:	f7ff ff80 	bl	800bfd4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f7ff ffdf 	bl	800c098 <SUBGRF_SetTx>
}
 800c0da:	bd10      	pop	{r4, pc}

0800c0dc <SUBGRF_SetRx>:
{
 800c0dc:	b500      	push	{lr}
 800c0de:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800c0e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <SUBGRF_SetRx+0x30>)
 800c0e2:	2205      	movs	r2, #5
 800c0e4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c0e6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c0ea:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c0ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c0f2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c0f6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800c0fa:	2203      	movs	r2, #3
 800c0fc:	a901      	add	r1, sp, #4
 800c0fe:	2082      	movs	r0, #130	@ 0x82
 800c100:	f7ff ff80 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c104:	b003      	add	sp, #12
 800c106:	f85d fb04 	ldr.w	pc, [sp], #4
 800c10a:	bf00      	nop
 800c10c:	20000666 	.word	0x20000666

0800c110 <SUBGRF_GetRandom>:
{
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	b082      	sub	sp, #8
    uint32_t number = 0;
 800c114:	2600      	movs	r6, #0
 800c116:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800c118:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800c11c:	f7ff febc 	bl	800be98 <SUBGRF_ReadRegister>
 800c120:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800c122:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 800c126:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800c12a:	f7ff fea5 	bl	800be78 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800c12e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c132:	f7ff feb1 	bl	800be98 <SUBGRF_ReadRegister>
 800c136:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800c138:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 800c13c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c140:	f7ff fe9a 	bl	800be78 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800c144:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800c148:	f7ff ffc8 	bl	800c0dc <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800c14c:	2204      	movs	r2, #4
 800c14e:	eb0d 0102 	add.w	r1, sp, r2
 800c152:	f640 0019 	movw	r0, #2073	@ 0x819
 800c156:	f7ff ff1d 	bl	800bf94 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ff82 	bl	800c064 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800c160:	4629      	mov	r1, r5
 800c162:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800c166:	f7ff fe87 	bl	800be78 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800c16a:	4621      	mov	r1, r4
 800c16c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c170:	f7ff fe82 	bl	800be78 <SUBGRF_WriteRegister>
}
 800c174:	9801      	ldr	r0, [sp, #4]
 800c176:	b002      	add	sp, #8
 800c178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c17c <SUBGRF_SetRxBoosted>:
{
 800c17c:	b510      	push	{r4, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800c182:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b4 <SUBGRF_SetRxBoosted+0x38>)
 800c184:	2205      	movs	r2, #5
 800c186:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800c188:	2197      	movs	r1, #151	@ 0x97
 800c18a:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800c18e:	f7ff fe73 	bl	800be78 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c192:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800c196:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c19a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c19e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c1a2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800c1a6:	2203      	movs	r2, #3
 800c1a8:	a901      	add	r1, sp, #4
 800c1aa:	2082      	movs	r0, #130	@ 0x82
 800c1ac:	f7ff ff2a 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c1b0:	b002      	add	sp, #8
 800c1b2:	bd10      	pop	{r4, pc}
 800c1b4:	20000666 	.word	0x20000666

0800c1b8 <SUBGRF_SetRxDutyCycle>:
{
 800c1b8:	b500      	push	{lr}
 800c1ba:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800c1bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c1c0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800c1c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c1c8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800c1cc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800c1d0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800c1d4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800c1d8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c1dc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800c1e0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800c1e4:	2206      	movs	r2, #6
 800c1e6:	4669      	mov	r1, sp
 800c1e8:	2094      	movs	r0, #148	@ 0x94
 800c1ea:	f7ff ff0b 	bl	800c004 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800c1ee:	4b03      	ldr	r3, [pc, #12]	@ (800c1fc <SUBGRF_SetRxDutyCycle+0x44>)
 800c1f0:	2206      	movs	r2, #6
 800c1f2:	701a      	strb	r2, [r3, #0]
}
 800c1f4:	b003      	add	sp, #12
 800c1f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1fa:	bf00      	nop
 800c1fc:	20000666 	.word	0x20000666

0800c200 <SUBGRF_SetCad>:
{
 800c200:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800c202:	2200      	movs	r2, #0
 800c204:	4611      	mov	r1, r2
 800c206:	20c5      	movs	r0, #197	@ 0xc5
 800c208:	f7ff fefc 	bl	800c004 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800c20c:	4b01      	ldr	r3, [pc, #4]	@ (800c214 <SUBGRF_SetCad+0x14>)
 800c20e:	2207      	movs	r2, #7
 800c210:	701a      	strb	r2, [r3, #0]
}
 800c212:	bd08      	pop	{r3, pc}
 800c214:	20000666 	.word	0x20000666

0800c218 <SUBGRF_SetTxContinuousWave>:
{
 800c218:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800c21a:	2200      	movs	r2, #0
 800c21c:	4611      	mov	r1, r2
 800c21e:	20d1      	movs	r0, #209	@ 0xd1
 800c220:	f7ff fef0 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c224:	bd08      	pop	{r3, pc}

0800c226 <SUBGRF_SetTxInfinitePreamble>:
{
 800c226:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800c228:	2200      	movs	r2, #0
 800c22a:	4611      	mov	r1, r2
 800c22c:	20d2      	movs	r0, #210	@ 0xd2
 800c22e:	f7ff fee9 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c232:	bd08      	pop	{r3, pc}

0800c234 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800c234:	b500      	push	{lr}
 800c236:	b083      	sub	sp, #12
 800c238:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800c23c:	2201      	movs	r2, #1
 800c23e:	f10d 0107 	add.w	r1, sp, #7
 800c242:	209f      	movs	r0, #159	@ 0x9f
 800c244:	f7ff fede 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c248:	b003      	add	sp, #12
 800c24a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c24e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800c24e:	b500      	push	{lr}
 800c250:	b083      	sub	sp, #12
 800c252:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800c256:	2201      	movs	r2, #1
 800c258:	f10d 0107 	add.w	r1, sp, #7
 800c25c:	20a0      	movs	r0, #160	@ 0xa0
 800c25e:	f7ff fed1 	bl	800c004 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800c262:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c266:	2b3f      	cmp	r3, #63	@ 0x3f
 800c268:	d90f      	bls.n	800c28a <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800c26a:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800c26c:	2200      	movs	r2, #0
        while( mant > 31 )
 800c26e:	e002      	b.n	800c276 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800c270:	089b      	lsrs	r3, r3, #2
            exp++;
 800c272:	3201      	adds	r2, #1
 800c274:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800c276:	2b1f      	cmp	r3, #31
 800c278:	d8fa      	bhi.n	800c270 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800c27a:	00d9      	lsls	r1, r3, #3
 800c27c:	b2c9      	uxtb	r1, r1
 800c27e:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800c280:	b2c9      	uxtb	r1, r1
 800c282:	f240 7006 	movw	r0, #1798	@ 0x706
 800c286:	f7ff fdf7 	bl	800be78 <SUBGRF_WriteRegister>
}
 800c28a:	b003      	add	sp, #12
 800c28c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c290 <SUBGRF_SetRegulatorMode>:
{
 800c290:	b500      	push	{lr}
 800c292:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800c294:	f7fa fd66 	bl	8006d64 <RBI_IsDCDC>
 800c298:	2801      	cmp	r0, #1
 800c29a:	d00b      	beq.n	800c2b4 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800c29c:	2300      	movs	r3, #0
 800c29e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f10d 0107 	add.w	r1, sp, #7
 800c2a8:	2096      	movs	r0, #150	@ 0x96
 800c2aa:	f7ff feab 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c2ae:	b003      	add	sp, #12
 800c2b0:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	f88d 3007 	strb.w	r3, [sp, #7]
 800c2ba:	e7f2      	b.n	800c2a2 <SUBGRF_SetRegulatorMode+0x12>

0800c2bc <SUBGRF_Calibrate>:
{
 800c2bc:	b500      	push	{lr}
 800c2be:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c2c0:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800c2c4:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c2c8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800c2ca:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800c2ce:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800c2d0:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800c2d4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800c2d6:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800c2da:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800c2dc:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800c2e0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800c2e2:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800c2e6:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c2e8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f10d 0107 	add.w	r1, sp, #7
 800c2f2:	2089      	movs	r0, #137	@ 0x89
 800c2f4:	f7ff fe86 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c2f8:	b003      	add	sp, #12
 800c2fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c300 <SUBGRF_CalibrateImage>:
{
 800c300:	b500      	push	{lr}
 800c302:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800c304:	4b1f      	ldr	r3, [pc, #124]	@ (800c384 <SUBGRF_CalibrateImage+0x84>)
 800c306:	4298      	cmp	r0, r3
 800c308:	d90d      	bls.n	800c326 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800c30a:	23e1      	movs	r3, #225	@ 0xe1
 800c30c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800c310:	23e9      	movs	r3, #233	@ 0xe9
 800c312:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800c316:	2202      	movs	r2, #2
 800c318:	a901      	add	r1, sp, #4
 800c31a:	2098      	movs	r0, #152	@ 0x98
 800c31c:	f7ff fe72 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c320:	b003      	add	sp, #12
 800c322:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800c326:	4b18      	ldr	r3, [pc, #96]	@ (800c388 <SUBGRF_CalibrateImage+0x88>)
 800c328:	4298      	cmp	r0, r3
 800c32a:	d906      	bls.n	800c33a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800c32c:	23d7      	movs	r3, #215	@ 0xd7
 800c32e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800c332:	23db      	movs	r3, #219	@ 0xdb
 800c334:	f88d 3005 	strb.w	r3, [sp, #5]
 800c338:	e7ed      	b.n	800c316 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800c33a:	4b14      	ldr	r3, [pc, #80]	@ (800c38c <SUBGRF_CalibrateImage+0x8c>)
 800c33c:	4298      	cmp	r0, r3
 800c33e:	d906      	bls.n	800c34e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800c340:	23c1      	movs	r3, #193	@ 0xc1
 800c342:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800c346:	23c5      	movs	r3, #197	@ 0xc5
 800c348:	f88d 3005 	strb.w	r3, [sp, #5]
 800c34c:	e7e3      	b.n	800c316 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800c34e:	4b10      	ldr	r3, [pc, #64]	@ (800c390 <SUBGRF_CalibrateImage+0x90>)
 800c350:	4298      	cmp	r0, r3
 800c352:	d906      	bls.n	800c362 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800c354:	2375      	movs	r3, #117	@ 0x75
 800c356:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800c35a:	2381      	movs	r3, #129	@ 0x81
 800c35c:	f88d 3005 	strb.w	r3, [sp, #5]
 800c360:	e7d9      	b.n	800c316 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800c362:	4b0c      	ldr	r3, [pc, #48]	@ (800c394 <SUBGRF_CalibrateImage+0x94>)
 800c364:	4298      	cmp	r0, r3
 800c366:	d906      	bls.n	800c376 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 800c368:	236b      	movs	r3, #107	@ 0x6b
 800c36a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800c36e:	236f      	movs	r3, #111	@ 0x6f
 800c370:	f88d 3005 	strb.w	r3, [sp, #5]
 800c374:	e7cf      	b.n	800c316 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 800c376:	2329      	movs	r3, #41	@ 0x29
 800c378:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800c37c:	232b      	movs	r3, #43	@ 0x2b
 800c37e:	f88d 3005 	strb.w	r3, [sp, #5]
 800c382:	e7c8      	b.n	800c316 <SUBGRF_CalibrateImage+0x16>
 800c384:	35a4e900 	.word	0x35a4e900
 800c388:	32a9f880 	.word	0x32a9f880
 800c38c:	2de54480 	.word	0x2de54480
 800c390:	1b6b0b00 	.word	0x1b6b0b00
 800c394:	1954fc40 	.word	0x1954fc40

0800c398 <SUBGRF_SetPaConfig>:
{
 800c398:	b500      	push	{lr}
 800c39a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800c39c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800c3a0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800c3a4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800c3a8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	eb0d 0102 	add.w	r1, sp, r2
 800c3b2:	2095      	movs	r0, #149	@ 0x95
 800c3b4:	f7ff fe26 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c3b8:	b003      	add	sp, #12
 800c3ba:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3be <SUBGRF_SetDioIrqParams>:
{
 800c3be:	b500      	push	{lr}
 800c3c0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800c3c2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800c3c6:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800c3ca:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800c3ce:	0a08      	lsrs	r0, r1, #8
 800c3d0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800c3d4:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800c3d8:	0a11      	lsrs	r1, r2, #8
 800c3da:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800c3de:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800c3e2:	0a1a      	lsrs	r2, r3, #8
 800c3e4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800c3e8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c3ec:	2208      	movs	r2, #8
 800c3ee:	4669      	mov	r1, sp
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	f7ff fe07 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c3f6:	b003      	add	sp, #12
 800c3f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3fc <SUBGRF_SetTcxoMode>:
{
 800c3fc:	b500      	push	{lr}
 800c3fe:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800c400:	f000 0007 	and.w	r0, r0, #7
 800c404:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c408:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800c40c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c410:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c414:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800c418:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c41c:	2204      	movs	r2, #4
 800c41e:	eb0d 0102 	add.w	r1, sp, r2
 800c422:	2097      	movs	r0, #151	@ 0x97
 800c424:	f7ff fdee 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c428:	b003      	add	sp, #12
 800c42a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c430 <SUBGRF_Init>:
{
 800c430:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800c432:	b108      	cbz	r0, 800c438 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800c434:	4a18      	ldr	r2, [pc, #96]	@ (800c498 <SUBGRF_Init+0x68>)
 800c436:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800c438:	f7f4 fd5e 	bl	8000ef8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800c43c:	2002      	movs	r0, #2
 800c43e:	f7ff fd3b 	bl	800beb8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800c442:	2000      	movs	r0, #0
 800c444:	4b15      	ldr	r3, [pc, #84]	@ (800c49c <SUBGRF_Init+0x6c>)
 800c446:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800c448:	f7ff fe0c 	bl	800c064 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800c44c:	f7fa fc86 	bl	8006d5c <RBI_IsTCXO>
 800c450:	2801      	cmp	r0, #1
 800c452:	d014      	beq.n	800c47e <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800c454:	2120      	movs	r1, #32
 800c456:	f640 1011 	movw	r0, #2321	@ 0x911
 800c45a:	f7ff fd0d 	bl	800be78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800c45e:	2120      	movs	r1, #32
 800c460:	f640 1012 	movw	r0, #2322	@ 0x912
 800c464:	f7ff fd08 	bl	800be78 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800c468:	210e      	movs	r1, #14
 800c46a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800c46e:	f7ff fd03 	bl	800be78 <SUBGRF_WriteRegister>
    RBI_Init();
 800c472:	f7fa fc67 	bl	8006d44 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800c476:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a0 <SUBGRF_Init+0x70>)
 800c478:	2201      	movs	r2, #1
 800c47a:	701a      	strb	r2, [r3, #0]
}
 800c47c:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800c47e:	2140      	movs	r1, #64	@ 0x40
 800c480:	f7ff ffbc 	bl	800c3fc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800c484:	2100      	movs	r1, #0
 800c486:	f640 1011 	movw	r0, #2321	@ 0x911
 800c48a:	f7ff fcf5 	bl	800be78 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800c48e:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800c492:	f7ff ff13 	bl	800c2bc <SUBGRF_Calibrate>
 800c496:	e7e7      	b.n	800c468 <SUBGRF_Init+0x38>
 800c498:	20000658 	.word	0x20000658
 800c49c:	2000065c 	.word	0x2000065c
 800c4a0:	20000666 	.word	0x20000666

0800c4a4 <SUBGRF_SetRfFrequency>:
{
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800c4aa:	4b12      	ldr	r3, [pc, #72]	@ (800c4f4 <SUBGRF_SetRfFrequency+0x50>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	b1d3      	cbz	r3, 800c4e6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800c4b0:	4a11      	ldr	r2, [pc, #68]	@ (800c4f8 <SUBGRF_SetRfFrequency+0x54>)
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	0660      	lsls	r0, r4, #25
 800c4b6:	09e1      	lsrs	r1, r4, #7
 800c4b8:	f7f4 f9ca 	bl	8000850 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800c4bc:	0e03      	lsrs	r3, r0, #24
 800c4be:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800c4c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c4c6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800c4ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c4ce:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800c4d2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c4d6:	2204      	movs	r2, #4
 800c4d8:	eb0d 0102 	add.w	r1, sp, r2
 800c4dc:	2086      	movs	r0, #134	@ 0x86
 800c4de:	f7ff fd91 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c4e2:	b002      	add	sp, #8
 800c4e4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800c4e6:	f7ff ff0b 	bl	800c300 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800c4ea:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <SUBGRF_SetRfFrequency+0x50>)
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e7de      	b.n	800c4b0 <SUBGRF_SetRfFrequency+0xc>
 800c4f2:	bf00      	nop
 800c4f4:	2000065c 	.word	0x2000065c
 800c4f8:	01e84800 	.word	0x01e84800

0800c4fc <SUBGRF_SetPacketType>:
{
 800c4fc:	b500      	push	{lr}
 800c4fe:	b083      	sub	sp, #12
 800c500:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800c504:	b2c3      	uxtb	r3, r0
 800c506:	4a09      	ldr	r2, [pc, #36]	@ (800c52c <SUBGRF_SetPacketType+0x30>)
 800c508:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800c50a:	b143      	cbz	r3, 800c51e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800c50c:	2201      	movs	r2, #1
 800c50e:	f10d 0107 	add.w	r1, sp, #7
 800c512:	208a      	movs	r0, #138	@ 0x8a
 800c514:	f7ff fd76 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c518:	b003      	add	sp, #12
 800c51a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800c51e:	2100      	movs	r1, #0
 800c520:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800c524:	f7ff fca8 	bl	800be78 <SUBGRF_WriteRegister>
 800c528:	e7f0      	b.n	800c50c <SUBGRF_SetPacketType+0x10>
 800c52a:	bf00      	nop
 800c52c:	20000665 	.word	0x20000665

0800c530 <SUBGRF_SetTxParams>:
{
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	460c      	mov	r4, r1
 800c536:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800c538:	2801      	cmp	r0, #1
 800c53a:	d035      	beq.n	800c5a8 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800c53c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800c540:	f7ff fcaa 	bl	800be98 <SUBGRF_ReadRegister>
 800c544:	f040 011e 	orr.w	r1, r0, #30
 800c548:	b2c9      	uxtb	r1, r1
 800c54a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800c54e:	f7ff fc93 	bl	800be78 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800c552:	2001      	movs	r0, #1
 800c554:	f7fa fc0a 	bl	8006d6c <RBI_GetRFOMaxPowerConfig>
 800c558:	4605      	mov	r5, r0
        if (power > max_power)
 800c55a:	4284      	cmp	r4, r0
 800c55c:	dd00      	ble.n	800c560 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800c55e:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800c560:	2d14      	cmp	r5, #20
 800c562:	d054      	beq.n	800c60e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800c564:	2d11      	cmp	r5, #17
 800c566:	d05c      	beq.n	800c622 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800c568:	2d0e      	cmp	r5, #14
 800c56a:	d064      	beq.n	800c636 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800c56c:	2301      	movs	r3, #1
 800c56e:	2200      	movs	r2, #0
 800c570:	2107      	movs	r1, #7
 800c572:	2004      	movs	r0, #4
 800c574:	f7ff ff10 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c578:	1b64      	subs	r4, r4, r5
 800c57a:	3416      	adds	r4, #22
 800c57c:	b265      	sxtb	r5, r4
        if (power < -9)
 800c57e:	f115 0f09 	cmn.w	r5, #9
 800c582:	da01      	bge.n	800c588 <SUBGRF_SetTxParams+0x58>
            power = -9;
 800c584:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800c588:	2138      	movs	r1, #56	@ 0x38
 800c58a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c58e:	f7ff fc73 	bl	800be78 <SUBGRF_WriteRegister>
    buf[0] = power;
 800c592:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800c596:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800c59a:	2202      	movs	r2, #2
 800c59c:	a901      	add	r1, sp, #4
 800c59e:	208e      	movs	r0, #142	@ 0x8e
 800c5a0:	f7ff fd30 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c5a4:	b002      	add	sp, #8
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f7fa fbdf 	bl	8006d6c <RBI_GetRFOMaxPowerConfig>
 800c5ae:	4605      	mov	r5, r0
        if (power >  max_power)
 800c5b0:	4284      	cmp	r4, r0
 800c5b2:	dd00      	ble.n	800c5b6 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800c5b4:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800c5b6:	2d0e      	cmp	r5, #14
 800c5b8:	d015      	beq.n	800c5e6 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800c5ba:	2d0a      	cmp	r5, #10
 800c5bc:	d01d      	beq.n	800c5fa <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800c5be:	2301      	movs	r3, #1
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	2007      	movs	r0, #7
 800c5c6:	f7ff fee7 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c5ca:	1b65      	subs	r5, r4, r5
 800c5cc:	350e      	adds	r5, #14
 800c5ce:	b26d      	sxtb	r5, r5
        if (power < -17)
 800c5d0:	f115 0f11 	cmn.w	r5, #17
 800c5d4:	da01      	bge.n	800c5da <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800c5d6:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800c5da:	2118      	movs	r1, #24
 800c5dc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c5e0:	f7ff fc4a 	bl	800be78 <SUBGRF_WriteRegister>
 800c5e4:	e7d5      	b.n	800c592 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	2004      	movs	r0, #4
 800c5ee:	f7ff fed3 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c5f2:	1b65      	subs	r5, r4, r5
 800c5f4:	350e      	adds	r5, #14
 800c5f6:	b26d      	sxtb	r5, r5
 800c5f8:	e7ea      	b.n	800c5d0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fec9 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800c606:	1b65      	subs	r5, r4, r5
 800c608:	350d      	adds	r5, #13
 800c60a:	b26d      	sxtb	r5, r5
 800c60c:	e7e0      	b.n	800c5d0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800c60e:	2301      	movs	r3, #1
 800c610:	2200      	movs	r2, #0
 800c612:	2105      	movs	r1, #5
 800c614:	2003      	movs	r0, #3
 800c616:	f7ff febf 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c61a:	1b65      	subs	r5, r4, r5
 800c61c:	3516      	adds	r5, #22
 800c61e:	b26d      	sxtb	r5, r5
 800c620:	e7ad      	b.n	800c57e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800c622:	2301      	movs	r3, #1
 800c624:	2200      	movs	r2, #0
 800c626:	2103      	movs	r1, #3
 800c628:	2002      	movs	r0, #2
 800c62a:	f7ff feb5 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c62e:	1b65      	subs	r5, r4, r5
 800c630:	3516      	adds	r5, #22
 800c632:	b26d      	sxtb	r5, r5
 800c634:	e7a3      	b.n	800c57e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800c636:	2301      	movs	r3, #1
 800c638:	2200      	movs	r2, #0
 800c63a:	2102      	movs	r1, #2
 800c63c:	4608      	mov	r0, r1
 800c63e:	f7ff feab 	bl	800c398 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c642:	1b65      	subs	r5, r4, r5
 800c644:	350e      	adds	r5, #14
 800c646:	b26d      	sxtb	r5, r5
 800c648:	e799      	b.n	800c57e <SUBGRF_SetTxParams+0x4e>
	...

0800c64c <SUBGRF_SetModulationParams>:
{
 800c64c:	b510      	push	{r4, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c652:	4b3e      	ldr	r3, [pc, #248]	@ (800c74c <SUBGRF_SetModulationParams+0x100>)
 800c654:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c658:	ab02      	add	r3, sp, #8
 800c65a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800c65e:	7820      	ldrb	r0, [r4, #0]
 800c660:	4b3b      	ldr	r3, [pc, #236]	@ (800c750 <SUBGRF_SetModulationParams+0x104>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	4298      	cmp	r0, r3
 800c666:	d106      	bne.n	800c676 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800c668:	7823      	ldrb	r3, [r4, #0]
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d82c      	bhi.n	800c6c8 <SUBGRF_SetModulationParams+0x7c>
 800c66e:	e8df f003 	tbb	[pc, r3]
 800c672:	4205      	.short	0x4205
 800c674:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800c676:	f7ff ff41 	bl	800c4fc <SUBGRF_SetPacketType>
 800c67a:	e7f5      	b.n	800c668 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800c67c:	6862      	ldr	r2, [r4, #4]
 800c67e:	4b35      	ldr	r3, [pc, #212]	@ (800c754 <SUBGRF_SetModulationParams+0x108>)
 800c680:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c684:	0c1a      	lsrs	r2, r3, #16
 800c686:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c68a:	0a1a      	lsrs	r2, r3, #8
 800c68c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c690:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c694:	7b23      	ldrb	r3, [r4, #12]
 800c696:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c69a:	7b63      	ldrb	r3, [r4, #13]
 800c69c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800c6a0:	68a1      	ldr	r1, [r4, #8]
 800c6a2:	4a2d      	ldr	r2, [pc, #180]	@ (800c758 <SUBGRF_SetModulationParams+0x10c>)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	0648      	lsls	r0, r1, #25
 800c6a8:	09c9      	lsrs	r1, r1, #7
 800c6aa:	f7f4 f8d1 	bl	8000850 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c6ae:	0c03      	lsrs	r3, r0, #16
 800c6b0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c6b4:	0a03      	lsrs	r3, r0, #8
 800c6b6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800c6ba:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c6be:	2208      	movs	r2, #8
 800c6c0:	4669      	mov	r1, sp
 800c6c2:	208b      	movs	r0, #139	@ 0x8b
 800c6c4:	f7ff fc9e 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c6c8:	b002      	add	sp, #8
 800c6ca:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800c6cc:	6922      	ldr	r2, [r4, #16]
 800c6ce:	4b21      	ldr	r3, [pc, #132]	@ (800c754 <SUBGRF_SetModulationParams+0x108>)
 800c6d0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c6d4:	0c1a      	lsrs	r2, r3, #16
 800c6d6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c6da:	0a1a      	lsrs	r2, r3, #8
 800c6dc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c6e0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800c6e4:	7d23      	ldrb	r3, [r4, #20]
 800c6e6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c6ea:	2204      	movs	r2, #4
 800c6ec:	4669      	mov	r1, sp
 800c6ee:	208b      	movs	r0, #139	@ 0x8b
 800c6f0:	f7ff fc88 	bl	800c004 <SUBGRF_WriteCommand>
        break;
 800c6f4:	e7e8      	b.n	800c6c8 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c6f6:	7e23      	ldrb	r3, [r4, #24]
 800c6f8:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800c6fc:	7e63      	ldrb	r3, [r4, #25]
 800c6fe:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800c702:	7ea3      	ldrb	r3, [r4, #26]
 800c704:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800c708:	7ee3      	ldrb	r3, [r4, #27]
 800c70a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c70e:	2204      	movs	r2, #4
 800c710:	4669      	mov	r1, sp
 800c712:	208b      	movs	r0, #139	@ 0x8b
 800c714:	f7ff fc76 	bl	800c004 <SUBGRF_WriteCommand>
        break;
 800c718:	e7d6      	b.n	800c6c8 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800c71a:	6862      	ldr	r2, [r4, #4]
 800c71c:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <SUBGRF_SetModulationParams+0x108>)
 800c71e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c722:	0c1a      	lsrs	r2, r3, #16
 800c724:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c728:	0a1a      	lsrs	r2, r3, #8
 800c72a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c72e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c732:	7b23      	ldrb	r3, [r4, #12]
 800c734:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c738:	7b63      	ldrb	r3, [r4, #13]
 800c73a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c73e:	2205      	movs	r2, #5
 800c740:	4669      	mov	r1, sp
 800c742:	208b      	movs	r0, #139	@ 0x8b
 800c744:	f7ff fc5e 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c748:	e7be      	b.n	800c6c8 <SUBGRF_SetModulationParams+0x7c>
 800c74a:	bf00      	nop
 800c74c:	0800ef44 	.word	0x0800ef44
 800c750:	20000665 	.word	0x20000665
 800c754:	3d090000 	.word	0x3d090000
 800c758:	01e84800 	.word	0x01e84800

0800c75c <SUBGRF_SetPacketParams>:
{
 800c75c:	b510      	push	{r4, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c762:	ab01      	add	r3, sp, #4
 800c764:	4a33      	ldr	r2, [pc, #204]	@ (800c834 <SUBGRF_SetPacketParams+0xd8>)
 800c766:	ca07      	ldmia	r2, {r0, r1, r2}
 800c768:	c303      	stmia	r3!, {r0, r1}
 800c76a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800c76c:	7820      	ldrb	r0, [r4, #0]
 800c76e:	4b32      	ldr	r3, [pc, #200]	@ (800c838 <SUBGRF_SetPacketParams+0xdc>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	4298      	cmp	r0, r3
 800c774:	d106      	bne.n	800c784 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800c776:	7823      	ldrb	r3, [r4, #0]
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d82a      	bhi.n	800c7d2 <SUBGRF_SetPacketParams+0x76>
 800c77c:	e8df f003 	tbb	[pc, r3]
 800c780:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800c784:	f7ff feba 	bl	800c4fc <SUBGRF_SetPacketType>
 800c788:	e7f5      	b.n	800c776 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c78a:	7a63      	ldrb	r3, [r4, #9]
 800c78c:	2bf1      	cmp	r3, #241	@ 0xf1
 800c78e:	d022      	beq.n	800c7d6 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c790:	2bf2      	cmp	r3, #242	@ 0xf2
 800c792:	d02a      	beq.n	800c7ea <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c794:	8862      	ldrh	r2, [r4, #2]
 800c796:	0a11      	lsrs	r1, r2, #8
 800c798:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800c79c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c7a0:	7922      	ldrb	r2, [r4, #4]
 800c7a2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800c7a6:	7962      	ldrb	r2, [r4, #5]
 800c7a8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c7ac:	79a2      	ldrb	r2, [r4, #6]
 800c7ae:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800c7b2:	79e2      	ldrb	r2, [r4, #7]
 800c7b4:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c7b8:	7a22      	ldrb	r2, [r4, #8]
 800c7ba:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800c7be:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c7c2:	7aa3      	ldrb	r3, [r4, #10]
 800c7c4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800c7c8:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c7ca:	a901      	add	r1, sp, #4
 800c7cc:	208c      	movs	r0, #140	@ 0x8c
 800c7ce:	f7ff fc19 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c7d2:	b004      	add	sp, #16
 800c7d4:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800c7d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c7da:	f7ff fbb2 	bl	800bf42 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c7de:	f248 0005 	movw	r0, #32773	@ 0x8005
 800c7e2:	f7ff fbc2 	bl	800bf6a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	e7d4      	b.n	800c794 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800c7ea:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800c7ee:	f7ff fba8 	bl	800bf42 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c7f2:	f241 0021 	movw	r0, #4129	@ 0x1021
 800c7f6:	f7ff fbb8 	bl	800bf6a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c7fa:	2306      	movs	r3, #6
 800c7fc:	e7ca      	b.n	800c794 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800c7fe:	7b23      	ldrb	r3, [r4, #12]
 800c800:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800c804:	2201      	movs	r2, #1
        break;
 800c806:	e7e0      	b.n	800c7ca <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c808:	89e3      	ldrh	r3, [r4, #14]
 800c80a:	0a1a      	lsrs	r2, r3, #8
 800c80c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800c810:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c814:	7c23      	ldrb	r3, [r4, #16]
 800c816:	4a09      	ldr	r2, [pc, #36]	@ (800c83c <SUBGRF_SetPacketParams+0xe0>)
 800c818:	7013      	strb	r3, [r2, #0]
 800c81a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c81e:	7c63      	ldrb	r3, [r4, #17]
 800c820:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c824:	7ca3      	ldrb	r3, [r4, #18]
 800c826:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800c82a:	7ce3      	ldrb	r3, [r4, #19]
 800c82c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800c830:	2206      	movs	r2, #6
        break;
 800c832:	e7ca      	b.n	800c7ca <SUBGRF_SetPacketParams+0x6e>
 800c834:	0800ef4c 	.word	0x0800ef4c
 800c838:	20000665 	.word	0x20000665
 800c83c:	20000664 	.word	0x20000664

0800c840 <SUBGRF_SetBufferBaseAddress>:
{
 800c840:	b500      	push	{lr}
 800c842:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800c844:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800c848:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c84c:	2202      	movs	r2, #2
 800c84e:	a901      	add	r1, sp, #4
 800c850:	208f      	movs	r0, #143	@ 0x8f
 800c852:	f7ff fbd7 	bl	800c004 <SUBGRF_WriteCommand>
}
 800c856:	b003      	add	sp, #12
 800c858:	f85d fb04 	ldr.w	pc, [sp], #4

0800c85c <SUBGRF_ReadCommand>:
{
 800c85c:	b510      	push	{r4, lr}
 800c85e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c860:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c864:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c866:	460a      	mov	r2, r1
 800c868:	4601      	mov	r1, r0
 800c86a:	4803      	ldr	r0, [pc, #12]	@ (800c878 <SUBGRF_ReadCommand+0x1c>)
 800c86c:	f7fc fba8 	bl	8008fc0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c870:	f384 8810 	msr	PRIMASK, r4
}
 800c874:	bd10      	pop	{r4, pc}
 800c876:	bf00      	nop
 800c878:	200000c4 	.word	0x200000c4

0800c87c <SUBGRF_GetRssiInst>:
{
 800c87c:	b500      	push	{lr}
 800c87e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c880:	2201      	movs	r2, #1
 800c882:	a901      	add	r1, sp, #4
 800c884:	2015      	movs	r0, #21
 800c886:	f7ff ffe9 	bl	800c85c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800c88a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800c88e:	4240      	negs	r0, r0
}
 800c890:	1040      	asrs	r0, r0, #1
 800c892:	b003      	add	sp, #12
 800c894:	f85d fb04 	ldr.w	pc, [sp], #4

0800c898 <SUBGRF_GetRxBufferStatus>:
{
 800c898:	b530      	push	{r4, r5, lr}
 800c89a:	b083      	sub	sp, #12
 800c89c:	4605      	mov	r5, r0
 800c89e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	a901      	add	r1, sp, #4
 800c8a4:	2013      	movs	r0, #19
 800c8a6:	f7ff ffd9 	bl	800c85c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c8aa:	f7ff fadf 	bl	800be6c <SUBGRF_GetPacketType>
 800c8ae:	2801      	cmp	r0, #1
 800c8b0:	d007      	beq.n	800c8c2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800c8b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c8b6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800c8b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c8bc:	7023      	strb	r3, [r4, #0]
}
 800c8be:	b003      	add	sp, #12
 800c8c0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c8c2:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <SUBGRF_GetRxBufferStatus+0x40>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d1f2      	bne.n	800c8b2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800c8cc:	f240 7002 	movw	r0, #1794	@ 0x702
 800c8d0:	f7ff fae2 	bl	800be98 <SUBGRF_ReadRegister>
 800c8d4:	7028      	strb	r0, [r5, #0]
 800c8d6:	e7ef      	b.n	800c8b8 <SUBGRF_GetRxBufferStatus+0x20>
 800c8d8:	20000664 	.word	0x20000664

0800c8dc <SUBGRF_GetPayload>:
{
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	4606      	mov	r6, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800c8ec:	f10d 0107 	add.w	r1, sp, #7
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f7ff ffd1 	bl	800c898 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800c8f6:	7822      	ldrb	r2, [r4, #0]
 800c8f8:	42aa      	cmp	r2, r5
 800c8fa:	d902      	bls.n	800c902 <SUBGRF_GetPayload+0x26>
        return 1;
 800c8fc:	2001      	movs	r0, #1
}
 800c8fe:	b002      	add	sp, #8
 800c900:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800c902:	4631      	mov	r1, r6
 800c904:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c908:	f7ff fb6c 	bl	800bfe4 <SUBGRF_ReadBuffer>
    return 0;
 800c90c:	2000      	movs	r0, #0
 800c90e:	e7f6      	b.n	800c8fe <SUBGRF_GetPayload+0x22>

0800c910 <SUBGRF_GetPacketStatus>:
{
 800c910:	b510      	push	{r4, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c916:	2203      	movs	r2, #3
 800c918:	a901      	add	r1, sp, #4
 800c91a:	2014      	movs	r0, #20
 800c91c:	f7ff ff9e 	bl	800c85c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800c920:	f7ff faa4 	bl	800be6c <SUBGRF_GetPacketType>
 800c924:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800c926:	b148      	cbz	r0, 800c93c <SUBGRF_GetPacketStatus+0x2c>
 800c928:	2801      	cmp	r0, #1
 800c92a:	d018      	beq.n	800c95e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c92c:	2214      	movs	r2, #20
 800c92e:	2100      	movs	r1, #0
 800c930:	4620      	mov	r0, r4
 800c932:	f000 fb22 	bl	800cf7a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c936:	230f      	movs	r3, #15
 800c938:	7023      	strb	r3, [r4, #0]
}
 800c93a:	e00e      	b.n	800c95a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c93c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c940:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c942:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c946:	425b      	negs	r3, r3
 800c948:	105b      	asrs	r3, r3, #1
 800c94a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c94c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c950:	425b      	negs	r3, r3
 800c952:	105b      	asrs	r3, r3, #1
 800c954:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	60a3      	str	r3, [r4, #8]
}
 800c95a:	b002      	add	sp, #8
 800c95c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c95e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c962:	425b      	negs	r3, r3
 800c964:	105b      	asrs	r3, r3, #1
 800c966:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800c968:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800c96c:	3302      	adds	r3, #2
 800c96e:	109b      	asrs	r3, r3, #2
 800c970:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c972:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c976:	425b      	negs	r3, r3
 800c978:	105b      	asrs	r3, r3, #1
 800c97a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c97c:	4b01      	ldr	r3, [pc, #4]	@ (800c984 <SUBGRF_GetPacketStatus+0x74>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6123      	str	r3, [r4, #16]
            break;
 800c982:	e7ea      	b.n	800c95a <SUBGRF_GetPacketStatus+0x4a>
 800c984:	20000660 	.word	0x20000660

0800c988 <SUBGRF_SetSwitch>:
{
 800c988:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800c98a:	2901      	cmp	r1, #1
 800c98c:	d003      	beq.n	800c996 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c98e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800c990:	f7fa f9dc 	bl	8006d4c <RBI_ConfigRFSwitch>
}
 800c994:	bd10      	pop	{r4, pc}
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800c99a:	2c01      	cmp	r4, #1
 800c99c:	d003      	beq.n	800c9a6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 800c99e:	2c02      	cmp	r4, #2
 800c9a0:	d1f6      	bne.n	800c990 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 800c9a2:	2003      	movs	r0, #3
 800c9a4:	e7f4      	b.n	800c990 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c9a6:	2004      	movs	r0, #4
 800c9a8:	f7ff fa86 	bl	800beb8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800c9ac:	2002      	movs	r0, #2
 800c9ae:	e7f6      	b.n	800c99e <SUBGRF_SetSwitch+0x16>

0800c9b0 <SUBGRF_SetRfTxPower>:
{
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800c9b4:	f7fa f9ce 	bl	8006d54 <RBI_GetTxConfig>
    switch (TxConfig)
 800c9b8:	b148      	cbz	r0, 800c9ce <SUBGRF_SetRfTxPower+0x1e>
 800c9ba:	2802      	cmp	r0, #2
 800c9bc:	d10d      	bne.n	800c9da <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 800c9be:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fdb3 	bl	800c530 <SUBGRF_SetTxParams>
}
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 800c9ce:	2c0f      	cmp	r4, #15
 800c9d0:	dc01      	bgt.n	800c9d6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 800c9d2:	2501      	movs	r5, #1
 800c9d4:	e7f4      	b.n	800c9c0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800c9d6:	2502      	movs	r5, #2
 800c9d8:	e7f2      	b.n	800c9c0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800c9da:	2501      	movs	r5, #1
 800c9dc:	e7f0      	b.n	800c9c0 <SUBGRF_SetRfTxPower+0x10>

0800c9de <SUBGRF_GetRadioWakeUpTime>:
}
 800c9de:	2001      	movs	r0, #1
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <HAL_SUBGHZ_TxCpltCallback>:
{
 800c9e4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c9e6:	4b02      	ldr	r3, [pc, #8]	@ (800c9f0 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	4798      	blx	r3
}
 800c9ee:	bd08      	pop	{r3, pc}
 800c9f0:	20000658 	.word	0x20000658

0800c9f4 <HAL_SUBGHZ_RxCpltCallback>:
{
 800c9f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c9f6:	4b02      	ldr	r3, [pc, #8]	@ (800ca00 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2002      	movs	r0, #2
 800c9fc:	4798      	blx	r3
}
 800c9fe:	bd08      	pop	{r3, pc}
 800ca00:	20000658 	.word	0x20000658

0800ca04 <HAL_SUBGHZ_CRCErrorCallback>:
{
 800ca04:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ca06:	4b02      	ldr	r3, [pc, #8]	@ (800ca10 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2040      	movs	r0, #64	@ 0x40
 800ca0c:	4798      	blx	r3
}
 800ca0e:	bd08      	pop	{r3, pc}
 800ca10:	20000658 	.word	0x20000658

0800ca14 <HAL_SUBGHZ_CADStatusCallback>:
{
 800ca14:	b508      	push	{r3, lr}
    switch (cadstatus)
 800ca16:	b111      	cbz	r1, 800ca1e <HAL_SUBGHZ_CADStatusCallback+0xa>
 800ca18:	2901      	cmp	r1, #1
 800ca1a:	d005      	beq.n	800ca28 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 800ca1c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ca1e:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2080      	movs	r0, #128	@ 0x80
 800ca24:	4798      	blx	r3
            break;
 800ca26:	e7f9      	b.n	800ca1c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ca28:	4b02      	ldr	r3, [pc, #8]	@ (800ca34 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ca30:	4798      	blx	r3
}
 800ca32:	e7f3      	b.n	800ca1c <HAL_SUBGHZ_CADStatusCallback+0x8>
 800ca34:	20000658 	.word	0x20000658

0800ca38 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800ca38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800ca3a:	4b03      	ldr	r3, [pc, #12]	@ (800ca48 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ca42:	4798      	blx	r3
}
 800ca44:	bd08      	pop	{r3, pc}
 800ca46:	bf00      	nop
 800ca48:	20000658 	.word	0x20000658

0800ca4c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 800ca4c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ca4e:	4b02      	ldr	r3, [pc, #8]	@ (800ca58 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2020      	movs	r0, #32
 800ca54:	4798      	blx	r3
}
 800ca56:	bd08      	pop	{r3, pc}
 800ca58:	20000658 	.word	0x20000658

0800ca5c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 800ca5c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ca5e:	4b02      	ldr	r3, [pc, #8]	@ (800ca68 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2004      	movs	r0, #4
 800ca64:	4798      	blx	r3
}
 800ca66:	bd08      	pop	{r3, pc}
 800ca68:	20000658 	.word	0x20000658

0800ca6c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 800ca6c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ca6e:	4b02      	ldr	r3, [pc, #8]	@ (800ca78 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2008      	movs	r0, #8
 800ca74:	4798      	blx	r3
}
 800ca76:	bd08      	pop	{r3, pc}
 800ca78:	20000658 	.word	0x20000658

0800ca7c <HAL_SUBGHZ_HeaderValidCallback>:
{
 800ca7c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ca7e:	4b02      	ldr	r3, [pc, #8]	@ (800ca88 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2010      	movs	r0, #16
 800ca84:	4798      	blx	r3
}
 800ca86:	bd08      	pop	{r3, pc}
 800ca88:	20000658 	.word	0x20000658

0800ca8c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 800ca8c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ca8e:	4b03      	ldr	r3, [pc, #12]	@ (800ca9c <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ca96:	4798      	blx	r3
}
 800ca98:	bd08      	pop	{r3, pc}
 800ca9a:	bf00      	nop
 800ca9c:	20000658 	.word	0x20000658

0800caa0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800caa0:	4601      	mov	r1, r0
 800caa2:	b180      	cbz	r0, 800cac6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800caa4:	2300      	movs	r3, #0
 800caa6:	2b15      	cmp	r3, #21
 800caa8:	d80c      	bhi.n	800cac4 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800caaa:	4a08      	ldr	r2, [pc, #32]	@ (800cacc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800caac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cab0:	428a      	cmp	r2, r1
 800cab2:	d802      	bhi.n	800caba <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800cab4:	3301      	adds	r3, #1
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	e7f5      	b.n	800caa6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800caba:	4a04      	ldr	r2, [pc, #16]	@ (800cacc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800cabc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cac0:	7918      	ldrb	r0, [r3, #4]
 800cac2:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 800cac4:	e7fe      	b.n	800cac4 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 800cac6:	201f      	movs	r0, #31
}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	0800f240 	.word	0x0800f240

0800cad0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800cad8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb50 <SUBGRF_GetCFO+0x80>)
 800cada:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800cadc:	f640 0007 	movw	r0, #2055	@ 0x807
 800cae0:	f7ff f9da 	bl	800be98 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800cae4:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800cae8:	3308      	adds	r3, #8
 800caea:	446b      	add	r3, sp
 800caec:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 800caf0:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800caf4:	3301      	adds	r3, #1
 800caf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cafa:	4a16      	ldr	r2, [pc, #88]	@ (800cb54 <SUBGRF_GetCFO+0x84>)
 800cafc:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800cb00:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800cb04:	2807      	cmp	r0, #7
 800cb06:	d921      	bls.n	800cb4c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800cb08:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800cb0a:	fb03 f000 	mul.w	r0, r3, r0
 800cb0e:	2803      	cmp	r0, #3
 800cb10:	d800      	bhi.n	800cb14 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 800cb12:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800cb14:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800cb18:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800cb1c:	f7ff f9bc 	bl	800be98 <SUBGRF_ReadRegister>
 800cb20:	0206      	lsls	r6, r0, #8
 800cb22:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800cb26:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800cb2a:	f7ff f9b5 	bl	800be98 <SUBGRF_ReadRegister>
 800cb2e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800cb30:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800cb34:	d003      	beq.n	800cb3e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 800cb36:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800cb3a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800cb3e:	096b      	lsrs	r3, r5, #5
 800cb40:	fb03 f000 	mul.w	r0, r3, r0
 800cb44:	11c0      	asrs	r0, r0, #7
 800cb46:	6020      	str	r0, [r4, #0]
}
 800cb48:	b002      	add	sp, #8
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e7dc      	b.n	800cb0a <SUBGRF_GetCFO+0x3a>
 800cb50:	0c0a0804 	.word	0x0c0a0804
 800cb54:	01e84800 	.word	0x01e84800

0800cb58 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800cb58:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5c:	4770      	bx	lr

0800cb5e <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800cb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb62:	4770      	bx	lr

0800cb64 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	4770      	bx	lr

0800cb6a <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800cb6a:	4770      	bx	lr

0800cb6c <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	4770      	bx	lr

0800cb70 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800cb70:	2000      	movs	r0, #0
 800cb72:	4770      	bx	lr

0800cb74 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800cb74:	4770      	bx	lr

0800cb76 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 800cb76:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7a:	4770      	bx	lr

0800cb7c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb80:	4770      	bx	lr

0800cb82 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800cb82:	4770      	bx	lr

0800cb84 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800cb84:	4770      	bx	lr

0800cb86 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800cb86:	4770      	bx	lr

0800cb88 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800cb88:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb8a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800cb90:	4b1e      	ldr	r3, [pc, #120]	@ (800cc0c <TRACE_AllocateBufer+0x84>)
 800cb92:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800cb96:	8a1a      	ldrh	r2, [r3, #16]
 800cb98:	4596      	cmp	lr, r2
 800cb9a:	d011      	beq.n	800cbc0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cb9c:	4596      	cmp	lr, r2
 800cb9e:	d921      	bls.n	800cbe4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cba0:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800cba4:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800cba6:	4283      	cmp	r3, r0
 800cba8:	d81f      	bhi.n	800cbea <TRACE_AllocateBufer+0x62>
 800cbaa:	4282      	cmp	r2, r0
 800cbac:	d91d      	bls.n	800cbea <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cbae:	4b17      	ldr	r3, [pc, #92]	@ (800cc0c <TRACE_AllocateBufer+0x84>)
 800cbb0:	2401      	movs	r4, #1
 800cbb2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cbb4:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cbb8:	2400      	movs	r4, #0
 800cbba:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	e014      	b.n	800cbea <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cbc0:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800cbc4:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800cbc6:	4298      	cmp	r0, r3
 800cbc8:	d30f      	bcc.n	800cbea <TRACE_AllocateBufer+0x62>
 800cbca:	4282      	cmp	r2, r0
 800cbcc:	d90d      	bls.n	800cbea <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cbce:	4b0f      	ldr	r3, [pc, #60]	@ (800cc0c <TRACE_AllocateBufer+0x84>)
 800cbd0:	2401      	movs	r4, #1
 800cbd2:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cbd4:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cbd8:	f04f 0e00 	mov.w	lr, #0
 800cbdc:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	e002      	b.n	800cbea <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800cbe4:	eba2 020e 	sub.w	r2, r2, lr
 800cbe8:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800cbea:	4283      	cmp	r3, r0
 800cbec:	d90a      	bls.n	800cc04 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800cbee:	4a07      	ldr	r2, [pc, #28]	@ (800cc0c <TRACE_AllocateBufer+0x84>)
 800cbf0:	8a53      	ldrh	r3, [r2, #18]
 800cbf2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cbf4:	4403      	add	r3, r0
 800cbf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbfa:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800cbfc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfe:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800cc02:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e7f9      	b.n	800cbfe <TRACE_AllocateBufer+0x76>
 800cc0a:	bf00      	nop
 800cc0c:	20000968 	.word	0x20000968

0800cc10 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cc14:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800cc16:	4a03      	ldr	r2, [pc, #12]	@ (800cc24 <TRACE_Lock+0x14>)
 800cc18:	8ad3      	ldrh	r3, [r2, #22]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cc22:	4770      	bx	lr
 800cc24:	20000968 	.word	0x20000968

0800cc28 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cc2c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800cc2e:	4a03      	ldr	r2, [pc, #12]	@ (800cc3c <TRACE_UnLock+0x14>)
 800cc30:	8ad3      	ldrh	r3, [r2, #22]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc36:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cc3a:	4770      	bx	lr
 800cc3c:	20000968 	.word	0x20000968

0800cc40 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800cc40:	4b02      	ldr	r3, [pc, #8]	@ (800cc4c <TRACE_IsLocked+0xc>)
 800cc42:	8ad8      	ldrh	r0, [r3, #22]
}
 800cc44:	3800      	subs	r0, #0
 800cc46:	bf18      	it	ne
 800cc48:	2001      	movne	r0, #1
 800cc4a:	4770      	bx	lr
 800cc4c:	20000968 	.word	0x20000968

0800cc50 <UTIL_ADV_TRACE_Init>:
{
 800cc50:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800cc52:	2218      	movs	r2, #24
 800cc54:	2100      	movs	r1, #0
 800cc56:	4807      	ldr	r0, [pc, #28]	@ (800cc74 <UTIL_ADV_TRACE_Init+0x24>)
 800cc58:	f000 f98f 	bl	800cf7a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800cc5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc60:	2100      	movs	r1, #0
 800cc62:	4805      	ldr	r0, [pc, #20]	@ (800cc78 <UTIL_ADV_TRACE_Init+0x28>)
 800cc64:	f000 f989 	bl	800cf7a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800cc68:	4b04      	ldr	r3, [pc, #16]	@ (800cc7c <UTIL_ADV_TRACE_Init+0x2c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4804      	ldr	r0, [pc, #16]	@ (800cc80 <UTIL_ADV_TRACE_Init+0x30>)
 800cc6e:	4798      	blx	r3
}
 800cc70:	bd08      	pop	{r3, pc}
 800cc72:	bf00      	nop
 800cc74:	20000968 	.word	0x20000968
 800cc78:	20000768 	.word	0x20000768
 800cc7c:	0800efbc 	.word	0x0800efbc
 800cc80:	0800ce01 	.word	0x0800ce01

0800cc84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800cc84:	4b01      	ldr	r3, [pc, #4]	@ (800cc8c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800cc86:	6058      	str	r0, [r3, #4]
}
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	20000968 	.word	0x20000968

0800cc90 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800cc90:	4b01      	ldr	r3, [pc, #4]	@ (800cc98 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800cc92:	7218      	strb	r0, [r3, #8]
}
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	20000968 	.word	0x20000968

0800cc9c <TRACE_Send>:
{
 800cc9c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc9e:	f3ef 8310 	mrs	r3, PRIMASK
 800cca2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800cca4:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 800cca6:	f7ff ffcb 	bl	800cc40 <TRACE_IsLocked>
 800ccaa:	b118      	cbz	r0, 800ccb4 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccac:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800ccb0:	2000      	movs	r0, #0
}
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 800ccb4:	f7ff ffac 	bl	800cc10 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ccb8:	4b1c      	ldr	r3, [pc, #112]	@ (800cd2c <TRACE_Send+0x90>)
 800ccba:	8a1a      	ldrh	r2, [r3, #16]
 800ccbc:	8a5b      	ldrh	r3, [r3, #18]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d02e      	beq.n	800cd20 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ccc2:	491a      	ldr	r1, [pc, #104]	@ (800cd2c <TRACE_Send+0x90>)
 800ccc4:	7889      	ldrb	r1, [r1, #2]
 800ccc6:	2901      	cmp	r1, #1
 800ccc8:	d017      	beq.n	800ccfa <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ccca:	4a18      	ldr	r2, [pc, #96]	@ (800cd2c <TRACE_Send+0x90>)
 800cccc:	7892      	ldrb	r2, [r2, #2]
 800ccce:	b932      	cbnz	r2, 800ccde <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ccd0:	4a16      	ldr	r2, [pc, #88]	@ (800cd2c <TRACE_Send+0x90>)
 800ccd2:	8a12      	ldrh	r2, [r2, #16]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d91e      	bls.n	800cd16 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ccd8:	1a9b      	subs	r3, r3, r2
 800ccda:	4a14      	ldr	r2, [pc, #80]	@ (800cd2c <TRACE_Send+0x90>)
 800ccdc:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ccde:	4e13      	ldr	r6, [pc, #76]	@ (800cd2c <TRACE_Send+0x90>)
 800cce0:	8a35      	ldrh	r5, [r6, #16]
 800cce2:	4b13      	ldr	r3, [pc, #76]	@ (800cd30 <TRACE_Send+0x94>)
 800cce4:	441d      	add	r5, r3
 800cce6:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 800ccea:	f7f4 f977 	bl	8000fdc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ccee:	4b11      	ldr	r3, [pc, #68]	@ (800cd34 <TRACE_Send+0x98>)
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	8ab1      	ldrh	r1, [r6, #20]
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	4798      	blx	r3
 800ccf8:	e7db      	b.n	800ccb2 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ccfa:	480c      	ldr	r0, [pc, #48]	@ (800cd2c <TRACE_Send+0x90>)
 800ccfc:	8801      	ldrh	r1, [r0, #0]
 800ccfe:	1a8a      	subs	r2, r1, r2
 800cd00:	b292      	uxth	r2, r2
 800cd02:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cd04:	2102      	movs	r1, #2
 800cd06:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cd08:	2100      	movs	r1, #0
 800cd0a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d1dc      	bne.n	800ccca <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cd10:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cd12:	8201      	strh	r1, [r0, #16]
 800cd14:	e7d9      	b.n	800ccca <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800cd16:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800cd1a:	4b04      	ldr	r3, [pc, #16]	@ (800cd2c <TRACE_Send+0x90>)
 800cd1c:	829a      	strh	r2, [r3, #20]
 800cd1e:	e7de      	b.n	800ccde <TRACE_Send+0x42>
      TRACE_UnLock();
 800cd20:	f7ff ff82 	bl	800cc28 <TRACE_UnLock>
 800cd24:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800cd28:	2000      	movs	r0, #0
}
 800cd2a:	e7c2      	b.n	800ccb2 <TRACE_Send+0x16>
 800cd2c:	20000968 	.word	0x20000968
 800cd30:	20000768 	.word	0x20000768
 800cd34:	0800efbc 	.word	0x0800efbc

0800cd38 <UTIL_ADV_TRACE_COND_FSend>:
{
 800cd38:	b408      	push	{r3}
 800cd3a:	b530      	push	{r4, r5, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 800cd40:	2300      	movs	r3, #0
 800cd42:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cd46:	4b2b      	ldr	r3, [pc, #172]	@ (800cdf4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800cd48:	7a1b      	ldrb	r3, [r3, #8]
 800cd4a:	4283      	cmp	r3, r0
 800cd4c:	d34c      	bcc.n	800cde8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800cd4e:	4b29      	ldr	r3, [pc, #164]	@ (800cdf4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	4399      	bics	r1, r3
 800cd54:	d14b      	bne.n	800cdee <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800cd56:	4b27      	ldr	r3, [pc, #156]	@ (800cdf4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	b123      	cbz	r3, 800cd66 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 800cd5c:	b11a      	cbz	r2, 800cd66 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800cd5e:	f10d 0102 	add.w	r1, sp, #2
 800cd62:	a801      	add	r0, sp, #4
 800cd64:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800cd66:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd68:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd70:	4821      	ldr	r0, [pc, #132]	@ (800cdf8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800cd72:	f000 fc1b 	bl	800d5ac <tiny_vsnprintf_like>
 800cd76:	b285      	uxth	r5, r0
  TRACE_Lock();
 800cd78:	f7ff ff4a 	bl	800cc10 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cd7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cd80:	18e8      	adds	r0, r5, r3
 800cd82:	4669      	mov	r1, sp
 800cd84:	b280      	uxth	r0, r0
 800cd86:	f7ff feff 	bl	800cb88 <TRACE_AllocateBufer>
 800cd8a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cd8e:	d026      	beq.n	800cdde <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800cd90:	2300      	movs	r3, #0
 800cd92:	e00d      	b.n	800cdb0 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cd94:	f8bd 2000 	ldrh.w	r2, [sp]
 800cd98:	f103 0118 	add.w	r1, r3, #24
 800cd9c:	4469      	add	r1, sp
 800cd9e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800cda2:	4916      	ldr	r1, [pc, #88]	@ (800cdfc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800cda4:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800cda6:	3201      	adds	r2, #1
 800cda8:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cdac:	3301      	adds	r3, #1
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d8ed      	bhi.n	800cd94 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cdb8:	f8bd 0000 	ldrh.w	r0, [sp]
 800cdbc:	9b05      	ldr	r3, [sp, #20]
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cdc4:	4c0d      	ldr	r4, [pc, #52]	@ (800cdfc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800cdc6:	4420      	add	r0, r4
 800cdc8:	f000 fbf0 	bl	800d5ac <tiny_vsnprintf_like>
    TRACE_UnLock();
 800cdcc:	f7ff ff2c 	bl	800cc28 <TRACE_UnLock>
    return TRACE_Send();
 800cdd0:	f7ff ff64 	bl	800cc9c <TRACE_Send>
}
 800cdd4:	b006      	add	sp, #24
 800cdd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdda:	b001      	add	sp, #4
 800cddc:	4770      	bx	lr
  TRACE_UnLock();
 800cdde:	f7ff ff23 	bl	800cc28 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800cde2:	f06f 0002 	mvn.w	r0, #2
 800cde6:	e7f5      	b.n	800cdd4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 800cde8:	f06f 0004 	mvn.w	r0, #4
 800cdec:	e7f2      	b.n	800cdd4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800cdee:	f06f 0005 	mvn.w	r0, #5
 800cdf2:	e7ef      	b.n	800cdd4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800cdf4:	20000968 	.word	0x20000968
 800cdf8:	20000668 	.word	0x20000668
 800cdfc:	20000768 	.word	0x20000768

0800ce00 <TRACE_TxCpltCallback>:
{
 800ce00:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce02:	f3ef 8310 	mrs	r3, PRIMASK
 800ce06:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800ce08:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800ce0a:	4b26      	ldr	r3, [pc, #152]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce0c:	789b      	ldrb	r3, [r3, #2]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d016      	beq.n	800ce40 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ce12:	4a24      	ldr	r2, [pc, #144]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce14:	8a13      	ldrh	r3, [r2, #16]
 800ce16:	8a90      	ldrh	r0, [r2, #20]
 800ce18:	4403      	add	r3, r0
 800ce1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800ce20:	4b20      	ldr	r3, [pc, #128]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce22:	8a1a      	ldrh	r2, [r3, #16]
 800ce24:	8a5b      	ldrh	r3, [r3, #18]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d003      	beq.n	800ce32 <TRACE_TxCpltCallback+0x32>
 800ce2a:	481e      	ldr	r0, [pc, #120]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce2c:	8ac0      	ldrh	r0, [r0, #22]
 800ce2e:	2801      	cmp	r0, #1
 800ce30:	d00b      	beq.n	800ce4a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce32:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800ce36:	f7f4 f8d7 	bl	8000fe8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800ce3a:	f7ff fef5 	bl	800cc28 <TRACE_UnLock>
}
 800ce3e:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ce40:	4b18      	ldr	r3, [pc, #96]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ce46:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800ce48:	e7ea      	b.n	800ce20 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ce4a:	4816      	ldr	r0, [pc, #88]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce4c:	7880      	ldrb	r0, [r0, #2]
 800ce4e:	2801      	cmp	r0, #1
 800ce50:	d014      	beq.n	800ce7c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ce52:	4a14      	ldr	r2, [pc, #80]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce54:	7892      	ldrb	r2, [r2, #2]
 800ce56:	b932      	cbnz	r2, 800ce66 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ce58:	4a12      	ldr	r2, [pc, #72]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce5a:	8a12      	ldrh	r2, [r2, #16]
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d91b      	bls.n	800ce98 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ce60:	1a9b      	subs	r3, r3, r2
 800ce62:	4a10      	ldr	r2, [pc, #64]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce64:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ce66:	4b0f      	ldr	r3, [pc, #60]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce68:	8a18      	ldrh	r0, [r3, #16]
 800ce6a:	4a0f      	ldr	r2, [pc, #60]	@ (800cea8 <TRACE_TxCpltCallback+0xa8>)
 800ce6c:	4410      	add	r0, r2
 800ce6e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ce72:	4a0e      	ldr	r2, [pc, #56]	@ (800ceac <TRACE_TxCpltCallback+0xac>)
 800ce74:	68d2      	ldr	r2, [r2, #12]
 800ce76:	8a99      	ldrh	r1, [r3, #20]
 800ce78:	4790      	blx	r2
 800ce7a:	e7e0      	b.n	800ce3e <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ce7c:	4c09      	ldr	r4, [pc, #36]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce7e:	8820      	ldrh	r0, [r4, #0]
 800ce80:	1a82      	subs	r2, r0, r2
 800ce82:	b292      	uxth	r2, r2
 800ce84:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ce86:	2002      	movs	r0, #2
 800ce88:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	d1df      	bne.n	800ce52 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ce92:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ce94:	8220      	strh	r0, [r4, #16]
 800ce96:	e7dc      	b.n	800ce52 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ce98:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800ce9c:	4b01      	ldr	r3, [pc, #4]	@ (800cea4 <TRACE_TxCpltCallback+0xa4>)
 800ce9e:	829a      	strh	r2, [r3, #20]
 800cea0:	e7e1      	b.n	800ce66 <TRACE_TxCpltCallback+0x66>
 800cea2:	bf00      	nop
 800cea4:	20000968 	.word	0x20000968
 800cea8:	20000768 	.word	0x20000768
 800ceac:	0800efbc 	.word	0x0800efbc

0800ceb0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4a02      	ldr	r2, [pc, #8]	@ (800cebc <UTIL_LPM_Init+0xc>)
 800ceb4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ceb6:	4a02      	ldr	r2, [pc, #8]	@ (800cec0 <UTIL_LPM_Init+0x10>)
 800ceb8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ceba:	4770      	bx	lr
 800cebc:	20000984 	.word	0x20000984
 800cec0:	20000980 	.word	0x20000980

0800cec4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cec8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800ceca:	b141      	cbz	r1, 800cede <UTIL_LPM_SetStopMode+0x1a>
 800cecc:	2901      	cmp	r1, #1
 800cece:	d103      	bne.n	800ced8 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ced0:	4906      	ldr	r1, [pc, #24]	@ (800ceec <UTIL_LPM_SetStopMode+0x28>)
 800ced2:	680a      	ldr	r2, [r1, #0]
 800ced4:	4302      	orrs	r2, r0
 800ced6:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cedc:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800cede:	4903      	ldr	r1, [pc, #12]	@ (800ceec <UTIL_LPM_SetStopMode+0x28>)
 800cee0:	680a      	ldr	r2, [r1, #0]
 800cee2:	ea22 0200 	bic.w	r2, r2, r0
 800cee6:	600a      	str	r2, [r1, #0]
      break;
 800cee8:	e7f6      	b.n	800ced8 <UTIL_LPM_SetStopMode+0x14>
 800ceea:	bf00      	nop
 800ceec:	20000984 	.word	0x20000984

0800cef0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cef0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cef4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800cef6:	b141      	cbz	r1, 800cf0a <UTIL_LPM_SetOffMode+0x1a>
 800cef8:	2901      	cmp	r1, #1
 800cefa:	d103      	bne.n	800cf04 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cefc:	4906      	ldr	r1, [pc, #24]	@ (800cf18 <UTIL_LPM_SetOffMode+0x28>)
 800cefe:	680a      	ldr	r2, [r1, #0]
 800cf00:	4302      	orrs	r2, r0
 800cf02:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf04:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cf08:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800cf0a:	4903      	ldr	r1, [pc, #12]	@ (800cf18 <UTIL_LPM_SetOffMode+0x28>)
 800cf0c:	680a      	ldr	r2, [r1, #0]
 800cf0e:	ea22 0200 	bic.w	r2, r2, r0
 800cf12:	600a      	str	r2, [r1, #0]
      break;
 800cf14:	e7f6      	b.n	800cf04 <UTIL_LPM_SetOffMode+0x14>
 800cf16:	bf00      	nop
 800cf18:	20000980 	.word	0x20000980

0800cf1c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800cf1c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf1e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cf22:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800cf24:	4b0c      	ldr	r3, [pc, #48]	@ (800cf58 <UTIL_LPM_EnterLowPower+0x3c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	b13b      	cbz	r3, 800cf3a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800cf2a:	4d0c      	ldr	r5, [pc, #48]	@ (800cf5c <UTIL_LPM_EnterLowPower+0x40>)
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800cf30:	686b      	ldr	r3, [r5, #4]
 800cf32:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf34:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800cf38:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800cf3a:	4b09      	ldr	r3, [pc, #36]	@ (800cf60 <UTIL_LPM_EnterLowPower+0x44>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	b12b      	cbz	r3, 800cf4c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800cf40:	4d06      	ldr	r5, [pc, #24]	@ (800cf5c <UTIL_LPM_EnterLowPower+0x40>)
 800cf42:	68ab      	ldr	r3, [r5, #8]
 800cf44:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800cf46:	68eb      	ldr	r3, [r5, #12]
 800cf48:	4798      	blx	r3
 800cf4a:	e7f3      	b.n	800cf34 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800cf4c:	4d03      	ldr	r5, [pc, #12]	@ (800cf5c <UTIL_LPM_EnterLowPower+0x40>)
 800cf4e:	692b      	ldr	r3, [r5, #16]
 800cf50:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800cf52:	696b      	ldr	r3, [r5, #20]
 800cf54:	4798      	blx	r3
 800cf56:	e7ed      	b.n	800cf34 <UTIL_LPM_EnterLowPower+0x18>
 800cf58:	20000984 	.word	0x20000984
 800cf5c:	0800ef58 	.word	0x0800ef58
 800cf60:	20000980 	.word	0x20000980

0800cf64 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800cf64:	e004      	b.n	800cf70 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800cf66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf6a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800cf6e:	461a      	mov	r2, r3
 800cf70:	1e53      	subs	r3, r2, #1
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	d1f6      	bne.n	800cf66 <UTIL_MEM_cpy_8+0x2>
    }
}
 800cf78:	4770      	bx	lr

0800cf7a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800cf7a:	e002      	b.n	800cf82 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800cf7c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800cf80:	461a      	mov	r2, r3
 800cf82:	1e53      	subs	r3, r2, #1
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	d1f8      	bne.n	800cf7c <UTIL_MEM_set_8+0x2>
  }
}
 800cf8a:	4770      	bx	lr

0800cf8c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800cf8c:	4770      	bx	lr

0800cf8e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800cf8e:	4770      	bx	lr

0800cf90 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cf90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf94:	d216      	bcs.n	800cfc4 <SEQ_BitPosition+0x34>
 800cf96:	0400      	lsls	r0, r0, #16
 800cf98:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cf9a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800cf9e:	d202      	bcs.n	800cfa6 <SEQ_BitPosition+0x16>
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cfa6:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800cfaa:	d202      	bcs.n	800cfb2 <SEQ_BitPosition+0x22>
 800cfac:	3304      	adds	r3, #4
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cfb2:	0f00      	lsrs	r0, r0, #28
 800cfb4:	4a04      	ldr	r2, [pc, #16]	@ (800cfc8 <SEQ_BitPosition+0x38>)
 800cfb6:	5c10      	ldrb	r0, [r2, r0]
 800cfb8:	4418      	add	r0, r3
 800cfba:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 800cfbc:	f1c0 001f 	rsb	r0, r0, #31
}
 800cfc0:	b2c0      	uxtb	r0, r0
 800cfc2:	4770      	bx	lr
uint8_t n = 0U;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	e7e8      	b.n	800cf9a <SEQ_BitPosition+0xa>
 800cfc8:	0800f2f0 	.word	0x0800f2f0

0800cfcc <UTIL_SEQ_Run>:
{
 800cfcc:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 800cfce:	4b42      	ldr	r3, [pc, #264]	@ (800d0d8 <UTIL_SEQ_Run+0x10c>)
 800cfd0:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800cfd2:	4020      	ands	r0, r4
 800cfd4:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800cfd6:	4b41      	ldr	r3, [pc, #260]	@ (800d0dc <UTIL_SEQ_Run+0x110>)
 800cfd8:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800cfda:	4b41      	ldr	r3, [pc, #260]	@ (800d0e0 <UTIL_SEQ_Run+0x114>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 800cfde:	4941      	ldr	r1, [pc, #260]	@ (800d0e4 <UTIL_SEQ_Run+0x118>)
 800cfe0:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 800cfe2:	4941      	ldr	r1, [pc, #260]	@ (800d0e8 <UTIL_SEQ_Run+0x11c>)
 800cfe4:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cfe6:	e02f      	b.n	800d048 <UTIL_SEQ_Run+0x7c>
      counter++;
 800cfe8:	3301      	adds	r3, #1
 800cfea:	e034      	b.n	800d056 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cfec:	4d3f      	ldr	r5, [pc, #252]	@ (800d0ec <UTIL_SEQ_Run+0x120>)
 800cfee:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cff2:	6868      	ldr	r0, [r5, #4]
 800cff4:	4010      	ands	r0, r2
 800cff6:	f7ff ffcb 	bl	800cf90 <SEQ_BitPosition>
 800cffa:	4e3d      	ldr	r6, [pc, #244]	@ (800d0f0 <UTIL_SEQ_Run+0x124>)
 800cffc:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cffe:	686a      	ldr	r2, [r5, #4]
 800d000:	2301      	movs	r3, #1
 800d002:	fa03 f000 	lsl.w	r0, r3, r0
 800d006:	ea22 0200 	bic.w	r2, r2, r0
 800d00a:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d00c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d010:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d012:	6832      	ldr	r2, [r6, #0]
 800d014:	fa03 f202 	lsl.w	r2, r3, r2
 800d018:	43d6      	mvns	r6, r2
 800d01a:	4d30      	ldr	r5, [pc, #192]	@ (800d0dc <UTIL_SEQ_Run+0x110>)
 800d01c:	6828      	ldr	r0, [r5, #0]
 800d01e:	ea20 0202 	bic.w	r2, r0, r2
 800d022:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d024:	2b00      	cmp	r3, #0
 800d026:	d12d      	bne.n	800d084 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d028:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800d02c:	4b30      	ldr	r3, [pc, #192]	@ (800d0f0 <UTIL_SEQ_Run+0x124>)
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	4b30      	ldr	r3, [pc, #192]	@ (800d0f4 <UTIL_SEQ_Run+0x128>)
 800d032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d036:	4798      	blx	r3
    local_taskset = TaskSet;
 800d038:	4b28      	ldr	r3, [pc, #160]	@ (800d0dc <UTIL_SEQ_Run+0x110>)
 800d03a:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 800d03c:	4b28      	ldr	r3, [pc, #160]	@ (800d0e0 <UTIL_SEQ_Run+0x114>)
 800d03e:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 800d040:	4928      	ldr	r1, [pc, #160]	@ (800d0e4 <UTIL_SEQ_Run+0x118>)
 800d042:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 800d044:	4928      	ldr	r1, [pc, #160]	@ (800d0e8 <UTIL_SEQ_Run+0x11c>)
 800d046:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d048:	4002      	ands	r2, r0
 800d04a:	4d23      	ldr	r5, [pc, #140]	@ (800d0d8 <UTIL_SEQ_Run+0x10c>)
 800d04c:	682d      	ldr	r5, [r5, #0]
 800d04e:	422a      	tst	r2, r5
 800d050:	d020      	beq.n	800d094 <UTIL_SEQ_Run+0xc8>
 800d052:	400b      	ands	r3, r1
 800d054:	d11e      	bne.n	800d094 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d056:	4a25      	ldr	r2, [pc, #148]	@ (800d0ec <UTIL_SEQ_Run+0x120>)
 800d058:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d05c:	4002      	ands	r2, r0
 800d05e:	422a      	tst	r2, r5
 800d060:	d0c2      	beq.n	800cfe8 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d062:	4922      	ldr	r1, [pc, #136]	@ (800d0ec <UTIL_SEQ_Run+0x120>)
 800d064:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800d068:	4002      	ands	r2, r0
 800d06a:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d06c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d070:	6849      	ldr	r1, [r1, #4]
 800d072:	4211      	tst	r1, r2
 800d074:	d1ba      	bne.n	800cfec <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d076:	491d      	ldr	r1, [pc, #116]	@ (800d0ec <UTIL_SEQ_Run+0x120>)
 800d078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d07c:	f04f 30ff 	mov.w	r0, #4294967295
 800d080:	6048      	str	r0, [r1, #4]
 800d082:	e7b3      	b.n	800cfec <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d084:	3b01      	subs	r3, #1
 800d086:	4819      	ldr	r0, [pc, #100]	@ (800d0ec <UTIL_SEQ_Run+0x120>)
 800d088:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800d08c:	4032      	ands	r2, r6
 800d08e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d092:	e7c7      	b.n	800d024 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d094:	4b16      	ldr	r3, [pc, #88]	@ (800d0f0 <UTIL_SEQ_Run+0x124>)
 800d096:	f04f 32ff 	mov.w	r2, #4294967295
 800d09a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d09c:	f7ff ff76 	bl	800cf8c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d0a4:	b672      	cpsid	i
  local_taskset = TaskSet;
 800d0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d0dc <UTIL_SEQ_Run+0x110>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 800d0aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d0e0 <UTIL_SEQ_Run+0x114>)
 800d0ac:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800d0ae:	4a0d      	ldr	r2, [pc, #52]	@ (800d0e4 <UTIL_SEQ_Run+0x118>)
 800d0b0:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	4a08      	ldr	r2, [pc, #32]	@ (800d0d8 <UTIL_SEQ_Run+0x10c>)
 800d0b6:	6812      	ldr	r2, [r2, #0]
 800d0b8:	4213      	tst	r3, r2
 800d0ba:	d103      	bne.n	800d0c4 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 800d0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e8 <UTIL_SEQ_Run+0x11c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	420b      	tst	r3, r1
 800d0c2:	d006      	beq.n	800d0d2 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c4:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800d0c8:	f7ff ff61 	bl	800cf8e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800d0cc:	4b02      	ldr	r3, [pc, #8]	@ (800d0d8 <UTIL_SEQ_Run+0x10c>)
 800d0ce:	601c      	str	r4, [r3, #0]
}
 800d0d0:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 800d0d2:	f7f3 ff7f 	bl	8000fd4 <UTIL_SEQ_Idle>
 800d0d6:	e7f5      	b.n	800d0c4 <UTIL_SEQ_Run+0xf8>
 800d0d8:	2000000c 	.word	0x2000000c
 800d0dc:	200009a0 	.word	0x200009a0
 800d0e0:	2000099c 	.word	0x2000099c
 800d0e4:	20000010 	.word	0x20000010
 800d0e8:	20000998 	.word	0x20000998
 800d0ec:	20000988 	.word	0x20000988
 800d0f0:	20000994 	.word	0x20000994
 800d0f4:	20000990 	.word	0x20000990

0800d0f8 <UTIL_SEQ_RegTask>:
{
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d100:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d102:	f7ff ff45 	bl	800cf90 <SEQ_BitPosition>
 800d106:	4b03      	ldr	r3, [pc, #12]	@ (800d114 <UTIL_SEQ_RegTask+0x1c>)
 800d108:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d10c:	f385 8810 	msr	PRIMASK, r5
}
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	bf00      	nop
 800d114:	20000990 	.word	0x20000990

0800d118 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800d118:	b082      	sub	sp, #8
 800d11a:	b082      	sub	sp, #8
 800d11c:	f10d 0c08 	add.w	ip, sp, #8
 800d120:	e90c 0006 	stmdb	ip, {r1, r2}
 800d124:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800d126:	2200      	movs	r2, #0
 800d128:	6002      	str	r2, [r0, #0]
 800d12a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800d12c:	440b      	add	r3, r1
 800d12e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d130:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800d134:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d138:	440a      	add	r2, r1
 800d13a:	b291      	uxth	r1, r2
 800d13c:	b212      	sxth	r2, r2
 800d13e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 800d140:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800d144:	db04      	blt.n	800d150 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800d146:	3301      	adds	r3, #1
 800d148:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800d14a:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 800d14e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 800d150:	b002      	add	sp, #8
 800d152:	b002      	add	sp, #8
 800d154:	4770      	bx	lr
	...

0800d158 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800d158:	b530      	push	{r4, r5, lr}
 800d15a:	b087      	sub	sp, #28
 800d15c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d15e:	2300      	movs	r3, #0
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800d166:	6003      	str	r3, [r0, #0]
 800d168:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d16a:	4d0b      	ldr	r5, [pc, #44]	@ (800d198 <SysTimeGet+0x40>)
 800d16c:	692b      	ldr	r3, [r5, #16]
 800d16e:	a805      	add	r0, sp, #20
 800d170:	4798      	blx	r3
 800d172:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d174:	68eb      	ldr	r3, [r5, #12]
 800d176:	4798      	blx	r3
 800d178:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d17c:	686b      	ldr	r3, [r5, #4]
 800d17e:	4798      	blx	r3
 800d180:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800d182:	9b05      	ldr	r3, [sp, #20]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	9b04      	ldr	r3, [sp, #16]
 800d188:	aa02      	add	r2, sp, #8
 800d18a:	ca06      	ldmia	r2, {r1, r2}
 800d18c:	4620      	mov	r0, r4
 800d18e:	f7ff ffc3 	bl	800d118 <SysTimeAdd>

  return sysTime;
}
 800d192:	4620      	mov	r0, r4
 800d194:	b007      	add	sp, #28
 800d196:	bd30      	pop	{r4, r5, pc}
 800d198:	0800ef7c 	.word	0x0800ef7c

0800d19c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800d19c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800d19e:	4b03      	ldr	r3, [pc, #12]	@ (800d1ac <UTIL_TIMER_Init+0x10>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800d1a4:	4b02      	ldr	r3, [pc, #8]	@ (800d1b0 <UTIL_TIMER_Init+0x14>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4798      	blx	r3
}
 800d1aa:	bd08      	pop	{r3, pc}
 800d1ac:	200009a4 	.word	0x200009a4
 800d1b0:	0800ef90 	.word	0x0800ef90

0800d1b4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800d1b4:	b1a8      	cbz	r0, 800d1e2 <UTIL_TIMER_Create+0x2e>
{
 800d1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b8:	4617      	mov	r7, r2
 800d1ba:	461e      	mov	r6, r3
 800d1bc:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800d1be:	b193      	cbz	r3, 800d1e6 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d1c4:	4b09      	ldr	r3, [pc, #36]	@ (800d1ec <UTIL_TIMER_Create+0x38>)
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	4798      	blx	r3
 800d1cc:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800d1ce:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800d1d0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800d1d2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800d1d4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800d1d6:	9b06      	ldr	r3, [sp, #24]
 800d1d8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800d1da:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800d1dc:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800d1de:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800d1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800d1e2:	2001      	movs	r0, #1
}
 800d1e4:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	e7fa      	b.n	800d1e0 <UTIL_TIMER_Create+0x2c>
 800d1ea:	bf00      	nop
 800d1ec:	0800ef90 	.word	0x0800ef90

0800d1f0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d1f0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d1f2:	4c03      	ldr	r4, [pc, #12]	@ (800d200 <UTIL_TIMER_GetCurrentTime+0x10>)
 800d1f4:	69e3      	ldr	r3, [r4, #28]
 800d1f6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800d1f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d1fa:	4798      	blx	r3
}
 800d1fc:	bd10      	pop	{r4, pc}
 800d1fe:	bf00      	nop
 800d200:	0800ef90 	.word	0x0800ef90

0800d204 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d208:	4d05      	ldr	r5, [pc, #20]	@ (800d220 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800d20a:	69eb      	ldr	r3, [r5, #28]
 800d20c:	4798      	blx	r3
 800d20e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d210:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d212:	4630      	mov	r0, r6
 800d214:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d216:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d218:	1a20      	subs	r0, r4, r0
 800d21a:	4798      	blx	r3
}
 800d21c:	bd70      	pop	{r4, r5, r6, pc}
 800d21e:	bf00      	nop
 800d220:	0800ef90 	.word	0x0800ef90

0800d224 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d224:	4b05      	ldr	r3, [pc, #20]	@ (800d23c <TimerExists+0x18>)
 800d226:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800d228:	e000      	b.n	800d22c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800d22a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800d22c:	b11b      	cbz	r3, 800d236 <TimerExists+0x12>
    if( cur == TimerObject )
 800d22e:	4283      	cmp	r3, r0
 800d230:	d1fb      	bne.n	800d22a <TimerExists+0x6>
      return true;
 800d232:	2001      	movs	r0, #1
  }
  return false;
}
 800d234:	4770      	bx	lr
  return false;
 800d236:	2000      	movs	r0, #0
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	200009a4 	.word	0x200009a4

0800d240 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d242:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d244:	4e09      	ldr	r6, [pc, #36]	@ (800d26c <TimerSetTimeout+0x2c>)
 800d246:	6a33      	ldr	r3, [r6, #32]
 800d248:	4798      	blx	r3
 800d24a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800d24c:	2301      	movs	r3, #1
 800d24e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d250:	6827      	ldr	r7, [r4, #0]
 800d252:	69b6      	ldr	r6, [r6, #24]
 800d254:	47b0      	blx	r6
 800d256:	4428      	add	r0, r5
 800d258:	4287      	cmp	r7, r0
 800d25a:	d202      	bcs.n	800d262 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d25c:	47b0      	blx	r6
 800d25e:	4428      	add	r0, r5
 800d260:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d262:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <TimerSetTimeout+0x2c>)
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	4798      	blx	r3
}
 800d26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d26c:	0800ef90 	.word	0x0800ef90

0800d270 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800d270:	b368      	cbz	r0, 800d2ce <UTIL_TIMER_Stop+0x5e>
{
 800d272:	b510      	push	{r4, lr}
 800d274:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d276:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d27a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d27c:	4b15      	ldr	r3, [pc, #84]	@ (800d2d4 <UTIL_TIMER_Stop+0x64>)
 800d27e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800d280:	2301      	movs	r3, #1
 800d282:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800d284:	b1e1      	cbz	r1, 800d2c0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d28a:	4288      	cmp	r0, r1
 800d28c:	d006      	beq.n	800d29c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d28e:	460b      	mov	r3, r1
        while( cur != NULL )
 800d290:	b1b3      	cbz	r3, 800d2c0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800d292:	4293      	cmp	r3, r2
 800d294:	d011      	beq.n	800d2ba <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800d296:	4619      	mov	r1, r3
            cur = cur->Next;
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	e7f9      	b.n	800d290 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 800d29c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800d29e:	6948      	ldr	r0, [r1, #20]
 800d2a0:	b120      	cbz	r0, 800d2ac <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800d2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d4 <UTIL_TIMER_Stop+0x64>)
 800d2a4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800d2a6:	f7ff ffcb 	bl	800d240 <TimerSetTimeout>
 800d2aa:	e009      	b.n	800d2c0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d8 <UTIL_TIMER_Stop+0x68>)
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	4798      	blx	r3
            TimerListHead = NULL;
 800d2b2:	4b08      	ldr	r3, [pc, #32]	@ (800d2d4 <UTIL_TIMER_Stop+0x64>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	e002      	b.n	800d2c0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	b123      	cbz	r3, 800d2c8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800d2be:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2c0:	f384 8810 	msr	PRIMASK, r4
}
 800d2c4:	2000      	movs	r0, #0
}
 800d2c6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	614b      	str	r3, [r1, #20]
 800d2cc:	e7f8      	b.n	800d2c0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800d2ce:	2001      	movs	r0, #1
}
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	200009a4 	.word	0x200009a4
 800d2d8:	0800ef90 	.word	0x0800ef90

0800d2dc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d2dc:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <TimerInsertTimer+0x28>)
 800d2de:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d2e0:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800d2e2:	e001      	b.n	800d2e8 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800d2e4:	461a      	mov	r2, r3
        next = next->Next;
 800d2e6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800d2e8:	6951      	ldr	r1, [r2, #20]
 800d2ea:	b139      	cbz	r1, 800d2fc <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800d2ec:	6819      	ldr	r1, [r3, #0]
 800d2ee:	f8d0 c000 	ldr.w	ip, [r0]
 800d2f2:	458c      	cmp	ip, r1
 800d2f4:	d8f6      	bhi.n	800d2e4 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800d2f6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800d2f8:	6143      	str	r3, [r0, #20]
        return;
 800d2fa:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800d2fc:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800d2fe:	2300      	movs	r3, #0
 800d300:	6143      	str	r3, [r0, #20]
}
 800d302:	4770      	bx	lr
 800d304:	200009a4 	.word	0x200009a4

0800d308 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d308:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d30a:	4b05      	ldr	r3, [pc, #20]	@ (800d320 <TimerInsertNewHeadTimer+0x18>)
 800d30c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800d30e:	b10b      	cbz	r3, 800d314 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 800d310:	2200      	movs	r2, #0
 800d312:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d314:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800d316:	4b02      	ldr	r3, [pc, #8]	@ (800d320 <TimerInsertNewHeadTimer+0x18>)
 800d318:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800d31a:	f7ff ff91 	bl	800d240 <TimerSetTimeout>
}
 800d31e:	bd08      	pop	{r3, pc}
 800d320:	200009a4 	.word	0x200009a4

0800d324 <UTIL_TIMER_Start>:
{
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d326:	2800      	cmp	r0, #0
 800d328:	d036      	beq.n	800d398 <UTIL_TIMER_Start+0x74>
 800d32a:	4604      	mov	r4, r0
 800d32c:	f7ff ff7a 	bl	800d224 <TimerExists>
 800d330:	2800      	cmp	r0, #0
 800d332:	d134      	bne.n	800d39e <UTIL_TIMER_Start+0x7a>
 800d334:	7a65      	ldrb	r5, [r4, #9]
 800d336:	2d00      	cmp	r5, #0
 800d338:	d133      	bne.n	800d3a2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d33a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d33e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 800d340:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d342:	4b19      	ldr	r3, [pc, #100]	@ (800d3a8 <UTIL_TIMER_Start+0x84>)
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	4798      	blx	r3
    if( ticks < minValue )
 800d348:	4287      	cmp	r7, r0
 800d34a:	d300      	bcc.n	800d34e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800d34c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800d34e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800d350:	2300      	movs	r3, #0
 800d352:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800d354:	2201      	movs	r2, #1
 800d356:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800d358:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800d35a:	4b14      	ldr	r3, [pc, #80]	@ (800d3ac <UTIL_TIMER_Start+0x88>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	b183      	cbz	r3, 800d382 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d360:	4b11      	ldr	r3, [pc, #68]	@ (800d3a8 <UTIL_TIMER_Start+0x84>)
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	4418      	add	r0, r3
 800d36a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d36c:	4b0f      	ldr	r3, [pc, #60]	@ (800d3ac <UTIL_TIMER_Start+0x88>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4298      	cmp	r0, r3
 800d374:	d20c      	bcs.n	800d390 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800d376:	4620      	mov	r0, r4
 800d378:	f7ff ffc6 	bl	800d308 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d37c:	f386 8810 	msr	PRIMASK, r6
}
 800d380:	e00b      	b.n	800d39a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800d382:	4b09      	ldr	r3, [pc, #36]	@ (800d3a8 <UTIL_TIMER_Start+0x84>)
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff ffbd 	bl	800d308 <TimerInsertNewHeadTimer>
 800d38e:	e7f5      	b.n	800d37c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800d390:	4620      	mov	r0, r4
 800d392:	f7ff ffa3 	bl	800d2dc <TimerInsertTimer>
 800d396:	e7f1      	b.n	800d37c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d398:	2501      	movs	r5, #1
}
 800d39a:	4628      	mov	r0, r5
 800d39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d39e:	2501      	movs	r5, #1
 800d3a0:	e7fb      	b.n	800d39a <UTIL_TIMER_Start+0x76>
 800d3a2:	2501      	movs	r5, #1
 800d3a4:	e7f9      	b.n	800d39a <UTIL_TIMER_Start+0x76>
 800d3a6:	bf00      	nop
 800d3a8:	0800ef90 	.word	0x0800ef90
 800d3ac:	200009a4 	.word	0x200009a4

0800d3b0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800d3b0:	b198      	cbz	r0, 800d3da <UTIL_TIMER_SetPeriod+0x2a>
{
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e0 <UTIL_TIMER_SetPeriod+0x30>)
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ba:	4608      	mov	r0, r1
 800d3bc:	4798      	blx	r3
 800d3be:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7ff ff2f 	bl	800d224 <TimerExists>
 800d3c6:	b908      	cbnz	r0, 800d3cc <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d3c8:	2000      	movs	r0, #0
}
 800d3ca:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f7ff ff4f 	bl	800d270 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f7ff ffa6 	bl	800d324 <UTIL_TIMER_Start>
 800d3d8:	e7f7      	b.n	800d3ca <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d3da:	2001      	movs	r0, #1
}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	0800ef90 	.word	0x0800ef90

0800d3e4 <UTIL_TIMER_IRQ_Handler>:
{
 800d3e4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d3ea:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d3ec:	4c1e      	ldr	r4, [pc, #120]	@ (800d468 <UTIL_TIMER_IRQ_Handler+0x84>)
 800d3ee:	6963      	ldr	r3, [r4, #20]
 800d3f0:	4798      	blx	r3
 800d3f2:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800d3f8:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800d3fa:	4b1c      	ldr	r3, [pc, #112]	@ (800d46c <UTIL_TIMER_IRQ_Handler+0x88>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	b923      	cbnz	r3, 800d40a <UTIL_TIMER_IRQ_Handler+0x26>
 800d400:	e018      	b.n	800d434 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800d406:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800d408:	b1a3      	cbz	r3, 800d434 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	42a2      	cmp	r2, r4
 800d40e:	d9f8      	bls.n	800d402 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 800d410:	1a31      	subs	r1, r6, r0
 800d412:	440a      	add	r2, r1
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e7f6      	b.n	800d406 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800d418:	4b14      	ldr	r3, [pc, #80]	@ (800d46c <UTIL_TIMER_IRQ_Handler+0x88>)
 800d41a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 800d41c:	6962      	ldr	r2, [r4, #20]
 800d41e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800d424:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800d426:	68e3      	ldr	r3, [r4, #12]
 800d428:	6920      	ldr	r0, [r4, #16]
 800d42a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d42c:	8963      	ldrh	r3, [r4, #10]
 800d42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d432:	d012      	beq.n	800d45a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d434:	4b0d      	ldr	r3, [pc, #52]	@ (800d46c <UTIL_TIMER_IRQ_Handler+0x88>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	b13b      	cbz	r3, 800d44a <UTIL_TIMER_IRQ_Handler+0x66>
 800d43a:	681c      	ldr	r4, [r3, #0]
 800d43c:	2c00      	cmp	r4, #0
 800d43e:	d0eb      	beq.n	800d418 <UTIL_TIMER_IRQ_Handler+0x34>
 800d440:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <UTIL_TIMER_IRQ_Handler+0x84>)
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	4798      	blx	r3
 800d446:	4284      	cmp	r4, r0
 800d448:	d3e6      	bcc.n	800d418 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d44a:	4b08      	ldr	r3, [pc, #32]	@ (800d46c <UTIL_TIMER_IRQ_Handler+0x88>)
 800d44c:	6818      	ldr	r0, [r3, #0]
 800d44e:	b108      	cbz	r0, 800d454 <UTIL_TIMER_IRQ_Handler+0x70>
 800d450:	7a03      	ldrb	r3, [r0, #8]
 800d452:	b133      	cbz	r3, 800d462 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d454:	f385 8810 	msr	PRIMASK, r5
}
 800d458:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800d45a:	4620      	mov	r0, r4
 800d45c:	f7ff ff62 	bl	800d324 <UTIL_TIMER_Start>
 800d460:	e7e8      	b.n	800d434 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 800d462:	f7ff feed 	bl	800d240 <TimerSetTimeout>
 800d466:	e7f5      	b.n	800d454 <UTIL_TIMER_IRQ_Handler+0x70>
 800d468:	0800ef90 	.word	0x0800ef90
 800d46c:	200009a4 	.word	0x200009a4

0800d470 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800d470:	4601      	mov	r1, r0
  int i = 0;
 800d472:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d474:	e008      	b.n	800d488 <ee_skip_atoi+0x18>
 800d476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d47a:	1c53      	adds	r3, r2, #1
 800d47c:	600b      	str	r3, [r1, #0]
 800d47e:	7813      	ldrb	r3, [r2, #0]
 800d480:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d484:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800d488:	680a      	ldr	r2, [r1, #0]
 800d48a:	7813      	ldrb	r3, [r2, #0]
 800d48c:	3b30      	subs	r3, #48	@ 0x30
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b09      	cmp	r3, #9
 800d492:	d9f0      	bls.n	800d476 <ee_skip_atoi+0x6>
  return i;
}
 800d494:	4770      	bx	lr
	...

0800d498 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800d498:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800d49c:	b093      	sub	sp, #76	@ 0x4c
 800d49e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d4a0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800d4a2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800d4a6:	d110      	bne.n	800d4ca <ee_number+0x32>
  char *dig = lower_digits;
 800d4a8:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800d5a4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800d4ac:	1e9f      	subs	r7, r3, #2
 800d4ae:	2f22      	cmp	r7, #34	@ 0x22
 800d4b0:	d875      	bhi.n	800d59e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800d4b2:	f016 0401 	ands.w	r4, r6, #1
 800d4b6:	d00b      	beq.n	800d4d0 <ee_number+0x38>
 800d4b8:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 800d4bc:	f016 0f02 	tst.w	r6, #2
 800d4c0:	d00f      	beq.n	800d4e2 <ee_number+0x4a>
  {
    if (num < 0)
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	db07      	blt.n	800d4d6 <ee_number+0x3e>
  sign = 0;
 800d4c6:	2700      	movs	r7, #0
 800d4c8:	e00c      	b.n	800d4e4 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800d4ca:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800d5a8 <ee_number+0x110>
 800d4ce:	e7ed      	b.n	800d4ac <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800d4d0:	f04f 0e20 	mov.w	lr, #32
 800d4d4:	e7f2      	b.n	800d4bc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800d4d6:	4252      	negs	r2, r2
      size--;
 800d4d8:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d4da:	3e01      	subs	r6, #1
 800d4dc:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 800d4de:	272d      	movs	r7, #45	@ 0x2d
 800d4e0:	e000      	b.n	800d4e4 <ee_number+0x4c>
  sign = 0;
 800d4e2:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 800d4e4:	bb5a      	cbnz	r2, 800d53e <ee_number+0xa6>
    tmp[i++] = '0';
 800d4e6:	2330      	movs	r3, #48	@ 0x30
 800d4e8:	f88d 3004 	strb.w	r3, [sp, #4]
 800d4ec:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800d4f0:	45ac      	cmp	ip, r5
 800d4f2:	dd00      	ble.n	800d4f6 <ee_number+0x5e>
 800d4f4:	4665      	mov	r5, ip
  size -= precision;
 800d4f6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d4f8:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d4fa:	b31c      	cbz	r4, 800d544 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 800d4fc:	b11f      	cbz	r7, 800d506 <ee_number+0x6e>
 800d4fe:	f800 7b01 	strb.w	r7, [r0], #1
 800d502:	3901      	subs	r1, #1
 800d504:	d007      	beq.n	800d516 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800d506:	2b00      	cmp	r3, #0
 800d508:	f103 33ff 	add.w	r3, r3, #4294967295
 800d50c:	dd24      	ble.n	800d558 <ee_number+0xc0>
 800d50e:	f800 eb01 	strb.w	lr, [r0], #1
 800d512:	3901      	subs	r1, #1
 800d514:	d1f7      	bne.n	800d506 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800d516:	b013      	add	sp, #76	@ 0x4c
 800d518:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d51c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d520:	fb03 2216 	mls	r2, r3, r6, r2
 800d524:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800d528:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800d52c:	446a      	add	r2, sp
 800d52e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800d532:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d534:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d1ef      	bne.n	800d51c <ee_number+0x84>
 800d53c:	e7d8      	b.n	800d4f0 <ee_number+0x58>
  i = 0;
 800d53e:	f04f 0c00 	mov.w	ip, #0
 800d542:	e7f9      	b.n	800d538 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d544:	2b00      	cmp	r3, #0
 800d546:	f103 33ff 	add.w	r3, r3, #4294967295
 800d54a:	ddd7      	ble.n	800d4fc <ee_number+0x64>
 800d54c:	2220      	movs	r2, #32
 800d54e:	f800 2b01 	strb.w	r2, [r0], #1
 800d552:	3901      	subs	r1, #1
 800d554:	d1f6      	bne.n	800d544 <ee_number+0xac>
 800d556:	e7de      	b.n	800d516 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800d558:	4565      	cmp	r5, ip
 800d55a:	f105 35ff 	add.w	r5, r5, #4294967295
 800d55e:	dd05      	ble.n	800d56c <ee_number+0xd4>
 800d560:	2230      	movs	r2, #48	@ 0x30
 800d562:	f800 2b01 	strb.w	r2, [r0], #1
 800d566:	3901      	subs	r1, #1
 800d568:	d1f6      	bne.n	800d558 <ee_number+0xc0>
 800d56a:	e7d4      	b.n	800d516 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800d56c:	4662      	mov	r2, ip
 800d56e:	2a00      	cmp	r2, #0
 800d570:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d574:	dd09      	ble.n	800d58a <ee_number+0xf2>
 800d576:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800d57a:	446a      	add	r2, sp
 800d57c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800d580:	f800 2b01 	strb.w	r2, [r0], #1
 800d584:	3901      	subs	r1, #1
 800d586:	d1f1      	bne.n	800d56c <ee_number+0xd4>
 800d588:	e7c5      	b.n	800d516 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d590:	ddc1      	ble.n	800d516 <ee_number+0x7e>
 800d592:	2220      	movs	r2, #32
 800d594:	f800 2b01 	strb.w	r2, [r0], #1
 800d598:	3901      	subs	r1, #1
 800d59a:	d1f6      	bne.n	800d58a <ee_number+0xf2>
 800d59c:	e7bb      	b.n	800d516 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e7b9      	b.n	800d516 <ee_number+0x7e>
 800d5a2:	bf00      	nop
 800d5a4:	0800f300 	.word	0x0800f300
 800d5a8:	0800f328 	.word	0x0800f328

0800d5ac <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800d5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	b087      	sub	sp, #28
 800d5b2:	9205      	str	r2, [sp, #20]
 800d5b4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800d5b6:	1e0f      	subs	r7, r1, #0
 800d5b8:	f340 80b8 	ble.w	800d72c <tiny_vsnprintf_like+0x180>
 800d5bc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d5be:	4604      	mov	r4, r0
 800d5c0:	e004      	b.n	800d5cc <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800d5c2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d5c6:	9b05      	ldr	r3, [sp, #20]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	9305      	str	r3, [sp, #20]
 800d5cc:	9905      	ldr	r1, [sp, #20]
 800d5ce:	780a      	ldrb	r2, [r1, #0]
 800d5d0:	b922      	cbnz	r2, 800d5dc <tiny_vsnprintf_like+0x30>
 800d5d2:	1ba3      	subs	r3, r4, r6
 800d5d4:	1e78      	subs	r0, r7, #1
 800d5d6:	4283      	cmp	r3, r0
 800d5d8:	f2c0 80a2 	blt.w	800d720 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 800d5dc:	1ba3      	subs	r3, r4, r6
 800d5de:	f107 38ff 	add.w	r8, r7, #4294967295
 800d5e2:	4543      	cmp	r3, r8
 800d5e4:	f280 809c 	bge.w	800d720 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800d5e8:	2a25      	cmp	r2, #37	@ 0x25
 800d5ea:	d1ea      	bne.n	800d5c2 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800d5ec:	1c4b      	adds	r3, r1, #1
 800d5ee:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800d5f0:	784b      	ldrb	r3, [r1, #1]
 800d5f2:	2b30      	cmp	r3, #48	@ 0x30
 800d5f4:	d020      	beq.n	800d638 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800d5f6:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800d5fa:	3b30      	subs	r3, #48	@ 0x30
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b09      	cmp	r3, #9
 800d600:	d91d      	bls.n	800d63e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800d602:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800d606:	9b05      	ldr	r3, [sp, #20]
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800d60e:	2b20      	cmp	r3, #32
 800d610:	d867      	bhi.n	800d6e2 <tiny_vsnprintf_like+0x136>
 800d612:	e8df f003 	tbb	[pc, r3]
 800d616:	664a      	.short	0x664a
 800d618:	66666666 	.word	0x66666666
 800d61c:	66666666 	.word	0x66666666
 800d620:	66621e66 	.word	0x66621e66
 800d624:	62666666 	.word	0x62666666
 800d628:	66666666 	.word	0x66666666
 800d62c:	66666666 	.word	0x66666666
 800d630:	19662866 	.word	0x19662866
 800d634:	6666      	.short	0x6666
 800d636:	7c          	.byte	0x7c
 800d637:	00          	.byte	0x00
      flags |= ZEROPAD;
 800d638:	f04f 0901 	mov.w	r9, #1
 800d63c:	e7dd      	b.n	800d5fa <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 800d63e:	a805      	add	r0, sp, #20
 800d640:	f7ff ff16 	bl	800d470 <ee_skip_atoi>
 800d644:	4605      	mov	r5, r0
 800d646:	e7de      	b.n	800d606 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800d648:	230a      	movs	r3, #10
 800d64a:	e031      	b.n	800d6b0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800d64c:	2320      	movs	r3, #32
 800d64e:	f804 3b01 	strb.w	r3, [r4], #1
 800d652:	3d01      	subs	r5, #1
 800d654:	2d00      	cmp	r5, #0
 800d656:	dcf9      	bgt.n	800d64c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	1d1a      	adds	r2, r3, #4
 800d65c:	9204      	str	r2, [sp, #16]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800d664:	e7af      	b.n	800d5c6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 800d666:	9b04      	ldr	r3, [sp, #16]
 800d668:	1d1a      	adds	r2, r3, #4
 800d66a:	9204      	str	r2, [sp, #16]
 800d66c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800d670:	f1b8 0f00 	cmp.w	r8, #0
 800d674:	d003      	beq.n	800d67e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 800d676:	4640      	mov	r0, r8
 800d678:	f7f2 fd82 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800d67c:	e006      	b.n	800d68c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800d67e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800d730 <tiny_vsnprintf_like+0x184>
 800d682:	e7f8      	b.n	800d676 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 800d684:	2220      	movs	r2, #32
 800d686:	f804 2b01 	strb.w	r2, [r4], #1
 800d68a:	461d      	mov	r5, r3
 800d68c:	1e6b      	subs	r3, r5, #1
 800d68e:	4285      	cmp	r5, r0
 800d690:	dcf8      	bgt.n	800d684 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d692:	2200      	movs	r2, #0
 800d694:	e006      	b.n	800d6a4 <tiny_vsnprintf_like+0xf8>
 800d696:	4643      	mov	r3, r8
 800d698:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d69c:	f804 1b01 	strb.w	r1, [r4], #1
 800d6a0:	3201      	adds	r2, #1
 800d6a2:	4698      	mov	r8, r3
 800d6a4:	4282      	cmp	r2, r0
 800d6a6:	dbf6      	blt.n	800d696 <tiny_vsnprintf_like+0xea>
 800d6a8:	e78d      	b.n	800d5c6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800d6aa:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 800d6ae:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800d6b0:	f019 0f02 	tst.w	r9, #2
 800d6b4:	d02f      	beq.n	800d716 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 800d6b6:	9a04      	ldr	r2, [sp, #16]
 800d6b8:	1d11      	adds	r1, r2, #4
 800d6ba:	9104      	str	r1, [sp, #16]
 800d6bc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d6be:	1ba1      	subs	r1, r4, r6
 800d6c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	9001      	str	r0, [sp, #4]
 800d6ca:	9500      	str	r5, [sp, #0]
 800d6cc:	eba8 0101 	sub.w	r1, r8, r1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7ff fee1 	bl	800d498 <ee_number>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	e775      	b.n	800d5c6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800d6da:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800d6de:	230a      	movs	r3, #10
 800d6e0:	e7e6      	b.n	800d6b0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800d6e2:	2a25      	cmp	r2, #37	@ 0x25
 800d6e4:	d002      	beq.n	800d6ec <tiny_vsnprintf_like+0x140>
 800d6e6:	2325      	movs	r3, #37	@ 0x25
 800d6e8:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d6ec:	1ba3      	subs	r3, r4, r6
 800d6ee:	4598      	cmp	r8, r3
 800d6f0:	dd0f      	ble.n	800d712 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800d6f2:	9b05      	ldr	r3, [sp, #20]
 800d6f4:	781a      	ldrb	r2, [r3, #0]
 800d6f6:	b13a      	cbz	r2, 800d708 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800d6f8:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d6fc:	1ba3      	subs	r3, r4, r6
 800d6fe:	4598      	cmp	r8, r3
 800d700:	f73f af61 	bgt.w	800d5c6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 800d704:	230a      	movs	r3, #10
 800d706:	e7d3      	b.n	800d6b0 <tiny_vsnprintf_like+0x104>
          --fmt;
 800d708:	3b01      	subs	r3, #1
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	e7f6      	b.n	800d6fc <tiny_vsnprintf_like+0x150>
        base = 16;
 800d70e:	2310      	movs	r3, #16
 800d710:	e7ce      	b.n	800d6b0 <tiny_vsnprintf_like+0x104>
    base = 10;
 800d712:	230a      	movs	r3, #10
 800d714:	e7cc      	b.n	800d6b0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800d716:	9a04      	ldr	r2, [sp, #16]
 800d718:	1d11      	adds	r1, r2, #4
 800d71a:	9104      	str	r1, [sp, #16]
 800d71c:	6812      	ldr	r2, [r2, #0]
 800d71e:	e7ce      	b.n	800d6be <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 800d720:	2300      	movs	r3, #0
 800d722:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800d724:	1ba0      	subs	r0, r4, r6
}
 800d726:	b007      	add	sp, #28
 800d728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800d72c:	2000      	movs	r0, #0
 800d72e:	e7fa      	b.n	800d726 <tiny_vsnprintf_like+0x17a>
 800d730:	0800f350 	.word	0x0800f350

0800d734 <_ZdlPvj>:
 800d734:	f000 b815 	b.w	800d762 <_ZdlPv>

0800d738 <_ZdaPv>:
 800d738:	f000 b813 	b.w	800d762 <_ZdlPv>

0800d73c <_Znwj>:
 800d73c:	2801      	cmp	r0, #1
 800d73e:	bf38      	it	cc
 800d740:	2001      	movcc	r0, #1
 800d742:	b510      	push	{r4, lr}
 800d744:	4604      	mov	r4, r0
 800d746:	4620      	mov	r0, r4
 800d748:	f000 f842 	bl	800d7d0 <malloc>
 800d74c:	b100      	cbz	r0, 800d750 <_Znwj+0x14>
 800d74e:	bd10      	pop	{r4, pc}
 800d750:	f000 f80a 	bl	800d768 <_ZSt15get_new_handlerv>
 800d754:	b908      	cbnz	r0, 800d75a <_Znwj+0x1e>
 800d756:	f000 f833 	bl	800d7c0 <abort>
 800d75a:	4780      	blx	r0
 800d75c:	e7f3      	b.n	800d746 <_Znwj+0xa>

0800d75e <_Znaj>:
 800d75e:	f7ff bfed 	b.w	800d73c <_Znwj>

0800d762 <_ZdlPv>:
 800d762:	f000 b83d 	b.w	800d7e0 <free>
	...

0800d768 <_ZSt15get_new_handlerv>:
 800d768:	4b02      	ldr	r3, [pc, #8]	@ (800d774 <_ZSt15get_new_handlerv+0xc>)
 800d76a:	6818      	ldr	r0, [r3, #0]
 800d76c:	f3bf 8f5b 	dmb	ish
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	200009a8 	.word	0x200009a8

0800d778 <roundf>:
 800d778:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d77c:	3b7f      	subs	r3, #127	@ 0x7f
 800d77e:	2b16      	cmp	r3, #22
 800d780:	b510      	push	{r4, lr}
 800d782:	4601      	mov	r1, r0
 800d784:	dc14      	bgt.n	800d7b0 <roundf+0x38>
 800d786:	2b00      	cmp	r3, #0
 800d788:	da07      	bge.n	800d79a <roundf+0x22>
 800d78a:	3301      	adds	r3, #1
 800d78c:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800d790:	d101      	bne.n	800d796 <roundf+0x1e>
 800d792:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800d796:	4608      	mov	r0, r1
 800d798:	bd10      	pop	{r4, pc}
 800d79a:	4a08      	ldr	r2, [pc, #32]	@ (800d7bc <roundf+0x44>)
 800d79c:	411a      	asrs	r2, r3
 800d79e:	4202      	tst	r2, r0
 800d7a0:	d0f9      	beq.n	800d796 <roundf+0x1e>
 800d7a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d7a6:	4119      	asrs	r1, r3
 800d7a8:	4401      	add	r1, r0
 800d7aa:	ea21 0102 	bic.w	r1, r1, r2
 800d7ae:	e7f2      	b.n	800d796 <roundf+0x1e>
 800d7b0:	2b80      	cmp	r3, #128	@ 0x80
 800d7b2:	d1f0      	bne.n	800d796 <roundf+0x1e>
 800d7b4:	f7f2 fd42 	bl	800023c <__addsf3>
 800d7b8:	4601      	mov	r1, r0
 800d7ba:	e7ec      	b.n	800d796 <roundf+0x1e>
 800d7bc:	007fffff 	.word	0x007fffff

0800d7c0 <abort>:
 800d7c0:	b508      	push	{r3, lr}
 800d7c2:	2006      	movs	r0, #6
 800d7c4:	f000 fafa 	bl	800ddbc <raise>
 800d7c8:	2001      	movs	r0, #1
 800d7ca:	f7f3 fc79 	bl	80010c0 <_exit>
	...

0800d7d0 <malloc>:
 800d7d0:	4b02      	ldr	r3, [pc, #8]	@ (800d7dc <malloc+0xc>)
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	f000 b82d 	b.w	800d834 <_malloc_r>
 800d7da:	bf00      	nop
 800d7dc:	20000020 	.word	0x20000020

0800d7e0 <free>:
 800d7e0:	4b02      	ldr	r3, [pc, #8]	@ (800d7ec <free+0xc>)
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	f000 bbb5 	b.w	800df54 <_free_r>
 800d7ea:	bf00      	nop
 800d7ec:	20000020 	.word	0x20000020

0800d7f0 <sbrk_aligned>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d830 <sbrk_aligned+0x40>)
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	6831      	ldr	r1, [r6, #0]
 800d7f8:	4605      	mov	r5, r0
 800d7fa:	b911      	cbnz	r1, 800d802 <sbrk_aligned+0x12>
 800d7fc:	f000 fb2e 	bl	800de5c <_sbrk_r>
 800d800:	6030      	str	r0, [r6, #0]
 800d802:	4621      	mov	r1, r4
 800d804:	4628      	mov	r0, r5
 800d806:	f000 fb29 	bl	800de5c <_sbrk_r>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d103      	bne.n	800d816 <sbrk_aligned+0x26>
 800d80e:	f04f 34ff 	mov.w	r4, #4294967295
 800d812:	4620      	mov	r0, r4
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	1cc4      	adds	r4, r0, #3
 800d818:	f024 0403 	bic.w	r4, r4, #3
 800d81c:	42a0      	cmp	r0, r4
 800d81e:	d0f8      	beq.n	800d812 <sbrk_aligned+0x22>
 800d820:	1a21      	subs	r1, r4, r0
 800d822:	4628      	mov	r0, r5
 800d824:	f000 fb1a 	bl	800de5c <_sbrk_r>
 800d828:	3001      	adds	r0, #1
 800d82a:	d1f2      	bne.n	800d812 <sbrk_aligned+0x22>
 800d82c:	e7ef      	b.n	800d80e <sbrk_aligned+0x1e>
 800d82e:	bf00      	nop
 800d830:	200009ac 	.word	0x200009ac

0800d834 <_malloc_r>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	1ccd      	adds	r5, r1, #3
 800d83a:	f025 0503 	bic.w	r5, r5, #3
 800d83e:	3508      	adds	r5, #8
 800d840:	2d0c      	cmp	r5, #12
 800d842:	bf38      	it	cc
 800d844:	250c      	movcc	r5, #12
 800d846:	2d00      	cmp	r5, #0
 800d848:	4606      	mov	r6, r0
 800d84a:	db01      	blt.n	800d850 <_malloc_r+0x1c>
 800d84c:	42a9      	cmp	r1, r5
 800d84e:	d904      	bls.n	800d85a <_malloc_r+0x26>
 800d850:	230c      	movs	r3, #12
 800d852:	6033      	str	r3, [r6, #0]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d930 <_malloc_r+0xfc>
 800d85e:	f000 f869 	bl	800d934 <__malloc_lock>
 800d862:	f8d8 3000 	ldr.w	r3, [r8]
 800d866:	461c      	mov	r4, r3
 800d868:	bb44      	cbnz	r4, 800d8bc <_malloc_r+0x88>
 800d86a:	4629      	mov	r1, r5
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7ff ffbf 	bl	800d7f0 <sbrk_aligned>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	4604      	mov	r4, r0
 800d876:	d158      	bne.n	800d92a <_malloc_r+0xf6>
 800d878:	f8d8 4000 	ldr.w	r4, [r8]
 800d87c:	4627      	mov	r7, r4
 800d87e:	2f00      	cmp	r7, #0
 800d880:	d143      	bne.n	800d90a <_malloc_r+0xd6>
 800d882:	2c00      	cmp	r4, #0
 800d884:	d04b      	beq.n	800d91e <_malloc_r+0xea>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	4639      	mov	r1, r7
 800d88a:	4630      	mov	r0, r6
 800d88c:	eb04 0903 	add.w	r9, r4, r3
 800d890:	f000 fae4 	bl	800de5c <_sbrk_r>
 800d894:	4581      	cmp	r9, r0
 800d896:	d142      	bne.n	800d91e <_malloc_r+0xea>
 800d898:	6821      	ldr	r1, [r4, #0]
 800d89a:	1a6d      	subs	r5, r5, r1
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ffa6 	bl	800d7f0 <sbrk_aligned>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d03a      	beq.n	800d91e <_malloc_r+0xea>
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	442b      	add	r3, r5
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	bb62      	cbnz	r2, 800d910 <_malloc_r+0xdc>
 800d8b6:	f8c8 7000 	str.w	r7, [r8]
 800d8ba:	e00f      	b.n	800d8dc <_malloc_r+0xa8>
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	1b52      	subs	r2, r2, r5
 800d8c0:	d420      	bmi.n	800d904 <_malloc_r+0xd0>
 800d8c2:	2a0b      	cmp	r2, #11
 800d8c4:	d917      	bls.n	800d8f6 <_malloc_r+0xc2>
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	6025      	str	r5, [r4, #0]
 800d8cc:	bf18      	it	ne
 800d8ce:	6059      	strne	r1, [r3, #4]
 800d8d0:	6863      	ldr	r3, [r4, #4]
 800d8d2:	bf08      	it	eq
 800d8d4:	f8c8 1000 	streq.w	r1, [r8]
 800d8d8:	5162      	str	r2, [r4, r5]
 800d8da:	604b      	str	r3, [r1, #4]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f82f 	bl	800d940 <__malloc_unlock>
 800d8e2:	f104 000b 	add.w	r0, r4, #11
 800d8e6:	1d23      	adds	r3, r4, #4
 800d8e8:	f020 0007 	bic.w	r0, r0, #7
 800d8ec:	1ac2      	subs	r2, r0, r3
 800d8ee:	bf1c      	itt	ne
 800d8f0:	1a1b      	subne	r3, r3, r0
 800d8f2:	50a3      	strne	r3, [r4, r2]
 800d8f4:	e7af      	b.n	800d856 <_malloc_r+0x22>
 800d8f6:	6862      	ldr	r2, [r4, #4]
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	bf0c      	ite	eq
 800d8fc:	f8c8 2000 	streq.w	r2, [r8]
 800d900:	605a      	strne	r2, [r3, #4]
 800d902:	e7eb      	b.n	800d8dc <_malloc_r+0xa8>
 800d904:	4623      	mov	r3, r4
 800d906:	6864      	ldr	r4, [r4, #4]
 800d908:	e7ae      	b.n	800d868 <_malloc_r+0x34>
 800d90a:	463c      	mov	r4, r7
 800d90c:	687f      	ldr	r7, [r7, #4]
 800d90e:	e7b6      	b.n	800d87e <_malloc_r+0x4a>
 800d910:	461a      	mov	r2, r3
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	42a3      	cmp	r3, r4
 800d916:	d1fb      	bne.n	800d910 <_malloc_r+0xdc>
 800d918:	2300      	movs	r3, #0
 800d91a:	6053      	str	r3, [r2, #4]
 800d91c:	e7de      	b.n	800d8dc <_malloc_r+0xa8>
 800d91e:	230c      	movs	r3, #12
 800d920:	6033      	str	r3, [r6, #0]
 800d922:	4630      	mov	r0, r6
 800d924:	f000 f80c 	bl	800d940 <__malloc_unlock>
 800d928:	e794      	b.n	800d854 <_malloc_r+0x20>
 800d92a:	6005      	str	r5, [r0, #0]
 800d92c:	e7d6      	b.n	800d8dc <_malloc_r+0xa8>
 800d92e:	bf00      	nop
 800d930:	200009b0 	.word	0x200009b0

0800d934 <__malloc_lock>:
 800d934:	4801      	ldr	r0, [pc, #4]	@ (800d93c <__malloc_lock+0x8>)
 800d936:	f000 bade 	b.w	800def6 <__retarget_lock_acquire_recursive>
 800d93a:	bf00      	nop
 800d93c:	20000af4 	.word	0x20000af4

0800d940 <__malloc_unlock>:
 800d940:	4801      	ldr	r0, [pc, #4]	@ (800d948 <__malloc_unlock+0x8>)
 800d942:	f000 bad9 	b.w	800def8 <__retarget_lock_release_recursive>
 800d946:	bf00      	nop
 800d948:	20000af4 	.word	0x20000af4

0800d94c <rand>:
 800d94c:	4b16      	ldr	r3, [pc, #88]	@ (800d9a8 <rand+0x5c>)
 800d94e:	b510      	push	{r4, lr}
 800d950:	681c      	ldr	r4, [r3, #0]
 800d952:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d954:	b9b3      	cbnz	r3, 800d984 <rand+0x38>
 800d956:	2018      	movs	r0, #24
 800d958:	f7ff ff3a 	bl	800d7d0 <malloc>
 800d95c:	4602      	mov	r2, r0
 800d95e:	6320      	str	r0, [r4, #48]	@ 0x30
 800d960:	b920      	cbnz	r0, 800d96c <rand+0x20>
 800d962:	4b12      	ldr	r3, [pc, #72]	@ (800d9ac <rand+0x60>)
 800d964:	4812      	ldr	r0, [pc, #72]	@ (800d9b0 <rand+0x64>)
 800d966:	2152      	movs	r1, #82	@ 0x52
 800d968:	f000 fad6 	bl	800df18 <__assert_func>
 800d96c:	4911      	ldr	r1, [pc, #68]	@ (800d9b4 <rand+0x68>)
 800d96e:	4b12      	ldr	r3, [pc, #72]	@ (800d9b8 <rand+0x6c>)
 800d970:	e9c0 1300 	strd	r1, r3, [r0]
 800d974:	4b11      	ldr	r3, [pc, #68]	@ (800d9bc <rand+0x70>)
 800d976:	6083      	str	r3, [r0, #8]
 800d978:	230b      	movs	r3, #11
 800d97a:	8183      	strh	r3, [r0, #12]
 800d97c:	2100      	movs	r1, #0
 800d97e:	2001      	movs	r0, #1
 800d980:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d984:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d986:	480e      	ldr	r0, [pc, #56]	@ (800d9c0 <rand+0x74>)
 800d988:	690b      	ldr	r3, [r1, #16]
 800d98a:	694c      	ldr	r4, [r1, #20]
 800d98c:	4a0d      	ldr	r2, [pc, #52]	@ (800d9c4 <rand+0x78>)
 800d98e:	4358      	muls	r0, r3
 800d990:	fb02 0004 	mla	r0, r2, r4, r0
 800d994:	fba3 3202 	umull	r3, r2, r3, r2
 800d998:	3301      	adds	r3, #1
 800d99a:	eb40 0002 	adc.w	r0, r0, r2
 800d99e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d9a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d9a6:	bd10      	pop	{r4, pc}
 800d9a8:	20000020 	.word	0x20000020
 800d9ac:	0800f357 	.word	0x0800f357
 800d9b0:	0800f36e 	.word	0x0800f36e
 800d9b4:	abcd330e 	.word	0xabcd330e
 800d9b8:	e66d1234 	.word	0xe66d1234
 800d9bc:	0005deec 	.word	0x0005deec
 800d9c0:	5851f42d 	.word	0x5851f42d
 800d9c4:	4c957f2d 	.word	0x4c957f2d

0800d9c8 <_strtol_l.constprop.0>:
 800d9c8:	2b24      	cmp	r3, #36	@ 0x24
 800d9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ce:	4686      	mov	lr, r0
 800d9d0:	4690      	mov	r8, r2
 800d9d2:	d801      	bhi.n	800d9d8 <_strtol_l.constprop.0+0x10>
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d106      	bne.n	800d9e6 <_strtol_l.constprop.0+0x1e>
 800d9d8:	f000 fa62 	bl	800dea0 <__errno>
 800d9dc:	2316      	movs	r3, #22
 800d9de:	6003      	str	r3, [r0, #0]
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e6:	4834      	ldr	r0, [pc, #208]	@ (800dab8 <_strtol_l.constprop.0+0xf0>)
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9f0:	5d06      	ldrb	r6, [r0, r4]
 800d9f2:	f016 0608 	ands.w	r6, r6, #8
 800d9f6:	d1f8      	bne.n	800d9ea <_strtol_l.constprop.0+0x22>
 800d9f8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d9fa:	d12d      	bne.n	800da58 <_strtol_l.constprop.0+0x90>
 800d9fc:	782c      	ldrb	r4, [r5, #0]
 800d9fe:	2601      	movs	r6, #1
 800da00:	1c95      	adds	r5, r2, #2
 800da02:	f033 0210 	bics.w	r2, r3, #16
 800da06:	d109      	bne.n	800da1c <_strtol_l.constprop.0+0x54>
 800da08:	2c30      	cmp	r4, #48	@ 0x30
 800da0a:	d12a      	bne.n	800da62 <_strtol_l.constprop.0+0x9a>
 800da0c:	782a      	ldrb	r2, [r5, #0]
 800da0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da12:	2a58      	cmp	r2, #88	@ 0x58
 800da14:	d125      	bne.n	800da62 <_strtol_l.constprop.0+0x9a>
 800da16:	786c      	ldrb	r4, [r5, #1]
 800da18:	2310      	movs	r3, #16
 800da1a:	3502      	adds	r5, #2
 800da1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800da20:	f10c 3cff 	add.w	ip, ip, #4294967295
 800da24:	2200      	movs	r2, #0
 800da26:	fbbc f9f3 	udiv	r9, ip, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	fb03 ca19 	mls	sl, r3, r9, ip
 800da30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800da34:	2f09      	cmp	r7, #9
 800da36:	d81b      	bhi.n	800da70 <_strtol_l.constprop.0+0xa8>
 800da38:	463c      	mov	r4, r7
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	dd27      	ble.n	800da8e <_strtol_l.constprop.0+0xc6>
 800da3e:	1c57      	adds	r7, r2, #1
 800da40:	d007      	beq.n	800da52 <_strtol_l.constprop.0+0x8a>
 800da42:	4581      	cmp	r9, r0
 800da44:	d320      	bcc.n	800da88 <_strtol_l.constprop.0+0xc0>
 800da46:	d101      	bne.n	800da4c <_strtol_l.constprop.0+0x84>
 800da48:	45a2      	cmp	sl, r4
 800da4a:	db1d      	blt.n	800da88 <_strtol_l.constprop.0+0xc0>
 800da4c:	fb00 4003 	mla	r0, r0, r3, r4
 800da50:	2201      	movs	r2, #1
 800da52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da56:	e7eb      	b.n	800da30 <_strtol_l.constprop.0+0x68>
 800da58:	2c2b      	cmp	r4, #43	@ 0x2b
 800da5a:	bf04      	itt	eq
 800da5c:	782c      	ldrbeq	r4, [r5, #0]
 800da5e:	1c95      	addeq	r5, r2, #2
 800da60:	e7cf      	b.n	800da02 <_strtol_l.constprop.0+0x3a>
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1da      	bne.n	800da1c <_strtol_l.constprop.0+0x54>
 800da66:	2c30      	cmp	r4, #48	@ 0x30
 800da68:	bf0c      	ite	eq
 800da6a:	2308      	moveq	r3, #8
 800da6c:	230a      	movne	r3, #10
 800da6e:	e7d5      	b.n	800da1c <_strtol_l.constprop.0+0x54>
 800da70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800da74:	2f19      	cmp	r7, #25
 800da76:	d801      	bhi.n	800da7c <_strtol_l.constprop.0+0xb4>
 800da78:	3c37      	subs	r4, #55	@ 0x37
 800da7a:	e7de      	b.n	800da3a <_strtol_l.constprop.0+0x72>
 800da7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800da80:	2f19      	cmp	r7, #25
 800da82:	d804      	bhi.n	800da8e <_strtol_l.constprop.0+0xc6>
 800da84:	3c57      	subs	r4, #87	@ 0x57
 800da86:	e7d8      	b.n	800da3a <_strtol_l.constprop.0+0x72>
 800da88:	f04f 32ff 	mov.w	r2, #4294967295
 800da8c:	e7e1      	b.n	800da52 <_strtol_l.constprop.0+0x8a>
 800da8e:	1c53      	adds	r3, r2, #1
 800da90:	d108      	bne.n	800daa4 <_strtol_l.constprop.0+0xdc>
 800da92:	2322      	movs	r3, #34	@ 0x22
 800da94:	f8ce 3000 	str.w	r3, [lr]
 800da98:	4660      	mov	r0, ip
 800da9a:	f1b8 0f00 	cmp.w	r8, #0
 800da9e:	d0a0      	beq.n	800d9e2 <_strtol_l.constprop.0+0x1a>
 800daa0:	1e69      	subs	r1, r5, #1
 800daa2:	e006      	b.n	800dab2 <_strtol_l.constprop.0+0xea>
 800daa4:	b106      	cbz	r6, 800daa8 <_strtol_l.constprop.0+0xe0>
 800daa6:	4240      	negs	r0, r0
 800daa8:	f1b8 0f00 	cmp.w	r8, #0
 800daac:	d099      	beq.n	800d9e2 <_strtol_l.constprop.0+0x1a>
 800daae:	2a00      	cmp	r2, #0
 800dab0:	d1f6      	bne.n	800daa0 <_strtol_l.constprop.0+0xd8>
 800dab2:	f8c8 1000 	str.w	r1, [r8]
 800dab6:	e794      	b.n	800d9e2 <_strtol_l.constprop.0+0x1a>
 800dab8:	0800f3c7 	.word	0x0800f3c7

0800dabc <strtol>:
 800dabc:	4613      	mov	r3, r2
 800dabe:	460a      	mov	r2, r1
 800dac0:	4601      	mov	r1, r0
 800dac2:	4802      	ldr	r0, [pc, #8]	@ (800dacc <strtol+0x10>)
 800dac4:	6800      	ldr	r0, [r0, #0]
 800dac6:	f7ff bf7f 	b.w	800d9c8 <_strtol_l.constprop.0>
 800daca:	bf00      	nop
 800dacc:	20000020 	.word	0x20000020

0800dad0 <std>:
 800dad0:	2300      	movs	r3, #0
 800dad2:	b510      	push	{r4, lr}
 800dad4:	4604      	mov	r4, r0
 800dad6:	e9c0 3300 	strd	r3, r3, [r0]
 800dada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dade:	6083      	str	r3, [r0, #8]
 800dae0:	8181      	strh	r1, [r0, #12]
 800dae2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dae4:	81c2      	strh	r2, [r0, #14]
 800dae6:	6183      	str	r3, [r0, #24]
 800dae8:	4619      	mov	r1, r3
 800daea:	2208      	movs	r2, #8
 800daec:	305c      	adds	r0, #92	@ 0x5c
 800daee:	f000 f928 	bl	800dd42 <memset>
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <std+0x58>)
 800daf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800daf6:	4b0d      	ldr	r3, [pc, #52]	@ (800db2c <std+0x5c>)
 800daf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dafa:	4b0d      	ldr	r3, [pc, #52]	@ (800db30 <std+0x60>)
 800dafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dafe:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <std+0x64>)
 800db00:	6323      	str	r3, [r4, #48]	@ 0x30
 800db02:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <std+0x68>)
 800db04:	6224      	str	r4, [r4, #32]
 800db06:	429c      	cmp	r4, r3
 800db08:	d006      	beq.n	800db18 <std+0x48>
 800db0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db0e:	4294      	cmp	r4, r2
 800db10:	d002      	beq.n	800db18 <std+0x48>
 800db12:	33d0      	adds	r3, #208	@ 0xd0
 800db14:	429c      	cmp	r4, r3
 800db16:	d105      	bne.n	800db24 <std+0x54>
 800db18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db20:	f000 b9e8 	b.w	800def4 <__retarget_lock_init_recursive>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	bf00      	nop
 800db28:	0800dcbd 	.word	0x0800dcbd
 800db2c:	0800dcdf 	.word	0x0800dcdf
 800db30:	0800dd17 	.word	0x0800dd17
 800db34:	0800dd3b 	.word	0x0800dd3b
 800db38:	200009b4 	.word	0x200009b4

0800db3c <stdio_exit_handler>:
 800db3c:	4a02      	ldr	r2, [pc, #8]	@ (800db48 <stdio_exit_handler+0xc>)
 800db3e:	4903      	ldr	r1, [pc, #12]	@ (800db4c <stdio_exit_handler+0x10>)
 800db40:	4803      	ldr	r0, [pc, #12]	@ (800db50 <stdio_exit_handler+0x14>)
 800db42:	f000 b869 	b.w	800dc18 <_fwalk_sglue>
 800db46:	bf00      	nop
 800db48:	20000014 	.word	0x20000014
 800db4c:	0800e6b5 	.word	0x0800e6b5
 800db50:	20000024 	.word	0x20000024

0800db54 <cleanup_stdio>:
 800db54:	6841      	ldr	r1, [r0, #4]
 800db56:	4b0c      	ldr	r3, [pc, #48]	@ (800db88 <cleanup_stdio+0x34>)
 800db58:	4299      	cmp	r1, r3
 800db5a:	b510      	push	{r4, lr}
 800db5c:	4604      	mov	r4, r0
 800db5e:	d001      	beq.n	800db64 <cleanup_stdio+0x10>
 800db60:	f000 fda8 	bl	800e6b4 <_fflush_r>
 800db64:	68a1      	ldr	r1, [r4, #8]
 800db66:	4b09      	ldr	r3, [pc, #36]	@ (800db8c <cleanup_stdio+0x38>)
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <cleanup_stdio+0x1e>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 fda1 	bl	800e6b4 <_fflush_r>
 800db72:	68e1      	ldr	r1, [r4, #12]
 800db74:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <cleanup_stdio+0x3c>)
 800db76:	4299      	cmp	r1, r3
 800db78:	d004      	beq.n	800db84 <cleanup_stdio+0x30>
 800db7a:	4620      	mov	r0, r4
 800db7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db80:	f000 bd98 	b.w	800e6b4 <_fflush_r>
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	200009b4 	.word	0x200009b4
 800db8c:	20000a1c 	.word	0x20000a1c
 800db90:	20000a84 	.word	0x20000a84

0800db94 <global_stdio_init.part.0>:
 800db94:	b510      	push	{r4, lr}
 800db96:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc4 <global_stdio_init.part.0+0x30>)
 800db98:	4c0b      	ldr	r4, [pc, #44]	@ (800dbc8 <global_stdio_init.part.0+0x34>)
 800db9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbcc <global_stdio_init.part.0+0x38>)
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	4620      	mov	r0, r4
 800dba0:	2200      	movs	r2, #0
 800dba2:	2104      	movs	r1, #4
 800dba4:	f7ff ff94 	bl	800dad0 <std>
 800dba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbac:	2201      	movs	r2, #1
 800dbae:	2109      	movs	r1, #9
 800dbb0:	f7ff ff8e 	bl	800dad0 <std>
 800dbb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbb8:	2202      	movs	r2, #2
 800dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbe:	2112      	movs	r1, #18
 800dbc0:	f7ff bf86 	b.w	800dad0 <std>
 800dbc4:	20000aec 	.word	0x20000aec
 800dbc8:	200009b4 	.word	0x200009b4
 800dbcc:	0800db3d 	.word	0x0800db3d

0800dbd0 <__sfp_lock_acquire>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	@ (800dbd8 <__sfp_lock_acquire+0x8>)
 800dbd2:	f000 b990 	b.w	800def6 <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	20000af5 	.word	0x20000af5

0800dbdc <__sfp_lock_release>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	@ (800dbe4 <__sfp_lock_release+0x8>)
 800dbde:	f000 b98b 	b.w	800def8 <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	20000af5 	.word	0x20000af5

0800dbe8 <__sinit>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	4604      	mov	r4, r0
 800dbec:	f7ff fff0 	bl	800dbd0 <__sfp_lock_acquire>
 800dbf0:	6a23      	ldr	r3, [r4, #32]
 800dbf2:	b11b      	cbz	r3, 800dbfc <__sinit+0x14>
 800dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf8:	f7ff bff0 	b.w	800dbdc <__sfp_lock_release>
 800dbfc:	4b04      	ldr	r3, [pc, #16]	@ (800dc10 <__sinit+0x28>)
 800dbfe:	6223      	str	r3, [r4, #32]
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <__sinit+0x2c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1f5      	bne.n	800dbf4 <__sinit+0xc>
 800dc08:	f7ff ffc4 	bl	800db94 <global_stdio_init.part.0>
 800dc0c:	e7f2      	b.n	800dbf4 <__sinit+0xc>
 800dc0e:	bf00      	nop
 800dc10:	0800db55 	.word	0x0800db55
 800dc14:	20000aec 	.word	0x20000aec

0800dc18 <_fwalk_sglue>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	4688      	mov	r8, r1
 800dc20:	4614      	mov	r4, r2
 800dc22:	2600      	movs	r6, #0
 800dc24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc28:	f1b9 0901 	subs.w	r9, r9, #1
 800dc2c:	d505      	bpl.n	800dc3a <_fwalk_sglue+0x22>
 800dc2e:	6824      	ldr	r4, [r4, #0]
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	d1f7      	bne.n	800dc24 <_fwalk_sglue+0xc>
 800dc34:	4630      	mov	r0, r6
 800dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d907      	bls.n	800dc50 <_fwalk_sglue+0x38>
 800dc40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc44:	3301      	adds	r3, #1
 800dc46:	d003      	beq.n	800dc50 <_fwalk_sglue+0x38>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	47c0      	blx	r8
 800dc4e:	4306      	orrs	r6, r0
 800dc50:	3568      	adds	r5, #104	@ 0x68
 800dc52:	e7e9      	b.n	800dc28 <_fwalk_sglue+0x10>

0800dc54 <sniprintf>:
 800dc54:	b40c      	push	{r2, r3}
 800dc56:	b530      	push	{r4, r5, lr}
 800dc58:	4b17      	ldr	r3, [pc, #92]	@ (800dcb8 <sniprintf+0x64>)
 800dc5a:	1e0c      	subs	r4, r1, #0
 800dc5c:	681d      	ldr	r5, [r3, #0]
 800dc5e:	b09d      	sub	sp, #116	@ 0x74
 800dc60:	da08      	bge.n	800dc74 <sniprintf+0x20>
 800dc62:	238b      	movs	r3, #139	@ 0x8b
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	b01d      	add	sp, #116	@ 0x74
 800dc6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc70:	b002      	add	sp, #8
 800dc72:	4770      	bx	lr
 800dc74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc7c:	bf14      	ite	ne
 800dc7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc82:	4623      	moveq	r3, r4
 800dc84:	9304      	str	r3, [sp, #16]
 800dc86:	9307      	str	r3, [sp, #28]
 800dc88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc8c:	9002      	str	r0, [sp, #8]
 800dc8e:	9006      	str	r0, [sp, #24]
 800dc90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dc96:	ab21      	add	r3, sp, #132	@ 0x84
 800dc98:	a902      	add	r1, sp, #8
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	f000 f9ff 	bl	800e0a0 <_svfiprintf_r>
 800dca2:	1c43      	adds	r3, r0, #1
 800dca4:	bfbc      	itt	lt
 800dca6:	238b      	movlt	r3, #139	@ 0x8b
 800dca8:	602b      	strlt	r3, [r5, #0]
 800dcaa:	2c00      	cmp	r4, #0
 800dcac:	d0dd      	beq.n	800dc6a <sniprintf+0x16>
 800dcae:	9b02      	ldr	r3, [sp, #8]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	e7d9      	b.n	800dc6a <sniprintf+0x16>
 800dcb6:	bf00      	nop
 800dcb8:	20000020 	.word	0x20000020

0800dcbc <__sread>:
 800dcbc:	b510      	push	{r4, lr}
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc4:	f000 f8a4 	bl	800de10 <_read_r>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	bfab      	itete	ge
 800dccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcce:	89a3      	ldrhlt	r3, [r4, #12]
 800dcd0:	181b      	addge	r3, r3, r0
 800dcd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dcd6:	bfac      	ite	ge
 800dcd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dcda:	81a3      	strhlt	r3, [r4, #12]
 800dcdc:	bd10      	pop	{r4, pc}

0800dcde <__swrite>:
 800dcde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce2:	461f      	mov	r7, r3
 800dce4:	898b      	ldrh	r3, [r1, #12]
 800dce6:	05db      	lsls	r3, r3, #23
 800dce8:	4605      	mov	r5, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	4616      	mov	r6, r2
 800dcee:	d505      	bpl.n	800dcfc <__swrite+0x1e>
 800dcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f000 f878 	bl	800ddec <_lseek_r>
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd06:	81a3      	strh	r3, [r4, #12]
 800dd08:	4632      	mov	r2, r6
 800dd0a:	463b      	mov	r3, r7
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd12:	f000 b8b3 	b.w	800de7c <_write_r>

0800dd16 <__sseek>:
 800dd16:	b510      	push	{r4, lr}
 800dd18:	460c      	mov	r4, r1
 800dd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1e:	f000 f865 	bl	800ddec <_lseek_r>
 800dd22:	1c43      	adds	r3, r0, #1
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	bf15      	itete	ne
 800dd28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd32:	81a3      	strheq	r3, [r4, #12]
 800dd34:	bf18      	it	ne
 800dd36:	81a3      	strhne	r3, [r4, #12]
 800dd38:	bd10      	pop	{r4, pc}

0800dd3a <__sclose>:
 800dd3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd3e:	f000 b845 	b.w	800ddcc <_close_r>

0800dd42 <memset>:
 800dd42:	4402      	add	r2, r0
 800dd44:	4603      	mov	r3, r0
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d100      	bne.n	800dd4c <memset+0xa>
 800dd4a:	4770      	bx	lr
 800dd4c:	f803 1b01 	strb.w	r1, [r3], #1
 800dd50:	e7f9      	b.n	800dd46 <memset+0x4>

0800dd52 <strchr>:
 800dd52:	b2c9      	uxtb	r1, r1
 800dd54:	4603      	mov	r3, r0
 800dd56:	4618      	mov	r0, r3
 800dd58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd5c:	b112      	cbz	r2, 800dd64 <strchr+0x12>
 800dd5e:	428a      	cmp	r2, r1
 800dd60:	d1f9      	bne.n	800dd56 <strchr+0x4>
 800dd62:	4770      	bx	lr
 800dd64:	2900      	cmp	r1, #0
 800dd66:	bf18      	it	ne
 800dd68:	2000      	movne	r0, #0
 800dd6a:	4770      	bx	lr

0800dd6c <_raise_r>:
 800dd6c:	291f      	cmp	r1, #31
 800dd6e:	b538      	push	{r3, r4, r5, lr}
 800dd70:	4605      	mov	r5, r0
 800dd72:	460c      	mov	r4, r1
 800dd74:	d904      	bls.n	800dd80 <_raise_r+0x14>
 800dd76:	2316      	movs	r3, #22
 800dd78:	6003      	str	r3, [r0, #0]
 800dd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd82:	b112      	cbz	r2, 800dd8a <_raise_r+0x1e>
 800dd84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd88:	b94b      	cbnz	r3, 800dd9e <_raise_r+0x32>
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f000 f864 	bl	800de58 <_getpid_r>
 800dd90:	4622      	mov	r2, r4
 800dd92:	4601      	mov	r1, r0
 800dd94:	4628      	mov	r0, r5
 800dd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd9a:	f000 b84b 	b.w	800de34 <_kill_r>
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d00a      	beq.n	800ddb8 <_raise_r+0x4c>
 800dda2:	1c59      	adds	r1, r3, #1
 800dda4:	d103      	bne.n	800ddae <_raise_r+0x42>
 800dda6:	2316      	movs	r3, #22
 800dda8:	6003      	str	r3, [r0, #0]
 800ddaa:	2001      	movs	r0, #1
 800ddac:	e7e7      	b.n	800dd7e <_raise_r+0x12>
 800ddae:	2100      	movs	r1, #0
 800ddb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	4798      	blx	r3
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7e0      	b.n	800dd7e <_raise_r+0x12>

0800ddbc <raise>:
 800ddbc:	4b02      	ldr	r3, [pc, #8]	@ (800ddc8 <raise+0xc>)
 800ddbe:	4601      	mov	r1, r0
 800ddc0:	6818      	ldr	r0, [r3, #0]
 800ddc2:	f7ff bfd3 	b.w	800dd6c <_raise_r>
 800ddc6:	bf00      	nop
 800ddc8:	20000020 	.word	0x20000020

0800ddcc <_close_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d06      	ldr	r5, [pc, #24]	@ (800dde8 <_close_r+0x1c>)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	602b      	str	r3, [r5, #0]
 800ddd8:	f7f3 f996 	bl	8001108 <_close>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_close_r+0x1a>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_close_r+0x1a>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20000af0 	.word	0x20000af0

0800ddec <_lseek_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4d07      	ldr	r5, [pc, #28]	@ (800de0c <_lseek_r+0x20>)
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4608      	mov	r0, r1
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	602a      	str	r2, [r5, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	f7f3 f98e 	bl	800111c <_lseek>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_lseek_r+0x1e>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_lseek_r+0x1e>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20000af0 	.word	0x20000af0

0800de10 <_read_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d07      	ldr	r5, [pc, #28]	@ (800de30 <_read_r+0x20>)
 800de14:	4604      	mov	r4, r0
 800de16:	4608      	mov	r0, r1
 800de18:	4611      	mov	r1, r2
 800de1a:	2200      	movs	r2, #0
 800de1c:	602a      	str	r2, [r5, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	f7f3 f954 	bl	80010cc <_read>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_read_r+0x1e>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_read_r+0x1e>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20000af0 	.word	0x20000af0

0800de34 <_kill_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4d07      	ldr	r5, [pc, #28]	@ (800de54 <_kill_r+0x20>)
 800de38:	2300      	movs	r3, #0
 800de3a:	4604      	mov	r4, r0
 800de3c:	4608      	mov	r0, r1
 800de3e:	4611      	mov	r1, r2
 800de40:	602b      	str	r3, [r5, #0]
 800de42:	f7f3 f935 	bl	80010b0 <_kill>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	d102      	bne.n	800de50 <_kill_r+0x1c>
 800de4a:	682b      	ldr	r3, [r5, #0]
 800de4c:	b103      	cbz	r3, 800de50 <_kill_r+0x1c>
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	bd38      	pop	{r3, r4, r5, pc}
 800de52:	bf00      	nop
 800de54:	20000af0 	.word	0x20000af0

0800de58 <_getpid_r>:
 800de58:	f7f3 b928 	b.w	80010ac <_getpid>

0800de5c <_sbrk_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4d06      	ldr	r5, [pc, #24]	@ (800de78 <_sbrk_r+0x1c>)
 800de60:	2300      	movs	r3, #0
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	602b      	str	r3, [r5, #0]
 800de68:	f7f3 f95a 	bl	8001120 <_sbrk>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_sbrk_r+0x1a>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_sbrk_r+0x1a>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20000af0 	.word	0x20000af0

0800de7c <_write_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4d07      	ldr	r5, [pc, #28]	@ (800de9c <_write_r+0x20>)
 800de80:	4604      	mov	r4, r0
 800de82:	4608      	mov	r0, r1
 800de84:	4611      	mov	r1, r2
 800de86:	2200      	movs	r2, #0
 800de88:	602a      	str	r2, [r5, #0]
 800de8a:	461a      	mov	r2, r3
 800de8c:	f7f3 f92e 	bl	80010ec <_write>
 800de90:	1c43      	adds	r3, r0, #1
 800de92:	d102      	bne.n	800de9a <_write_r+0x1e>
 800de94:	682b      	ldr	r3, [r5, #0]
 800de96:	b103      	cbz	r3, 800de9a <_write_r+0x1e>
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	20000af0 	.word	0x20000af0

0800dea0 <__errno>:
 800dea0:	4b01      	ldr	r3, [pc, #4]	@ (800dea8 <__errno+0x8>)
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	20000020 	.word	0x20000020

0800deac <__libc_init_array>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	4d0d      	ldr	r5, [pc, #52]	@ (800dee4 <__libc_init_array+0x38>)
 800deb0:	4c0d      	ldr	r4, [pc, #52]	@ (800dee8 <__libc_init_array+0x3c>)
 800deb2:	1b64      	subs	r4, r4, r5
 800deb4:	10a4      	asrs	r4, r4, #2
 800deb6:	2600      	movs	r6, #0
 800deb8:	42a6      	cmp	r6, r4
 800deba:	d109      	bne.n	800ded0 <__libc_init_array+0x24>
 800debc:	4d0b      	ldr	r5, [pc, #44]	@ (800deec <__libc_init_array+0x40>)
 800debe:	4c0c      	ldr	r4, [pc, #48]	@ (800def0 <__libc_init_array+0x44>)
 800dec0:	f000 feda 	bl	800ec78 <_init>
 800dec4:	1b64      	subs	r4, r4, r5
 800dec6:	10a4      	asrs	r4, r4, #2
 800dec8:	2600      	movs	r6, #0
 800deca:	42a6      	cmp	r6, r4
 800decc:	d105      	bne.n	800deda <__libc_init_array+0x2e>
 800dece:	bd70      	pop	{r4, r5, r6, pc}
 800ded0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ded4:	4798      	blx	r3
 800ded6:	3601      	adds	r6, #1
 800ded8:	e7ee      	b.n	800deb8 <__libc_init_array+0xc>
 800deda:	f855 3b04 	ldr.w	r3, [r5], #4
 800dede:	4798      	blx	r3
 800dee0:	3601      	adds	r6, #1
 800dee2:	e7f2      	b.n	800deca <__libc_init_array+0x1e>
 800dee4:	0800f540 	.word	0x0800f540
 800dee8:	0800f540 	.word	0x0800f540
 800deec:	0800f540 	.word	0x0800f540
 800def0:	0800f550 	.word	0x0800f550

0800def4 <__retarget_lock_init_recursive>:
 800def4:	4770      	bx	lr

0800def6 <__retarget_lock_acquire_recursive>:
 800def6:	4770      	bx	lr

0800def8 <__retarget_lock_release_recursive>:
 800def8:	4770      	bx	lr

0800defa <memcpy>:
 800defa:	440a      	add	r2, r1
 800defc:	4291      	cmp	r1, r2
 800defe:	f100 33ff 	add.w	r3, r0, #4294967295
 800df02:	d100      	bne.n	800df06 <memcpy+0xc>
 800df04:	4770      	bx	lr
 800df06:	b510      	push	{r4, lr}
 800df08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df10:	4291      	cmp	r1, r2
 800df12:	d1f9      	bne.n	800df08 <memcpy+0xe>
 800df14:	bd10      	pop	{r4, pc}
	...

0800df18 <__assert_func>:
 800df18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df1a:	4614      	mov	r4, r2
 800df1c:	461a      	mov	r2, r3
 800df1e:	4b09      	ldr	r3, [pc, #36]	@ (800df44 <__assert_func+0x2c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4605      	mov	r5, r0
 800df24:	68d8      	ldr	r0, [r3, #12]
 800df26:	b954      	cbnz	r4, 800df3e <__assert_func+0x26>
 800df28:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <__assert_func+0x30>)
 800df2a:	461c      	mov	r4, r3
 800df2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df30:	9100      	str	r1, [sp, #0]
 800df32:	462b      	mov	r3, r5
 800df34:	4905      	ldr	r1, [pc, #20]	@ (800df4c <__assert_func+0x34>)
 800df36:	f000 fbe5 	bl	800e704 <fiprintf>
 800df3a:	f7ff fc41 	bl	800d7c0 <abort>
 800df3e:	4b04      	ldr	r3, [pc, #16]	@ (800df50 <__assert_func+0x38>)
 800df40:	e7f4      	b.n	800df2c <__assert_func+0x14>
 800df42:	bf00      	nop
 800df44:	20000020 	.word	0x20000020
 800df48:	0800f502 	.word	0x0800f502
 800df4c:	0800f4d4 	.word	0x0800f4d4
 800df50:	0800f4c7 	.word	0x0800f4c7

0800df54 <_free_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4605      	mov	r5, r0
 800df58:	2900      	cmp	r1, #0
 800df5a:	d041      	beq.n	800dfe0 <_free_r+0x8c>
 800df5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df60:	1f0c      	subs	r4, r1, #4
 800df62:	2b00      	cmp	r3, #0
 800df64:	bfb8      	it	lt
 800df66:	18e4      	addlt	r4, r4, r3
 800df68:	f7ff fce4 	bl	800d934 <__malloc_lock>
 800df6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe4 <_free_r+0x90>)
 800df6e:	6813      	ldr	r3, [r2, #0]
 800df70:	b933      	cbnz	r3, 800df80 <_free_r+0x2c>
 800df72:	6063      	str	r3, [r4, #4]
 800df74:	6014      	str	r4, [r2, #0]
 800df76:	4628      	mov	r0, r5
 800df78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df7c:	f7ff bce0 	b.w	800d940 <__malloc_unlock>
 800df80:	42a3      	cmp	r3, r4
 800df82:	d908      	bls.n	800df96 <_free_r+0x42>
 800df84:	6820      	ldr	r0, [r4, #0]
 800df86:	1821      	adds	r1, r4, r0
 800df88:	428b      	cmp	r3, r1
 800df8a:	bf01      	itttt	eq
 800df8c:	6819      	ldreq	r1, [r3, #0]
 800df8e:	685b      	ldreq	r3, [r3, #4]
 800df90:	1809      	addeq	r1, r1, r0
 800df92:	6021      	streq	r1, [r4, #0]
 800df94:	e7ed      	b.n	800df72 <_free_r+0x1e>
 800df96:	461a      	mov	r2, r3
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	b10b      	cbz	r3, 800dfa0 <_free_r+0x4c>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d9fa      	bls.n	800df96 <_free_r+0x42>
 800dfa0:	6811      	ldr	r1, [r2, #0]
 800dfa2:	1850      	adds	r0, r2, r1
 800dfa4:	42a0      	cmp	r0, r4
 800dfa6:	d10b      	bne.n	800dfc0 <_free_r+0x6c>
 800dfa8:	6820      	ldr	r0, [r4, #0]
 800dfaa:	4401      	add	r1, r0
 800dfac:	1850      	adds	r0, r2, r1
 800dfae:	4283      	cmp	r3, r0
 800dfb0:	6011      	str	r1, [r2, #0]
 800dfb2:	d1e0      	bne.n	800df76 <_free_r+0x22>
 800dfb4:	6818      	ldr	r0, [r3, #0]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	6053      	str	r3, [r2, #4]
 800dfba:	4408      	add	r0, r1
 800dfbc:	6010      	str	r0, [r2, #0]
 800dfbe:	e7da      	b.n	800df76 <_free_r+0x22>
 800dfc0:	d902      	bls.n	800dfc8 <_free_r+0x74>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	e7d6      	b.n	800df76 <_free_r+0x22>
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	1821      	adds	r1, r4, r0
 800dfcc:	428b      	cmp	r3, r1
 800dfce:	bf04      	itt	eq
 800dfd0:	6819      	ldreq	r1, [r3, #0]
 800dfd2:	685b      	ldreq	r3, [r3, #4]
 800dfd4:	6063      	str	r3, [r4, #4]
 800dfd6:	bf04      	itt	eq
 800dfd8:	1809      	addeq	r1, r1, r0
 800dfda:	6021      	streq	r1, [r4, #0]
 800dfdc:	6054      	str	r4, [r2, #4]
 800dfde:	e7ca      	b.n	800df76 <_free_r+0x22>
 800dfe0:	bd38      	pop	{r3, r4, r5, pc}
 800dfe2:	bf00      	nop
 800dfe4:	200009b0 	.word	0x200009b0

0800dfe8 <__ssputs_r>:
 800dfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfec:	688e      	ldr	r6, [r1, #8]
 800dfee:	461f      	mov	r7, r3
 800dff0:	42be      	cmp	r6, r7
 800dff2:	680b      	ldr	r3, [r1, #0]
 800dff4:	4682      	mov	sl, r0
 800dff6:	460c      	mov	r4, r1
 800dff8:	4690      	mov	r8, r2
 800dffa:	d82d      	bhi.n	800e058 <__ssputs_r+0x70>
 800dffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e000:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e004:	d026      	beq.n	800e054 <__ssputs_r+0x6c>
 800e006:	6965      	ldr	r5, [r4, #20]
 800e008:	6909      	ldr	r1, [r1, #16]
 800e00a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e00e:	eba3 0901 	sub.w	r9, r3, r1
 800e012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e016:	1c7b      	adds	r3, r7, #1
 800e018:	444b      	add	r3, r9
 800e01a:	106d      	asrs	r5, r5, #1
 800e01c:	429d      	cmp	r5, r3
 800e01e:	bf38      	it	cc
 800e020:	461d      	movcc	r5, r3
 800e022:	0553      	lsls	r3, r2, #21
 800e024:	d527      	bpl.n	800e076 <__ssputs_r+0x8e>
 800e026:	4629      	mov	r1, r5
 800e028:	f7ff fc04 	bl	800d834 <_malloc_r>
 800e02c:	4606      	mov	r6, r0
 800e02e:	b360      	cbz	r0, 800e08a <__ssputs_r+0xa2>
 800e030:	6921      	ldr	r1, [r4, #16]
 800e032:	464a      	mov	r2, r9
 800e034:	f7ff ff61 	bl	800defa <memcpy>
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e042:	81a3      	strh	r3, [r4, #12]
 800e044:	6126      	str	r6, [r4, #16]
 800e046:	6165      	str	r5, [r4, #20]
 800e048:	444e      	add	r6, r9
 800e04a:	eba5 0509 	sub.w	r5, r5, r9
 800e04e:	6026      	str	r6, [r4, #0]
 800e050:	60a5      	str	r5, [r4, #8]
 800e052:	463e      	mov	r6, r7
 800e054:	42be      	cmp	r6, r7
 800e056:	d900      	bls.n	800e05a <__ssputs_r+0x72>
 800e058:	463e      	mov	r6, r7
 800e05a:	6820      	ldr	r0, [r4, #0]
 800e05c:	4632      	mov	r2, r6
 800e05e:	4641      	mov	r1, r8
 800e060:	f000 fb62 	bl	800e728 <memmove>
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	1b9b      	subs	r3, r3, r6
 800e068:	60a3      	str	r3, [r4, #8]
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	4433      	add	r3, r6
 800e06e:	6023      	str	r3, [r4, #0]
 800e070:	2000      	movs	r0, #0
 800e072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e076:	462a      	mov	r2, r5
 800e078:	f000 fb70 	bl	800e75c <_realloc_r>
 800e07c:	4606      	mov	r6, r0
 800e07e:	2800      	cmp	r0, #0
 800e080:	d1e0      	bne.n	800e044 <__ssputs_r+0x5c>
 800e082:	6921      	ldr	r1, [r4, #16]
 800e084:	4650      	mov	r0, sl
 800e086:	f7ff ff65 	bl	800df54 <_free_r>
 800e08a:	230c      	movs	r3, #12
 800e08c:	f8ca 3000 	str.w	r3, [sl]
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	f04f 30ff 	mov.w	r0, #4294967295
 800e09c:	e7e9      	b.n	800e072 <__ssputs_r+0x8a>
	...

0800e0a0 <_svfiprintf_r>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	4698      	mov	r8, r3
 800e0a6:	898b      	ldrh	r3, [r1, #12]
 800e0a8:	061b      	lsls	r3, r3, #24
 800e0aa:	b09d      	sub	sp, #116	@ 0x74
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	d510      	bpl.n	800e0d6 <_svfiprintf_r+0x36>
 800e0b4:	690b      	ldr	r3, [r1, #16]
 800e0b6:	b973      	cbnz	r3, 800e0d6 <_svfiprintf_r+0x36>
 800e0b8:	2140      	movs	r1, #64	@ 0x40
 800e0ba:	f7ff fbbb 	bl	800d834 <_malloc_r>
 800e0be:	6028      	str	r0, [r5, #0]
 800e0c0:	6128      	str	r0, [r5, #16]
 800e0c2:	b930      	cbnz	r0, 800e0d2 <_svfiprintf_r+0x32>
 800e0c4:	230c      	movs	r3, #12
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0cc:	b01d      	add	sp, #116	@ 0x74
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	2340      	movs	r3, #64	@ 0x40
 800e0d4:	616b      	str	r3, [r5, #20]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0da:	2320      	movs	r3, #32
 800e0dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e4:	2330      	movs	r3, #48	@ 0x30
 800e0e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e284 <_svfiprintf_r+0x1e4>
 800e0ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0ee:	f04f 0901 	mov.w	r9, #1
 800e0f2:	4623      	mov	r3, r4
 800e0f4:	469a      	mov	sl, r3
 800e0f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0fa:	b10a      	cbz	r2, 800e100 <_svfiprintf_r+0x60>
 800e0fc:	2a25      	cmp	r2, #37	@ 0x25
 800e0fe:	d1f9      	bne.n	800e0f4 <_svfiprintf_r+0x54>
 800e100:	ebba 0b04 	subs.w	fp, sl, r4
 800e104:	d00b      	beq.n	800e11e <_svfiprintf_r+0x7e>
 800e106:	465b      	mov	r3, fp
 800e108:	4622      	mov	r2, r4
 800e10a:	4629      	mov	r1, r5
 800e10c:	4638      	mov	r0, r7
 800e10e:	f7ff ff6b 	bl	800dfe8 <__ssputs_r>
 800e112:	3001      	adds	r0, #1
 800e114:	f000 80a7 	beq.w	800e266 <_svfiprintf_r+0x1c6>
 800e118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e11a:	445a      	add	r2, fp
 800e11c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e11e:	f89a 3000 	ldrb.w	r3, [sl]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 809f 	beq.w	800e266 <_svfiprintf_r+0x1c6>
 800e128:	2300      	movs	r3, #0
 800e12a:	f04f 32ff 	mov.w	r2, #4294967295
 800e12e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e132:	f10a 0a01 	add.w	sl, sl, #1
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	9307      	str	r3, [sp, #28]
 800e13a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e13e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e140:	4654      	mov	r4, sl
 800e142:	2205      	movs	r2, #5
 800e144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e148:	484e      	ldr	r0, [pc, #312]	@ (800e284 <_svfiprintf_r+0x1e4>)
 800e14a:	f7f2 f821 	bl	8000190 <memchr>
 800e14e:	9a04      	ldr	r2, [sp, #16]
 800e150:	b9d8      	cbnz	r0, 800e18a <_svfiprintf_r+0xea>
 800e152:	06d0      	lsls	r0, r2, #27
 800e154:	bf44      	itt	mi
 800e156:	2320      	movmi	r3, #32
 800e158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e15c:	0711      	lsls	r1, r2, #28
 800e15e:	bf44      	itt	mi
 800e160:	232b      	movmi	r3, #43	@ 0x2b
 800e162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e166:	f89a 3000 	ldrb.w	r3, [sl]
 800e16a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e16c:	d015      	beq.n	800e19a <_svfiprintf_r+0xfa>
 800e16e:	9a07      	ldr	r2, [sp, #28]
 800e170:	4654      	mov	r4, sl
 800e172:	2000      	movs	r0, #0
 800e174:	f04f 0c0a 	mov.w	ip, #10
 800e178:	4621      	mov	r1, r4
 800e17a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e17e:	3b30      	subs	r3, #48	@ 0x30
 800e180:	2b09      	cmp	r3, #9
 800e182:	d94b      	bls.n	800e21c <_svfiprintf_r+0x17c>
 800e184:	b1b0      	cbz	r0, 800e1b4 <_svfiprintf_r+0x114>
 800e186:	9207      	str	r2, [sp, #28]
 800e188:	e014      	b.n	800e1b4 <_svfiprintf_r+0x114>
 800e18a:	eba0 0308 	sub.w	r3, r0, r8
 800e18e:	fa09 f303 	lsl.w	r3, r9, r3
 800e192:	4313      	orrs	r3, r2
 800e194:	9304      	str	r3, [sp, #16]
 800e196:	46a2      	mov	sl, r4
 800e198:	e7d2      	b.n	800e140 <_svfiprintf_r+0xa0>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	1d19      	adds	r1, r3, #4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	9103      	str	r1, [sp, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	bfbb      	ittet	lt
 800e1a6:	425b      	neglt	r3, r3
 800e1a8:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ac:	9307      	strge	r3, [sp, #28]
 800e1ae:	9307      	strlt	r3, [sp, #28]
 800e1b0:	bfb8      	it	lt
 800e1b2:	9204      	strlt	r2, [sp, #16]
 800e1b4:	7823      	ldrb	r3, [r4, #0]
 800e1b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1b8:	d10a      	bne.n	800e1d0 <_svfiprintf_r+0x130>
 800e1ba:	7863      	ldrb	r3, [r4, #1]
 800e1bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1be:	d132      	bne.n	800e226 <_svfiprintf_r+0x186>
 800e1c0:	9b03      	ldr	r3, [sp, #12]
 800e1c2:	1d1a      	adds	r2, r3, #4
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	9203      	str	r2, [sp, #12]
 800e1c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1cc:	3402      	adds	r4, #2
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e288 <_svfiprintf_r+0x1e8>
 800e1d4:	7821      	ldrb	r1, [r4, #0]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	4650      	mov	r0, sl
 800e1da:	f7f1 ffd9 	bl	8000190 <memchr>
 800e1de:	b138      	cbz	r0, 800e1f0 <_svfiprintf_r+0x150>
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	eba0 000a 	sub.w	r0, r0, sl
 800e1e6:	2240      	movs	r2, #64	@ 0x40
 800e1e8:	4082      	lsls	r2, r0
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	3401      	adds	r4, #1
 800e1ee:	9304      	str	r3, [sp, #16]
 800e1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f4:	4825      	ldr	r0, [pc, #148]	@ (800e28c <_svfiprintf_r+0x1ec>)
 800e1f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1fa:	2206      	movs	r2, #6
 800e1fc:	f7f1 ffc8 	bl	8000190 <memchr>
 800e200:	2800      	cmp	r0, #0
 800e202:	d036      	beq.n	800e272 <_svfiprintf_r+0x1d2>
 800e204:	4b22      	ldr	r3, [pc, #136]	@ (800e290 <_svfiprintf_r+0x1f0>)
 800e206:	bb1b      	cbnz	r3, 800e250 <_svfiprintf_r+0x1b0>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	3307      	adds	r3, #7
 800e20c:	f023 0307 	bic.w	r3, r3, #7
 800e210:	3308      	adds	r3, #8
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e216:	4433      	add	r3, r6
 800e218:	9309      	str	r3, [sp, #36]	@ 0x24
 800e21a:	e76a      	b.n	800e0f2 <_svfiprintf_r+0x52>
 800e21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e220:	460c      	mov	r4, r1
 800e222:	2001      	movs	r0, #1
 800e224:	e7a8      	b.n	800e178 <_svfiprintf_r+0xd8>
 800e226:	2300      	movs	r3, #0
 800e228:	3401      	adds	r4, #1
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	4619      	mov	r1, r3
 800e22e:	f04f 0c0a 	mov.w	ip, #10
 800e232:	4620      	mov	r0, r4
 800e234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e238:	3a30      	subs	r2, #48	@ 0x30
 800e23a:	2a09      	cmp	r2, #9
 800e23c:	d903      	bls.n	800e246 <_svfiprintf_r+0x1a6>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0c6      	beq.n	800e1d0 <_svfiprintf_r+0x130>
 800e242:	9105      	str	r1, [sp, #20]
 800e244:	e7c4      	b.n	800e1d0 <_svfiprintf_r+0x130>
 800e246:	fb0c 2101 	mla	r1, ip, r1, r2
 800e24a:	4604      	mov	r4, r0
 800e24c:	2301      	movs	r3, #1
 800e24e:	e7f0      	b.n	800e232 <_svfiprintf_r+0x192>
 800e250:	ab03      	add	r3, sp, #12
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	462a      	mov	r2, r5
 800e256:	4b0f      	ldr	r3, [pc, #60]	@ (800e294 <_svfiprintf_r+0x1f4>)
 800e258:	a904      	add	r1, sp, #16
 800e25a:	4638      	mov	r0, r7
 800e25c:	f3af 8000 	nop.w
 800e260:	1c42      	adds	r2, r0, #1
 800e262:	4606      	mov	r6, r0
 800e264:	d1d6      	bne.n	800e214 <_svfiprintf_r+0x174>
 800e266:	89ab      	ldrh	r3, [r5, #12]
 800e268:	065b      	lsls	r3, r3, #25
 800e26a:	f53f af2d 	bmi.w	800e0c8 <_svfiprintf_r+0x28>
 800e26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e270:	e72c      	b.n	800e0cc <_svfiprintf_r+0x2c>
 800e272:	ab03      	add	r3, sp, #12
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	462a      	mov	r2, r5
 800e278:	4b06      	ldr	r3, [pc, #24]	@ (800e294 <_svfiprintf_r+0x1f4>)
 800e27a:	a904      	add	r1, sp, #16
 800e27c:	4638      	mov	r0, r7
 800e27e:	f000 f879 	bl	800e374 <_printf_i>
 800e282:	e7ed      	b.n	800e260 <_svfiprintf_r+0x1c0>
 800e284:	0800f503 	.word	0x0800f503
 800e288:	0800f509 	.word	0x0800f509
 800e28c:	0800f50d 	.word	0x0800f50d
 800e290:	00000000 	.word	0x00000000
 800e294:	0800dfe9 	.word	0x0800dfe9

0800e298 <_printf_common>:
 800e298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e29c:	4616      	mov	r6, r2
 800e29e:	4698      	mov	r8, r3
 800e2a0:	688a      	ldr	r2, [r1, #8]
 800e2a2:	690b      	ldr	r3, [r1, #16]
 800e2a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	bfb8      	it	lt
 800e2ac:	4613      	movlt	r3, r2
 800e2ae:	6033      	str	r3, [r6, #0]
 800e2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	b10a      	cbz	r2, 800e2be <_printf_common+0x26>
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	6033      	str	r3, [r6, #0]
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	0699      	lsls	r1, r3, #26
 800e2c2:	bf42      	ittt	mi
 800e2c4:	6833      	ldrmi	r3, [r6, #0]
 800e2c6:	3302      	addmi	r3, #2
 800e2c8:	6033      	strmi	r3, [r6, #0]
 800e2ca:	6825      	ldr	r5, [r4, #0]
 800e2cc:	f015 0506 	ands.w	r5, r5, #6
 800e2d0:	d106      	bne.n	800e2e0 <_printf_common+0x48>
 800e2d2:	f104 0a19 	add.w	sl, r4, #25
 800e2d6:	68e3      	ldr	r3, [r4, #12]
 800e2d8:	6832      	ldr	r2, [r6, #0]
 800e2da:	1a9b      	subs	r3, r3, r2
 800e2dc:	42ab      	cmp	r3, r5
 800e2de:	dc26      	bgt.n	800e32e <_printf_common+0x96>
 800e2e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2e4:	6822      	ldr	r2, [r4, #0]
 800e2e6:	3b00      	subs	r3, #0
 800e2e8:	bf18      	it	ne
 800e2ea:	2301      	movne	r3, #1
 800e2ec:	0692      	lsls	r2, r2, #26
 800e2ee:	d42b      	bmi.n	800e348 <_printf_common+0xb0>
 800e2f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2f4:	4641      	mov	r1, r8
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	47c8      	blx	r9
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	d01e      	beq.n	800e33c <_printf_common+0xa4>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	6922      	ldr	r2, [r4, #16]
 800e302:	f003 0306 	and.w	r3, r3, #6
 800e306:	2b04      	cmp	r3, #4
 800e308:	bf02      	ittt	eq
 800e30a:	68e5      	ldreq	r5, [r4, #12]
 800e30c:	6833      	ldreq	r3, [r6, #0]
 800e30e:	1aed      	subeq	r5, r5, r3
 800e310:	68a3      	ldr	r3, [r4, #8]
 800e312:	bf0c      	ite	eq
 800e314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e318:	2500      	movne	r5, #0
 800e31a:	4293      	cmp	r3, r2
 800e31c:	bfc4      	itt	gt
 800e31e:	1a9b      	subgt	r3, r3, r2
 800e320:	18ed      	addgt	r5, r5, r3
 800e322:	2600      	movs	r6, #0
 800e324:	341a      	adds	r4, #26
 800e326:	42b5      	cmp	r5, r6
 800e328:	d11a      	bne.n	800e360 <_printf_common+0xc8>
 800e32a:	2000      	movs	r0, #0
 800e32c:	e008      	b.n	800e340 <_printf_common+0xa8>
 800e32e:	2301      	movs	r3, #1
 800e330:	4652      	mov	r2, sl
 800e332:	4641      	mov	r1, r8
 800e334:	4638      	mov	r0, r7
 800e336:	47c8      	blx	r9
 800e338:	3001      	adds	r0, #1
 800e33a:	d103      	bne.n	800e344 <_printf_common+0xac>
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e344:	3501      	adds	r5, #1
 800e346:	e7c6      	b.n	800e2d6 <_printf_common+0x3e>
 800e348:	18e1      	adds	r1, r4, r3
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	2030      	movs	r0, #48	@ 0x30
 800e34e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e352:	4422      	add	r2, r4
 800e354:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e35c:	3302      	adds	r3, #2
 800e35e:	e7c7      	b.n	800e2f0 <_printf_common+0x58>
 800e360:	2301      	movs	r3, #1
 800e362:	4622      	mov	r2, r4
 800e364:	4641      	mov	r1, r8
 800e366:	4638      	mov	r0, r7
 800e368:	47c8      	blx	r9
 800e36a:	3001      	adds	r0, #1
 800e36c:	d0e6      	beq.n	800e33c <_printf_common+0xa4>
 800e36e:	3601      	adds	r6, #1
 800e370:	e7d9      	b.n	800e326 <_printf_common+0x8e>
	...

0800e374 <_printf_i>:
 800e374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	7e0f      	ldrb	r7, [r1, #24]
 800e37a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e37c:	2f78      	cmp	r7, #120	@ 0x78
 800e37e:	4691      	mov	r9, r2
 800e380:	4680      	mov	r8, r0
 800e382:	460c      	mov	r4, r1
 800e384:	469a      	mov	sl, r3
 800e386:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e38a:	d807      	bhi.n	800e39c <_printf_i+0x28>
 800e38c:	2f62      	cmp	r7, #98	@ 0x62
 800e38e:	d80a      	bhi.n	800e3a6 <_printf_i+0x32>
 800e390:	2f00      	cmp	r7, #0
 800e392:	f000 80d2 	beq.w	800e53a <_printf_i+0x1c6>
 800e396:	2f58      	cmp	r7, #88	@ 0x58
 800e398:	f000 80b9 	beq.w	800e50e <_printf_i+0x19a>
 800e39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3a4:	e03a      	b.n	800e41c <_printf_i+0xa8>
 800e3a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3aa:	2b15      	cmp	r3, #21
 800e3ac:	d8f6      	bhi.n	800e39c <_printf_i+0x28>
 800e3ae:	a101      	add	r1, pc, #4	@ (adr r1, 800e3b4 <_printf_i+0x40>)
 800e3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3b4:	0800e40d 	.word	0x0800e40d
 800e3b8:	0800e421 	.word	0x0800e421
 800e3bc:	0800e39d 	.word	0x0800e39d
 800e3c0:	0800e39d 	.word	0x0800e39d
 800e3c4:	0800e39d 	.word	0x0800e39d
 800e3c8:	0800e39d 	.word	0x0800e39d
 800e3cc:	0800e421 	.word	0x0800e421
 800e3d0:	0800e39d 	.word	0x0800e39d
 800e3d4:	0800e39d 	.word	0x0800e39d
 800e3d8:	0800e39d 	.word	0x0800e39d
 800e3dc:	0800e39d 	.word	0x0800e39d
 800e3e0:	0800e521 	.word	0x0800e521
 800e3e4:	0800e44b 	.word	0x0800e44b
 800e3e8:	0800e4db 	.word	0x0800e4db
 800e3ec:	0800e39d 	.word	0x0800e39d
 800e3f0:	0800e39d 	.word	0x0800e39d
 800e3f4:	0800e543 	.word	0x0800e543
 800e3f8:	0800e39d 	.word	0x0800e39d
 800e3fc:	0800e44b 	.word	0x0800e44b
 800e400:	0800e39d 	.word	0x0800e39d
 800e404:	0800e39d 	.word	0x0800e39d
 800e408:	0800e4e3 	.word	0x0800e4e3
 800e40c:	6833      	ldr	r3, [r6, #0]
 800e40e:	1d1a      	adds	r2, r3, #4
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6032      	str	r2, [r6, #0]
 800e414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e418:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e41c:	2301      	movs	r3, #1
 800e41e:	e09d      	b.n	800e55c <_printf_i+0x1e8>
 800e420:	6833      	ldr	r3, [r6, #0]
 800e422:	6820      	ldr	r0, [r4, #0]
 800e424:	1d19      	adds	r1, r3, #4
 800e426:	6031      	str	r1, [r6, #0]
 800e428:	0606      	lsls	r6, r0, #24
 800e42a:	d501      	bpl.n	800e430 <_printf_i+0xbc>
 800e42c:	681d      	ldr	r5, [r3, #0]
 800e42e:	e003      	b.n	800e438 <_printf_i+0xc4>
 800e430:	0645      	lsls	r5, r0, #25
 800e432:	d5fb      	bpl.n	800e42c <_printf_i+0xb8>
 800e434:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e438:	2d00      	cmp	r5, #0
 800e43a:	da03      	bge.n	800e444 <_printf_i+0xd0>
 800e43c:	232d      	movs	r3, #45	@ 0x2d
 800e43e:	426d      	negs	r5, r5
 800e440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e444:	4859      	ldr	r0, [pc, #356]	@ (800e5ac <_printf_i+0x238>)
 800e446:	230a      	movs	r3, #10
 800e448:	e011      	b.n	800e46e <_printf_i+0xfa>
 800e44a:	6821      	ldr	r1, [r4, #0]
 800e44c:	6833      	ldr	r3, [r6, #0]
 800e44e:	0608      	lsls	r0, r1, #24
 800e450:	f853 5b04 	ldr.w	r5, [r3], #4
 800e454:	d402      	bmi.n	800e45c <_printf_i+0xe8>
 800e456:	0649      	lsls	r1, r1, #25
 800e458:	bf48      	it	mi
 800e45a:	b2ad      	uxthmi	r5, r5
 800e45c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e45e:	4853      	ldr	r0, [pc, #332]	@ (800e5ac <_printf_i+0x238>)
 800e460:	6033      	str	r3, [r6, #0]
 800e462:	bf14      	ite	ne
 800e464:	230a      	movne	r3, #10
 800e466:	2308      	moveq	r3, #8
 800e468:	2100      	movs	r1, #0
 800e46a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e46e:	6866      	ldr	r6, [r4, #4]
 800e470:	60a6      	str	r6, [r4, #8]
 800e472:	2e00      	cmp	r6, #0
 800e474:	bfa2      	ittt	ge
 800e476:	6821      	ldrge	r1, [r4, #0]
 800e478:	f021 0104 	bicge.w	r1, r1, #4
 800e47c:	6021      	strge	r1, [r4, #0]
 800e47e:	b90d      	cbnz	r5, 800e484 <_printf_i+0x110>
 800e480:	2e00      	cmp	r6, #0
 800e482:	d04b      	beq.n	800e51c <_printf_i+0x1a8>
 800e484:	4616      	mov	r6, r2
 800e486:	fbb5 f1f3 	udiv	r1, r5, r3
 800e48a:	fb03 5711 	mls	r7, r3, r1, r5
 800e48e:	5dc7      	ldrb	r7, [r0, r7]
 800e490:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e494:	462f      	mov	r7, r5
 800e496:	42bb      	cmp	r3, r7
 800e498:	460d      	mov	r5, r1
 800e49a:	d9f4      	bls.n	800e486 <_printf_i+0x112>
 800e49c:	2b08      	cmp	r3, #8
 800e49e:	d10b      	bne.n	800e4b8 <_printf_i+0x144>
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	07df      	lsls	r7, r3, #31
 800e4a4:	d508      	bpl.n	800e4b8 <_printf_i+0x144>
 800e4a6:	6923      	ldr	r3, [r4, #16]
 800e4a8:	6861      	ldr	r1, [r4, #4]
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	bfde      	ittt	le
 800e4ae:	2330      	movle	r3, #48	@ 0x30
 800e4b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4b8:	1b92      	subs	r2, r2, r6
 800e4ba:	6122      	str	r2, [r4, #16]
 800e4bc:	f8cd a000 	str.w	sl, [sp]
 800e4c0:	464b      	mov	r3, r9
 800e4c2:	aa03      	add	r2, sp, #12
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f7ff fee6 	bl	800e298 <_printf_common>
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d14a      	bne.n	800e566 <_printf_i+0x1f2>
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d4:	b004      	add	sp, #16
 800e4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	f043 0320 	orr.w	r3, r3, #32
 800e4e0:	6023      	str	r3, [r4, #0]
 800e4e2:	4833      	ldr	r0, [pc, #204]	@ (800e5b0 <_printf_i+0x23c>)
 800e4e4:	2778      	movs	r7, #120	@ 0x78
 800e4e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	6831      	ldr	r1, [r6, #0]
 800e4ee:	061f      	lsls	r7, r3, #24
 800e4f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4f4:	d402      	bmi.n	800e4fc <_printf_i+0x188>
 800e4f6:	065f      	lsls	r7, r3, #25
 800e4f8:	bf48      	it	mi
 800e4fa:	b2ad      	uxthmi	r5, r5
 800e4fc:	6031      	str	r1, [r6, #0]
 800e4fe:	07d9      	lsls	r1, r3, #31
 800e500:	bf44      	itt	mi
 800e502:	f043 0320 	orrmi.w	r3, r3, #32
 800e506:	6023      	strmi	r3, [r4, #0]
 800e508:	b11d      	cbz	r5, 800e512 <_printf_i+0x19e>
 800e50a:	2310      	movs	r3, #16
 800e50c:	e7ac      	b.n	800e468 <_printf_i+0xf4>
 800e50e:	4827      	ldr	r0, [pc, #156]	@ (800e5ac <_printf_i+0x238>)
 800e510:	e7e9      	b.n	800e4e6 <_printf_i+0x172>
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	f023 0320 	bic.w	r3, r3, #32
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	e7f6      	b.n	800e50a <_printf_i+0x196>
 800e51c:	4616      	mov	r6, r2
 800e51e:	e7bd      	b.n	800e49c <_printf_i+0x128>
 800e520:	6833      	ldr	r3, [r6, #0]
 800e522:	6825      	ldr	r5, [r4, #0]
 800e524:	6961      	ldr	r1, [r4, #20]
 800e526:	1d18      	adds	r0, r3, #4
 800e528:	6030      	str	r0, [r6, #0]
 800e52a:	062e      	lsls	r6, r5, #24
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	d501      	bpl.n	800e534 <_printf_i+0x1c0>
 800e530:	6019      	str	r1, [r3, #0]
 800e532:	e002      	b.n	800e53a <_printf_i+0x1c6>
 800e534:	0668      	lsls	r0, r5, #25
 800e536:	d5fb      	bpl.n	800e530 <_printf_i+0x1bc>
 800e538:	8019      	strh	r1, [r3, #0]
 800e53a:	2300      	movs	r3, #0
 800e53c:	6123      	str	r3, [r4, #16]
 800e53e:	4616      	mov	r6, r2
 800e540:	e7bc      	b.n	800e4bc <_printf_i+0x148>
 800e542:	6833      	ldr	r3, [r6, #0]
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	6032      	str	r2, [r6, #0]
 800e548:	681e      	ldr	r6, [r3, #0]
 800e54a:	6862      	ldr	r2, [r4, #4]
 800e54c:	2100      	movs	r1, #0
 800e54e:	4630      	mov	r0, r6
 800e550:	f7f1 fe1e 	bl	8000190 <memchr>
 800e554:	b108      	cbz	r0, 800e55a <_printf_i+0x1e6>
 800e556:	1b80      	subs	r0, r0, r6
 800e558:	6060      	str	r0, [r4, #4]
 800e55a:	6863      	ldr	r3, [r4, #4]
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	2300      	movs	r3, #0
 800e560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e564:	e7aa      	b.n	800e4bc <_printf_i+0x148>
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	4632      	mov	r2, r6
 800e56a:	4649      	mov	r1, r9
 800e56c:	4640      	mov	r0, r8
 800e56e:	47d0      	blx	sl
 800e570:	3001      	adds	r0, #1
 800e572:	d0ad      	beq.n	800e4d0 <_printf_i+0x15c>
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	079b      	lsls	r3, r3, #30
 800e578:	d413      	bmi.n	800e5a2 <_printf_i+0x22e>
 800e57a:	68e0      	ldr	r0, [r4, #12]
 800e57c:	9b03      	ldr	r3, [sp, #12]
 800e57e:	4298      	cmp	r0, r3
 800e580:	bfb8      	it	lt
 800e582:	4618      	movlt	r0, r3
 800e584:	e7a6      	b.n	800e4d4 <_printf_i+0x160>
 800e586:	2301      	movs	r3, #1
 800e588:	4632      	mov	r2, r6
 800e58a:	4649      	mov	r1, r9
 800e58c:	4640      	mov	r0, r8
 800e58e:	47d0      	blx	sl
 800e590:	3001      	adds	r0, #1
 800e592:	d09d      	beq.n	800e4d0 <_printf_i+0x15c>
 800e594:	3501      	adds	r5, #1
 800e596:	68e3      	ldr	r3, [r4, #12]
 800e598:	9903      	ldr	r1, [sp, #12]
 800e59a:	1a5b      	subs	r3, r3, r1
 800e59c:	42ab      	cmp	r3, r5
 800e59e:	dcf2      	bgt.n	800e586 <_printf_i+0x212>
 800e5a0:	e7eb      	b.n	800e57a <_printf_i+0x206>
 800e5a2:	2500      	movs	r5, #0
 800e5a4:	f104 0619 	add.w	r6, r4, #25
 800e5a8:	e7f5      	b.n	800e596 <_printf_i+0x222>
 800e5aa:	bf00      	nop
 800e5ac:	0800f514 	.word	0x0800f514
 800e5b0:	0800f525 	.word	0x0800f525

0800e5b4 <__sflush_r>:
 800e5b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	0716      	lsls	r6, r2, #28
 800e5bc:	4605      	mov	r5, r0
 800e5be:	460c      	mov	r4, r1
 800e5c0:	d454      	bmi.n	800e66c <__sflush_r+0xb8>
 800e5c2:	684b      	ldr	r3, [r1, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	dc02      	bgt.n	800e5ce <__sflush_r+0x1a>
 800e5c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dd48      	ble.n	800e660 <__sflush_r+0xac>
 800e5ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5d0:	2e00      	cmp	r6, #0
 800e5d2:	d045      	beq.n	800e660 <__sflush_r+0xac>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5da:	682f      	ldr	r7, [r5, #0]
 800e5dc:	6a21      	ldr	r1, [r4, #32]
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	d030      	beq.n	800e644 <__sflush_r+0x90>
 800e5e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	0759      	lsls	r1, r3, #29
 800e5e8:	d505      	bpl.n	800e5f6 <__sflush_r+0x42>
 800e5ea:	6863      	ldr	r3, [r4, #4]
 800e5ec:	1ad2      	subs	r2, r2, r3
 800e5ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5f0:	b10b      	cbz	r3, 800e5f6 <__sflush_r+0x42>
 800e5f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5f4:	1ad2      	subs	r2, r2, r3
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5fa:	6a21      	ldr	r1, [r4, #32]
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	47b0      	blx	r6
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	d106      	bne.n	800e614 <__sflush_r+0x60>
 800e606:	6829      	ldr	r1, [r5, #0]
 800e608:	291d      	cmp	r1, #29
 800e60a:	d82b      	bhi.n	800e664 <__sflush_r+0xb0>
 800e60c:	4a28      	ldr	r2, [pc, #160]	@ (800e6b0 <__sflush_r+0xfc>)
 800e60e:	410a      	asrs	r2, r1
 800e610:	07d6      	lsls	r6, r2, #31
 800e612:	d427      	bmi.n	800e664 <__sflush_r+0xb0>
 800e614:	2200      	movs	r2, #0
 800e616:	6062      	str	r2, [r4, #4]
 800e618:	04d9      	lsls	r1, r3, #19
 800e61a:	6922      	ldr	r2, [r4, #16]
 800e61c:	6022      	str	r2, [r4, #0]
 800e61e:	d504      	bpl.n	800e62a <__sflush_r+0x76>
 800e620:	1c42      	adds	r2, r0, #1
 800e622:	d101      	bne.n	800e628 <__sflush_r+0x74>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b903      	cbnz	r3, 800e62a <__sflush_r+0x76>
 800e628:	6560      	str	r0, [r4, #84]	@ 0x54
 800e62a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e62c:	602f      	str	r7, [r5, #0]
 800e62e:	b1b9      	cbz	r1, 800e660 <__sflush_r+0xac>
 800e630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e634:	4299      	cmp	r1, r3
 800e636:	d002      	beq.n	800e63e <__sflush_r+0x8a>
 800e638:	4628      	mov	r0, r5
 800e63a:	f7ff fc8b 	bl	800df54 <_free_r>
 800e63e:	2300      	movs	r3, #0
 800e640:	6363      	str	r3, [r4, #52]	@ 0x34
 800e642:	e00d      	b.n	800e660 <__sflush_r+0xac>
 800e644:	2301      	movs	r3, #1
 800e646:	4628      	mov	r0, r5
 800e648:	47b0      	blx	r6
 800e64a:	4602      	mov	r2, r0
 800e64c:	1c50      	adds	r0, r2, #1
 800e64e:	d1c9      	bne.n	800e5e4 <__sflush_r+0x30>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d0c6      	beq.n	800e5e4 <__sflush_r+0x30>
 800e656:	2b1d      	cmp	r3, #29
 800e658:	d001      	beq.n	800e65e <__sflush_r+0xaa>
 800e65a:	2b16      	cmp	r3, #22
 800e65c:	d11d      	bne.n	800e69a <__sflush_r+0xe6>
 800e65e:	602f      	str	r7, [r5, #0]
 800e660:	2000      	movs	r0, #0
 800e662:	e021      	b.n	800e6a8 <__sflush_r+0xf4>
 800e664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e668:	b21b      	sxth	r3, r3
 800e66a:	e01a      	b.n	800e6a2 <__sflush_r+0xee>
 800e66c:	690f      	ldr	r7, [r1, #16]
 800e66e:	2f00      	cmp	r7, #0
 800e670:	d0f6      	beq.n	800e660 <__sflush_r+0xac>
 800e672:	0793      	lsls	r3, r2, #30
 800e674:	680e      	ldr	r6, [r1, #0]
 800e676:	bf08      	it	eq
 800e678:	694b      	ldreq	r3, [r1, #20]
 800e67a:	600f      	str	r7, [r1, #0]
 800e67c:	bf18      	it	ne
 800e67e:	2300      	movne	r3, #0
 800e680:	1bf6      	subs	r6, r6, r7
 800e682:	608b      	str	r3, [r1, #8]
 800e684:	2e00      	cmp	r6, #0
 800e686:	ddeb      	ble.n	800e660 <__sflush_r+0xac>
 800e688:	6a21      	ldr	r1, [r4, #32]
 800e68a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e68e:	4633      	mov	r3, r6
 800e690:	463a      	mov	r2, r7
 800e692:	4628      	mov	r0, r5
 800e694:	47e0      	blx	ip
 800e696:	2800      	cmp	r0, #0
 800e698:	dc07      	bgt.n	800e6aa <__sflush_r+0xf6>
 800e69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6aa:	4407      	add	r7, r0
 800e6ac:	1a36      	subs	r6, r6, r0
 800e6ae:	e7e9      	b.n	800e684 <__sflush_r+0xd0>
 800e6b0:	dfbffffe 	.word	0xdfbffffe

0800e6b4 <_fflush_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	690b      	ldr	r3, [r1, #16]
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	b913      	cbnz	r3, 800e6c4 <_fflush_r+0x10>
 800e6be:	2500      	movs	r5, #0
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	b118      	cbz	r0, 800e6ce <_fflush_r+0x1a>
 800e6c6:	6a03      	ldr	r3, [r0, #32]
 800e6c8:	b90b      	cbnz	r3, 800e6ce <_fflush_r+0x1a>
 800e6ca:	f7ff fa8d 	bl	800dbe8 <__sinit>
 800e6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0f3      	beq.n	800e6be <_fflush_r+0xa>
 800e6d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6d8:	07d0      	lsls	r0, r2, #31
 800e6da:	d404      	bmi.n	800e6e6 <_fflush_r+0x32>
 800e6dc:	0599      	lsls	r1, r3, #22
 800e6de:	d402      	bmi.n	800e6e6 <_fflush_r+0x32>
 800e6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6e2:	f7ff fc08 	bl	800def6 <__retarget_lock_acquire_recursive>
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	f7ff ff63 	bl	800e5b4 <__sflush_r>
 800e6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6f0:	07da      	lsls	r2, r3, #31
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	d4e4      	bmi.n	800e6c0 <_fflush_r+0xc>
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	059b      	lsls	r3, r3, #22
 800e6fa:	d4e1      	bmi.n	800e6c0 <_fflush_r+0xc>
 800e6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6fe:	f7ff fbfb 	bl	800def8 <__retarget_lock_release_recursive>
 800e702:	e7dd      	b.n	800e6c0 <_fflush_r+0xc>

0800e704 <fiprintf>:
 800e704:	b40e      	push	{r1, r2, r3}
 800e706:	b503      	push	{r0, r1, lr}
 800e708:	4601      	mov	r1, r0
 800e70a:	ab03      	add	r3, sp, #12
 800e70c:	4805      	ldr	r0, [pc, #20]	@ (800e724 <fiprintf+0x20>)
 800e70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e712:	6800      	ldr	r0, [r0, #0]
 800e714:	9301      	str	r3, [sp, #4]
 800e716:	f000 f877 	bl	800e808 <_vfiprintf_r>
 800e71a:	b002      	add	sp, #8
 800e71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e720:	b003      	add	sp, #12
 800e722:	4770      	bx	lr
 800e724:	20000020 	.word	0x20000020

0800e728 <memmove>:
 800e728:	4288      	cmp	r0, r1
 800e72a:	b510      	push	{r4, lr}
 800e72c:	eb01 0402 	add.w	r4, r1, r2
 800e730:	d902      	bls.n	800e738 <memmove+0x10>
 800e732:	4284      	cmp	r4, r0
 800e734:	4623      	mov	r3, r4
 800e736:	d807      	bhi.n	800e748 <memmove+0x20>
 800e738:	1e43      	subs	r3, r0, #1
 800e73a:	42a1      	cmp	r1, r4
 800e73c:	d008      	beq.n	800e750 <memmove+0x28>
 800e73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e746:	e7f8      	b.n	800e73a <memmove+0x12>
 800e748:	4402      	add	r2, r0
 800e74a:	4601      	mov	r1, r0
 800e74c:	428a      	cmp	r2, r1
 800e74e:	d100      	bne.n	800e752 <memmove+0x2a>
 800e750:	bd10      	pop	{r4, pc}
 800e752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e75a:	e7f7      	b.n	800e74c <memmove+0x24>

0800e75c <_realloc_r>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	4680      	mov	r8, r0
 800e762:	4615      	mov	r5, r2
 800e764:	460c      	mov	r4, r1
 800e766:	b921      	cbnz	r1, 800e772 <_realloc_r+0x16>
 800e768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e76c:	4611      	mov	r1, r2
 800e76e:	f7ff b861 	b.w	800d834 <_malloc_r>
 800e772:	b92a      	cbnz	r2, 800e780 <_realloc_r+0x24>
 800e774:	f7ff fbee 	bl	800df54 <_free_r>
 800e778:	2400      	movs	r4, #0
 800e77a:	4620      	mov	r0, r4
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	f000 f9ee 	bl	800eb60 <_malloc_usable_size_r>
 800e784:	4285      	cmp	r5, r0
 800e786:	4606      	mov	r6, r0
 800e788:	d802      	bhi.n	800e790 <_realloc_r+0x34>
 800e78a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e78e:	d8f4      	bhi.n	800e77a <_realloc_r+0x1e>
 800e790:	4629      	mov	r1, r5
 800e792:	4640      	mov	r0, r8
 800e794:	f7ff f84e 	bl	800d834 <_malloc_r>
 800e798:	4607      	mov	r7, r0
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d0ec      	beq.n	800e778 <_realloc_r+0x1c>
 800e79e:	42b5      	cmp	r5, r6
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	bf28      	it	cs
 800e7a6:	4632      	movcs	r2, r6
 800e7a8:	f7ff fba7 	bl	800defa <memcpy>
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	f7ff fbd0 	bl	800df54 <_free_r>
 800e7b4:	463c      	mov	r4, r7
 800e7b6:	e7e0      	b.n	800e77a <_realloc_r+0x1e>

0800e7b8 <__sfputc_r>:
 800e7b8:	6893      	ldr	r3, [r2, #8]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	b410      	push	{r4}
 800e7c0:	6093      	str	r3, [r2, #8]
 800e7c2:	da07      	bge.n	800e7d4 <__sfputc_r+0x1c>
 800e7c4:	6994      	ldr	r4, [r2, #24]
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	db01      	blt.n	800e7ce <__sfputc_r+0x16>
 800e7ca:	290a      	cmp	r1, #10
 800e7cc:	d102      	bne.n	800e7d4 <__sfputc_r+0x1c>
 800e7ce:	bc10      	pop	{r4}
 800e7d0:	f000 b932 	b.w	800ea38 <__swbuf_r>
 800e7d4:	6813      	ldr	r3, [r2, #0]
 800e7d6:	1c58      	adds	r0, r3, #1
 800e7d8:	6010      	str	r0, [r2, #0]
 800e7da:	7019      	strb	r1, [r3, #0]
 800e7dc:	4608      	mov	r0, r1
 800e7de:	bc10      	pop	{r4}
 800e7e0:	4770      	bx	lr

0800e7e2 <__sfputs_r>:
 800e7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	460f      	mov	r7, r1
 800e7e8:	4614      	mov	r4, r2
 800e7ea:	18d5      	adds	r5, r2, r3
 800e7ec:	42ac      	cmp	r4, r5
 800e7ee:	d101      	bne.n	800e7f4 <__sfputs_r+0x12>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e007      	b.n	800e804 <__sfputs_r+0x22>
 800e7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f8:	463a      	mov	r2, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7ff ffdc 	bl	800e7b8 <__sfputc_r>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d1f3      	bne.n	800e7ec <__sfputs_r+0xa>
 800e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e808 <_vfiprintf_r>:
 800e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80c:	460d      	mov	r5, r1
 800e80e:	b09d      	sub	sp, #116	@ 0x74
 800e810:	4614      	mov	r4, r2
 800e812:	4698      	mov	r8, r3
 800e814:	4606      	mov	r6, r0
 800e816:	b118      	cbz	r0, 800e820 <_vfiprintf_r+0x18>
 800e818:	6a03      	ldr	r3, [r0, #32]
 800e81a:	b90b      	cbnz	r3, 800e820 <_vfiprintf_r+0x18>
 800e81c:	f7ff f9e4 	bl	800dbe8 <__sinit>
 800e820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e822:	07d9      	lsls	r1, r3, #31
 800e824:	d405      	bmi.n	800e832 <_vfiprintf_r+0x2a>
 800e826:	89ab      	ldrh	r3, [r5, #12]
 800e828:	059a      	lsls	r2, r3, #22
 800e82a:	d402      	bmi.n	800e832 <_vfiprintf_r+0x2a>
 800e82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e82e:	f7ff fb62 	bl	800def6 <__retarget_lock_acquire_recursive>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	071b      	lsls	r3, r3, #28
 800e836:	d501      	bpl.n	800e83c <_vfiprintf_r+0x34>
 800e838:	692b      	ldr	r3, [r5, #16]
 800e83a:	b99b      	cbnz	r3, 800e864 <_vfiprintf_r+0x5c>
 800e83c:	4629      	mov	r1, r5
 800e83e:	4630      	mov	r0, r6
 800e840:	f000 f938 	bl	800eab4 <__swsetup_r>
 800e844:	b170      	cbz	r0, 800e864 <_vfiprintf_r+0x5c>
 800e846:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e848:	07dc      	lsls	r4, r3, #31
 800e84a:	d504      	bpl.n	800e856 <_vfiprintf_r+0x4e>
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	b01d      	add	sp, #116	@ 0x74
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	89ab      	ldrh	r3, [r5, #12]
 800e858:	0598      	lsls	r0, r3, #22
 800e85a:	d4f7      	bmi.n	800e84c <_vfiprintf_r+0x44>
 800e85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e85e:	f7ff fb4b 	bl	800def8 <__retarget_lock_release_recursive>
 800e862:	e7f3      	b.n	800e84c <_vfiprintf_r+0x44>
 800e864:	2300      	movs	r3, #0
 800e866:	9309      	str	r3, [sp, #36]	@ 0x24
 800e868:	2320      	movs	r3, #32
 800e86a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e872:	2330      	movs	r3, #48	@ 0x30
 800e874:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea24 <_vfiprintf_r+0x21c>
 800e878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e87c:	f04f 0901 	mov.w	r9, #1
 800e880:	4623      	mov	r3, r4
 800e882:	469a      	mov	sl, r3
 800e884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e888:	b10a      	cbz	r2, 800e88e <_vfiprintf_r+0x86>
 800e88a:	2a25      	cmp	r2, #37	@ 0x25
 800e88c:	d1f9      	bne.n	800e882 <_vfiprintf_r+0x7a>
 800e88e:	ebba 0b04 	subs.w	fp, sl, r4
 800e892:	d00b      	beq.n	800e8ac <_vfiprintf_r+0xa4>
 800e894:	465b      	mov	r3, fp
 800e896:	4622      	mov	r2, r4
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7ff ffa1 	bl	800e7e2 <__sfputs_r>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	f000 80a7 	beq.w	800e9f4 <_vfiprintf_r+0x1ec>
 800e8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a8:	445a      	add	r2, fp
 800e8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 809f 	beq.w	800e9f4 <_vfiprintf_r+0x1ec>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8c0:	f10a 0a01 	add.w	sl, sl, #1
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	9307      	str	r3, [sp, #28]
 800e8c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8ce:	4654      	mov	r4, sl
 800e8d0:	2205      	movs	r2, #5
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	4853      	ldr	r0, [pc, #332]	@ (800ea24 <_vfiprintf_r+0x21c>)
 800e8d8:	f7f1 fc5a 	bl	8000190 <memchr>
 800e8dc:	9a04      	ldr	r2, [sp, #16]
 800e8de:	b9d8      	cbnz	r0, 800e918 <_vfiprintf_r+0x110>
 800e8e0:	06d1      	lsls	r1, r2, #27
 800e8e2:	bf44      	itt	mi
 800e8e4:	2320      	movmi	r3, #32
 800e8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ea:	0713      	lsls	r3, r2, #28
 800e8ec:	bf44      	itt	mi
 800e8ee:	232b      	movmi	r3, #43	@ 0x2b
 800e8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8fa:	d015      	beq.n	800e928 <_vfiprintf_r+0x120>
 800e8fc:	9a07      	ldr	r2, [sp, #28]
 800e8fe:	4654      	mov	r4, sl
 800e900:	2000      	movs	r0, #0
 800e902:	f04f 0c0a 	mov.w	ip, #10
 800e906:	4621      	mov	r1, r4
 800e908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e90c:	3b30      	subs	r3, #48	@ 0x30
 800e90e:	2b09      	cmp	r3, #9
 800e910:	d94b      	bls.n	800e9aa <_vfiprintf_r+0x1a2>
 800e912:	b1b0      	cbz	r0, 800e942 <_vfiprintf_r+0x13a>
 800e914:	9207      	str	r2, [sp, #28]
 800e916:	e014      	b.n	800e942 <_vfiprintf_r+0x13a>
 800e918:	eba0 0308 	sub.w	r3, r0, r8
 800e91c:	fa09 f303 	lsl.w	r3, r9, r3
 800e920:	4313      	orrs	r3, r2
 800e922:	9304      	str	r3, [sp, #16]
 800e924:	46a2      	mov	sl, r4
 800e926:	e7d2      	b.n	800e8ce <_vfiprintf_r+0xc6>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	1d19      	adds	r1, r3, #4
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	9103      	str	r1, [sp, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfbb      	ittet	lt
 800e934:	425b      	neglt	r3, r3
 800e936:	f042 0202 	orrlt.w	r2, r2, #2
 800e93a:	9307      	strge	r3, [sp, #28]
 800e93c:	9307      	strlt	r3, [sp, #28]
 800e93e:	bfb8      	it	lt
 800e940:	9204      	strlt	r2, [sp, #16]
 800e942:	7823      	ldrb	r3, [r4, #0]
 800e944:	2b2e      	cmp	r3, #46	@ 0x2e
 800e946:	d10a      	bne.n	800e95e <_vfiprintf_r+0x156>
 800e948:	7863      	ldrb	r3, [r4, #1]
 800e94a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e94c:	d132      	bne.n	800e9b4 <_vfiprintf_r+0x1ac>
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	1d1a      	adds	r2, r3, #4
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	9203      	str	r2, [sp, #12]
 800e956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e95a:	3402      	adds	r4, #2
 800e95c:	9305      	str	r3, [sp, #20]
 800e95e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ea28 <_vfiprintf_r+0x220>
 800e962:	7821      	ldrb	r1, [r4, #0]
 800e964:	2203      	movs	r2, #3
 800e966:	4650      	mov	r0, sl
 800e968:	f7f1 fc12 	bl	8000190 <memchr>
 800e96c:	b138      	cbz	r0, 800e97e <_vfiprintf_r+0x176>
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	eba0 000a 	sub.w	r0, r0, sl
 800e974:	2240      	movs	r2, #64	@ 0x40
 800e976:	4082      	lsls	r2, r0
 800e978:	4313      	orrs	r3, r2
 800e97a:	3401      	adds	r4, #1
 800e97c:	9304      	str	r3, [sp, #16]
 800e97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e982:	482a      	ldr	r0, [pc, #168]	@ (800ea2c <_vfiprintf_r+0x224>)
 800e984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e988:	2206      	movs	r2, #6
 800e98a:	f7f1 fc01 	bl	8000190 <memchr>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d03f      	beq.n	800ea12 <_vfiprintf_r+0x20a>
 800e992:	4b27      	ldr	r3, [pc, #156]	@ (800ea30 <_vfiprintf_r+0x228>)
 800e994:	bb1b      	cbnz	r3, 800e9de <_vfiprintf_r+0x1d6>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	3307      	adds	r3, #7
 800e99a:	f023 0307 	bic.w	r3, r3, #7
 800e99e:	3308      	adds	r3, #8
 800e9a0:	9303      	str	r3, [sp, #12]
 800e9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a4:	443b      	add	r3, r7
 800e9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9a8:	e76a      	b.n	800e880 <_vfiprintf_r+0x78>
 800e9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	e7a8      	b.n	800e906 <_vfiprintf_r+0xfe>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	3401      	adds	r4, #1
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	f04f 0c0a 	mov.w	ip, #10
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9c6:	3a30      	subs	r2, #48	@ 0x30
 800e9c8:	2a09      	cmp	r2, #9
 800e9ca:	d903      	bls.n	800e9d4 <_vfiprintf_r+0x1cc>
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d0c6      	beq.n	800e95e <_vfiprintf_r+0x156>
 800e9d0:	9105      	str	r1, [sp, #20]
 800e9d2:	e7c4      	b.n	800e95e <_vfiprintf_r+0x156>
 800e9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9d8:	4604      	mov	r4, r0
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e7f0      	b.n	800e9c0 <_vfiprintf_r+0x1b8>
 800e9de:	ab03      	add	r3, sp, #12
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	4b13      	ldr	r3, [pc, #76]	@ (800ea34 <_vfiprintf_r+0x22c>)
 800e9e6:	a904      	add	r1, sp, #16
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f3af 8000 	nop.w
 800e9ee:	4607      	mov	r7, r0
 800e9f0:	1c78      	adds	r0, r7, #1
 800e9f2:	d1d6      	bne.n	800e9a2 <_vfiprintf_r+0x19a>
 800e9f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f6:	07d9      	lsls	r1, r3, #31
 800e9f8:	d405      	bmi.n	800ea06 <_vfiprintf_r+0x1fe>
 800e9fa:	89ab      	ldrh	r3, [r5, #12]
 800e9fc:	059a      	lsls	r2, r3, #22
 800e9fe:	d402      	bmi.n	800ea06 <_vfiprintf_r+0x1fe>
 800ea00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea02:	f7ff fa79 	bl	800def8 <__retarget_lock_release_recursive>
 800ea06:	89ab      	ldrh	r3, [r5, #12]
 800ea08:	065b      	lsls	r3, r3, #25
 800ea0a:	f53f af1f 	bmi.w	800e84c <_vfiprintf_r+0x44>
 800ea0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea10:	e71e      	b.n	800e850 <_vfiprintf_r+0x48>
 800ea12:	ab03      	add	r3, sp, #12
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	462a      	mov	r2, r5
 800ea18:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <_vfiprintf_r+0x22c>)
 800ea1a:	a904      	add	r1, sp, #16
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7ff fca9 	bl	800e374 <_printf_i>
 800ea22:	e7e4      	b.n	800e9ee <_vfiprintf_r+0x1e6>
 800ea24:	0800f503 	.word	0x0800f503
 800ea28:	0800f509 	.word	0x0800f509
 800ea2c:	0800f50d 	.word	0x0800f50d
 800ea30:	00000000 	.word	0x00000000
 800ea34:	0800e7e3 	.word	0x0800e7e3

0800ea38 <__swbuf_r>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	460e      	mov	r6, r1
 800ea3c:	4614      	mov	r4, r2
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b118      	cbz	r0, 800ea4a <__swbuf_r+0x12>
 800ea42:	6a03      	ldr	r3, [r0, #32]
 800ea44:	b90b      	cbnz	r3, 800ea4a <__swbuf_r+0x12>
 800ea46:	f7ff f8cf 	bl	800dbe8 <__sinit>
 800ea4a:	69a3      	ldr	r3, [r4, #24]
 800ea4c:	60a3      	str	r3, [r4, #8]
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	071a      	lsls	r2, r3, #28
 800ea52:	d501      	bpl.n	800ea58 <__swbuf_r+0x20>
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	b943      	cbnz	r3, 800ea6a <__swbuf_r+0x32>
 800ea58:	4621      	mov	r1, r4
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f000 f82a 	bl	800eab4 <__swsetup_r>
 800ea60:	b118      	cbz	r0, 800ea6a <__swbuf_r+0x32>
 800ea62:	f04f 37ff 	mov.w	r7, #4294967295
 800ea66:	4638      	mov	r0, r7
 800ea68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	6922      	ldr	r2, [r4, #16]
 800ea6e:	1a98      	subs	r0, r3, r2
 800ea70:	6963      	ldr	r3, [r4, #20]
 800ea72:	b2f6      	uxtb	r6, r6
 800ea74:	4283      	cmp	r3, r0
 800ea76:	4637      	mov	r7, r6
 800ea78:	dc05      	bgt.n	800ea86 <__swbuf_r+0x4e>
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7ff fe19 	bl	800e6b4 <_fflush_r>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1ed      	bne.n	800ea62 <__swbuf_r+0x2a>
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	701e      	strb	r6, [r3, #0]
 800ea94:	6962      	ldr	r2, [r4, #20]
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d004      	beq.n	800eaa6 <__swbuf_r+0x6e>
 800ea9c:	89a3      	ldrh	r3, [r4, #12]
 800ea9e:	07db      	lsls	r3, r3, #31
 800eaa0:	d5e1      	bpl.n	800ea66 <__swbuf_r+0x2e>
 800eaa2:	2e0a      	cmp	r6, #10
 800eaa4:	d1df      	bne.n	800ea66 <__swbuf_r+0x2e>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7ff fe03 	bl	800e6b4 <_fflush_r>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d0d9      	beq.n	800ea66 <__swbuf_r+0x2e>
 800eab2:	e7d6      	b.n	800ea62 <__swbuf_r+0x2a>

0800eab4 <__swsetup_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4b29      	ldr	r3, [pc, #164]	@ (800eb5c <__swsetup_r+0xa8>)
 800eab8:	4605      	mov	r5, r0
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	460c      	mov	r4, r1
 800eabe:	b118      	cbz	r0, 800eac8 <__swsetup_r+0x14>
 800eac0:	6a03      	ldr	r3, [r0, #32]
 800eac2:	b90b      	cbnz	r3, 800eac8 <__swsetup_r+0x14>
 800eac4:	f7ff f890 	bl	800dbe8 <__sinit>
 800eac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eacc:	0719      	lsls	r1, r3, #28
 800eace:	d422      	bmi.n	800eb16 <__swsetup_r+0x62>
 800ead0:	06da      	lsls	r2, r3, #27
 800ead2:	d407      	bmi.n	800eae4 <__swsetup_r+0x30>
 800ead4:	2209      	movs	r2, #9
 800ead6:	602a      	str	r2, [r5, #0]
 800ead8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	f04f 30ff 	mov.w	r0, #4294967295
 800eae2:	e033      	b.n	800eb4c <__swsetup_r+0x98>
 800eae4:	0758      	lsls	r0, r3, #29
 800eae6:	d512      	bpl.n	800eb0e <__swsetup_r+0x5a>
 800eae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaea:	b141      	cbz	r1, 800eafe <__swsetup_r+0x4a>
 800eaec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	d002      	beq.n	800eafa <__swsetup_r+0x46>
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f7ff fa2d 	bl	800df54 <_free_r>
 800eafa:	2300      	movs	r3, #0
 800eafc:	6363      	str	r3, [r4, #52]	@ 0x34
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	2300      	movs	r3, #0
 800eb08:	6063      	str	r3, [r4, #4]
 800eb0a:	6923      	ldr	r3, [r4, #16]
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f043 0308 	orr.w	r3, r3, #8
 800eb14:	81a3      	strh	r3, [r4, #12]
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	b94b      	cbnz	r3, 800eb2e <__swsetup_r+0x7a>
 800eb1a:	89a3      	ldrh	r3, [r4, #12]
 800eb1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb24:	d003      	beq.n	800eb2e <__swsetup_r+0x7a>
 800eb26:	4621      	mov	r1, r4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f000 f847 	bl	800ebbc <__smakebuf_r>
 800eb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb32:	f013 0201 	ands.w	r2, r3, #1
 800eb36:	d00a      	beq.n	800eb4e <__swsetup_r+0x9a>
 800eb38:	2200      	movs	r2, #0
 800eb3a:	60a2      	str	r2, [r4, #8]
 800eb3c:	6962      	ldr	r2, [r4, #20]
 800eb3e:	4252      	negs	r2, r2
 800eb40:	61a2      	str	r2, [r4, #24]
 800eb42:	6922      	ldr	r2, [r4, #16]
 800eb44:	b942      	cbnz	r2, 800eb58 <__swsetup_r+0xa4>
 800eb46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb4a:	d1c5      	bne.n	800ead8 <__swsetup_r+0x24>
 800eb4c:	bd38      	pop	{r3, r4, r5, pc}
 800eb4e:	0799      	lsls	r1, r3, #30
 800eb50:	bf58      	it	pl
 800eb52:	6962      	ldrpl	r2, [r4, #20]
 800eb54:	60a2      	str	r2, [r4, #8]
 800eb56:	e7f4      	b.n	800eb42 <__swsetup_r+0x8e>
 800eb58:	2000      	movs	r0, #0
 800eb5a:	e7f7      	b.n	800eb4c <__swsetup_r+0x98>
 800eb5c:	20000020 	.word	0x20000020

0800eb60 <_malloc_usable_size_r>:
 800eb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb64:	1f18      	subs	r0, r3, #4
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	bfbc      	itt	lt
 800eb6a:	580b      	ldrlt	r3, [r1, r0]
 800eb6c:	18c0      	addlt	r0, r0, r3
 800eb6e:	4770      	bx	lr

0800eb70 <__swhatbuf_r>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	460c      	mov	r4, r1
 800eb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb78:	2900      	cmp	r1, #0
 800eb7a:	b096      	sub	sp, #88	@ 0x58
 800eb7c:	4615      	mov	r5, r2
 800eb7e:	461e      	mov	r6, r3
 800eb80:	da0d      	bge.n	800eb9e <__swhatbuf_r+0x2e>
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb88:	f04f 0100 	mov.w	r1, #0
 800eb8c:	bf14      	ite	ne
 800eb8e:	2340      	movne	r3, #64	@ 0x40
 800eb90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb94:	2000      	movs	r0, #0
 800eb96:	6031      	str	r1, [r6, #0]
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	b016      	add	sp, #88	@ 0x58
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
 800eb9e:	466a      	mov	r2, sp
 800eba0:	f000 f848 	bl	800ec34 <_fstat_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	dbec      	blt.n	800eb82 <__swhatbuf_r+0x12>
 800eba8:	9901      	ldr	r1, [sp, #4]
 800ebaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebb2:	4259      	negs	r1, r3
 800ebb4:	4159      	adcs	r1, r3
 800ebb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebba:	e7eb      	b.n	800eb94 <__swhatbuf_r+0x24>

0800ebbc <__smakebuf_r>:
 800ebbc:	898b      	ldrh	r3, [r1, #12]
 800ebbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebc0:	079d      	lsls	r5, r3, #30
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	d507      	bpl.n	800ebd8 <__smakebuf_r+0x1c>
 800ebc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	6123      	str	r3, [r4, #16]
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	6163      	str	r3, [r4, #20]
 800ebd4:	b003      	add	sp, #12
 800ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd8:	ab01      	add	r3, sp, #4
 800ebda:	466a      	mov	r2, sp
 800ebdc:	f7ff ffc8 	bl	800eb70 <__swhatbuf_r>
 800ebe0:	9f00      	ldr	r7, [sp, #0]
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7fe fe24 	bl	800d834 <_malloc_r>
 800ebec:	b948      	cbnz	r0, 800ec02 <__smakebuf_r+0x46>
 800ebee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebf2:	059a      	lsls	r2, r3, #22
 800ebf4:	d4ee      	bmi.n	800ebd4 <__smakebuf_r+0x18>
 800ebf6:	f023 0303 	bic.w	r3, r3, #3
 800ebfa:	f043 0302 	orr.w	r3, r3, #2
 800ebfe:	81a3      	strh	r3, [r4, #12]
 800ec00:	e7e2      	b.n	800ebc8 <__smakebuf_r+0xc>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	6020      	str	r0, [r4, #0]
 800ec06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	9b01      	ldr	r3, [sp, #4]
 800ec0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec12:	b15b      	cbz	r3, 800ec2c <__smakebuf_r+0x70>
 800ec14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f000 f81d 	bl	800ec58 <_isatty_r>
 800ec1e:	b128      	cbz	r0, 800ec2c <__smakebuf_r+0x70>
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	f023 0303 	bic.w	r3, r3, #3
 800ec26:	f043 0301 	orr.w	r3, r3, #1
 800ec2a:	81a3      	strh	r3, [r4, #12]
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	431d      	orrs	r5, r3
 800ec30:	81a5      	strh	r5, [r4, #12]
 800ec32:	e7cf      	b.n	800ebd4 <__smakebuf_r+0x18>

0800ec34 <_fstat_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	@ (800ec54 <_fstat_r+0x20>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	4611      	mov	r1, r2
 800ec40:	602b      	str	r3, [r5, #0]
 800ec42:	f7f2 fa64 	bl	800110e <_fstat>
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	d102      	bne.n	800ec50 <_fstat_r+0x1c>
 800ec4a:	682b      	ldr	r3, [r5, #0]
 800ec4c:	b103      	cbz	r3, 800ec50 <_fstat_r+0x1c>
 800ec4e:	6023      	str	r3, [r4, #0]
 800ec50:	bd38      	pop	{r3, r4, r5, pc}
 800ec52:	bf00      	nop
 800ec54:	20000af0 	.word	0x20000af0

0800ec58 <_isatty_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d06      	ldr	r5, [pc, #24]	@ (800ec74 <_isatty_r+0x1c>)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	602b      	str	r3, [r5, #0]
 800ec64:	f7f2 fa58 	bl	8001118 <_isatty>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_isatty_r+0x1a>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_isatty_r+0x1a>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20000af0 	.word	0x20000af0

0800ec78 <_init>:
 800ec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7a:	bf00      	nop
 800ec7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7e:	bc08      	pop	{r3}
 800ec80:	469e      	mov	lr, r3
 800ec82:	4770      	bx	lr

0800ec84 <_fini>:
 800ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec86:	bf00      	nop
 800ec88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec8a:	bc08      	pop	{r3}
 800ec8c:	469e      	mov	lr, r3
 800ec8e:	4770      	bx	lr
